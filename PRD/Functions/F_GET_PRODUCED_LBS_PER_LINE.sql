

-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Julio Díaz
-- CREATE date: 09/25/2018
-- Description: Funtion that obtains the produced pounds per line
-- =============================================
CREATE FUNCTION [PRD].[F_GET_PRODUCED_LBS_PER_LINE] (
	@PIN_XML_PRODUCTION_LINE XML
	, @PIN_DT_INITIAL_SHIFT DATETIME
)
RETURNS @T_PRD_LBS TABLE (
	ID_PRODUCTION_LINE INT
	, NO_PRD_LBS DECIMAL(13,2)
	, NO_SVD_LBS DECIMAL(13,2)
)
AS

BEGIN

	DECLARE @DT_SYSTEM DATETIME = GETDATE()
		, @DT_INITIAL DATETIME = ISNULL(@PIN_DT_INITIAL_SHIFT, GETDATE())
		, @DT_FINAL DATETIME

	DECLARE @T_DOWNTIMES TABLE (
		ID_PRODUCTION_LINE INT
		, DT_INITIAL DATETIME
		, DT_FINAL DATETIME
	)

	DECLARE @T_PRODUCTION_LINES TABLE (
		ID_PRODUCTION_LINE INT
		, ID_LINE_RATE_METRIC INT
		, ID_WEIGHT_METRIC INT
	)

	INSERT INTO @T_PRODUCTION_LINES (
		ID_PRODUCTION_LINE
	)
	SELECT c.value('@ID_PRODUCTION_LINE', 'INT')
	FROM @PIN_XML_PRODUCTION_LINE.nodes('/PRODUCTION_LINES/PRODUCTION_LINE') X(c)

	UPDATE TPL
	SET ID_LINE_RATE_METRIC = CBP.ID_LBS_PER_HOUR_METRIC
		, ID_WEIGHT_METRIC = CBP.ID_WEIGHT_METRIC
	FROM @T_PRODUCTION_LINES TPL
		INNER JOIN PRD.C_PRODUCTION_LINE CPL
			ON TPL.ID_PRODUCTION_LINE = CPL.ID_PRODUCTION_LINE
		INNER JOIN ADM.C_BRANCH_PLANT CBP
			ON CBP.ID_BRANCH_PLANT = CPL.ID_BRANCH_PLANT

	DECLARE @T_LINE_RATE TABLE (
		ID_PRODUCTION_LINE INT
		, ID_K_FORM INT
		, DT_FORM_CAPTURED DATETIME
		, DT_NEXT_FORM DATETIME
		, NO_LINE_RATE DECIMAL(13,2)
	)

	SELECT @DT_INITIAL = CAST(CAST(@DT_INITIAL AS DATE) AS DATETIME) + CAST(TS_START_SHIFT AS DATETIME)
		, @DT_FINAL = CAST(CAST(@DT_INITIAL AS DATE) AS DATETIME) + CAST(TS_END_SHIFT AS DATETIME)
	FROM ADM.VW_C_SHIFT
	WHERE @DT_INITIAL BETWEEN CAST(CAST(@DT_INITIAL AS DATE) AS DATETIME) + CAST(TS_START_SHIFT AS DATETIME) AND CAST(CAST(@DT_INITIAL AS DATE) AS DATETIME) + CAST(TS_END_SHIFT AS DATETIME)

	; WITH T_QA27 AS (
		SELECT KS.ID_PRODUCTION_LINE FROM PRD.K_QA27 KQ
			INNER JOIN PRD.K_SHIFT KS
				ON KQ.ID_SHIFT = KS.ID_SHIFT
				AND KS.DT_START_SHIFT BETWEEN @DT_INITIAL AND @DT_FINAL
				AND EXISTS (SELECT TOP 1 1 FROM @T_PRODUCTION_LINES TPL WHERE TPL.ID_PRODUCTION_LINE = KS.ID_PRODUCTION_LINE)
	), T_FORMS AS (
		SELECT ROW_NUMBER() OVER (PARTITION BY KF.ID_PRODUCTION_LINE ORDER BY DT_FORM DESC) AS NO_ROW
			, KF.ID_PRODUCTION_LINE
			, KF.ID_K_FORM
			, CASE WHEN KF.DT_CLOSED < @DT_INITIAL THEN @DT_INITIAL ELSE KF.DT_CLOSED END AS DT_CLOSED
		FROM PRD.K_FORM KF
			INNER JOIN T_QA27 TQ
				ON KF.ID_PRODUCTION_LINE = TQ.ID_PRODUCTION_LINE
		WHERE KF.DT_FORM < @DT_INITIAL
			AND KF.KY_STATUS_FORM = 'CAPTURED'
			AND KF.KY_PROCESS_TYPE = 'PROCESS'
	)
	INSERT INTO @T_LINE_RATE (ID_PRODUCTION_LINE, ID_K_FORM, DT_FORM_CAPTURED)
	SELECT ID_PRODUCTION_LINE, ID_K_FORM, DT_CLOSED
	FROM T_FORMS
	WHERE NO_ROW = 1

	INSERT INTO @T_LINE_RATE (ID_PRODUCTION_LINE, ID_K_FORM, DT_FORM_CAPTURED)
	SELECT ID_PRODUCTION_LINE, ID_K_FORM, DT_CLOSED
	FROM PRD.K_FORM KF
	WHERE KF.DT_FORM BETWEEN @DT_INITIAL AND @DT_FINAL
		AND KF.KY_STATUS_FORM = 'CAPTURED'
		AND KF.KY_PROCESS_TYPE = 'PROCESS'
		AND EXISTS (SELECT TOP 1 1 FROM @T_PRODUCTION_LINES TPL WHERE KF.ID_PRODUCTION_LINE = TPL.ID_PRODUCTION_LINE)

	--SELECT @DT_SYSTEM
	--	, @DT_INITIAL
	--	, @DT_FINAL 
	--	, CASE WHEN @DT_SYSTEM < @DT_FINAL THEN @DT_SYSTEM ELSE @DT_FINAL END

	; WITH T_FORM AS (
		SELECT TLR.ID_K_FORM
			, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,2)') AS NO_LINE_RATE
			, ISNULL(LEAD(TLR.DT_FORM_CAPTURED, 1, NULL) OVER (PARTITION BY TLR.ID_PRODUCTION_LINE ORDER BY TLR.ID_PRODUCTION_LINE, TLR.DT_FORM_CAPTURED), CASE WHEN @DT_SYSTEM < @DT_FINAL THEN @DT_SYSTEM ELSE @DT_FINAL END) AS DT_NEXT_FORM
		FROM @T_LINE_RATE TLR
			INNER JOIN @T_PRODUCTION_LINES TPL
				ON TLR.ID_PRODUCTION_LINE = TPL.ID_PRODUCTION_LINE
			INNER JOIN PRD.K_FORM_METRICS KFM
				ON TLR.ID_K_FORM = KFM.ID_K_FORM
				AND KFM.ID_METRICS = TPL.ID_LINE_RATE_METRIC
	)
	UPDATE TLR
	SET NO_LINE_RATE = TF.NO_LINE_RATE
		, DT_NEXT_FORM = TF.DT_NEXT_FORM
	FROM @T_LINE_RATE TLR
		INNER JOIN T_FORM TF
			ON TLR.ID_K_FORM = TF.ID_K_FORM

	--SELECT *, DATEDIFF(MINUTE, TLR.DT_FORM_CAPTURED, TLR.DT_NEXT_FORM)
	--FROM @T_LINE_RATE TLR
	--ORDER BY ID_PRODUCTION_LINE, DT_FORM_CAPTURED

	INSERT INTO @T_DOWNTIMES (
		ID_PRODUCTION_LINE
		, DT_INITIAL
		, DT_FINAL
	)
	SELECT ID_PRODUCTION_LINE
		, CASE WHEN KI.DT_ISSUE < @DT_INITIAL THEN @DT_INITIAL ELSE KI.DT_ISSUE END
		, CASE WHEN KI.DT_ISSUE_CLOSED > @DT_FINAL THEN @DT_FINAL ELSE ISNULL(KI.DT_ISSUE_CLOSED, CASE WHEN @DT_SYSTEM < @DT_FINAL THEN @DT_SYSTEM ELSE @DT_FINAL END) END
	FROM PRD.K_ISSUE KI
	WHERE KI.FG_LINE_DOWN = 1 
		AND (
			KI.DT_ISSUE BETWEEN @DT_INITIAL AND @DT_FINAL
			OR (ISNULL(KI.DT_ISSUE_CLOSED, CASE WHEN @DT_SYSTEM < @DT_FINAL THEN @DT_SYSTEM ELSE @DT_FINAL END) BETWEEN @DT_INITIAL AND @DT_FINAL AND KI.DT_ISSUE < @DT_FINAL)
			OR @DT_INITIAL BETWEEN KI.DT_ISSUE AND KI.DT_ISSUE_CLOSED
		)

--	SELECT *
--	FROM @T_LINE_RATE TLR
----	WHERE ID_PRODUCTION_LINE = 2211004
--	ORDER BY ID_PRODUCTION_LINE, DT_FORM_CAPTURED

	; WITH T_DOWNTIME_LBS AS (
		SELECT TLR.ID_PRODUCTION_LINE
			, TLR.ID_K_FORM
			, SUM(ISNULL(DATEDIFF(MINUTE, TD.DT_INITIAL, TD.DT_FINAL), 0)) AS NO_DOWNTIME_MINUTES
			, SUM((TLR.NO_LINE_RATE / 60) * ISNULL(DATEDIFF(MINUTE, TD.DT_INITIAL, TD.DT_FINAL), 0)) AS NO_DOWNTIME_LBS
		FROM @T_DOWNTIMES TD
			INNER JOIN @T_LINE_RATE TLR
				ON TD.ID_PRODUCTION_LINE = TLR.ID_PRODUCTION_LINE
				AND TD.DT_INITIAL BETWEEN TLR.DT_FORM_CAPTURED AND TLR.DT_NEXT_FORM
		GROUP BY TLR.ID_PRODUCTION_LINE, TLR.ID_K_FORM
	), T_PRD_LBS AS (
		SELECT TLR.ID_PRODUCTION_LINE
			, DATEDIFF(MINUTE, TLR.DT_FORM_CAPTURED, TLR.DT_NEXT_FORM) AS NO_PRD_MINUTES
			, TDL.NO_DOWNTIME_MINUTES
			, (TLR.NO_LINE_RATE / 60) * (DATEDIFF(MINUTE, TLR.DT_FORM_CAPTURED, TLR.DT_NEXT_FORM) - ISNULL(TDL.NO_DOWNTIME_MINUTES, 0)) AS NO_PRD_LBS
		FROM @T_LINE_RATE TLR
			LEFT JOIN T_DOWNTIME_LBS TDL
				ON TLR.ID_PRODUCTION_LINE = TDL.ID_PRODUCTION_LINE
				AND TLR.ID_K_FORM = TDL.ID_K_FORM
	)
	INSERT INTO @T_PRD_LBS (
		ID_PRODUCTION_LINE
		, NO_PRD_LBS
	)
	SELECT ID_PRODUCTION_LINE, SUM(NO_PRD_LBS) AS NO_SUM_PRD_LBS 
	FROM T_PRD_LBS
	GROUP BY ID_PRODUCTION_LINE


--000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

	DECLARE @TB_POUNDS_SAVED_PER_LINE TABLE (
		ID_PRODUCTION_LINE INT
		, ID_PRODUCTION_LINE_TYPE INT
		, NO_POUNDS_SAVED NUMERIC(13,2)
	)

	DECLARE @T_LBS_SAVED_PER_SKID TABLE (
		ID_PRODUCTION_LINE INT
		, ID_WORK_ORDER INT
		, ID_PALLET INT
		, NO_QUANTITY INT
		, NO_AVG_WEIGHT DECIMAL(13,7)
	)

	; WITH T_LBS_PER_SKID AS (
		SELECT KP.ID_WORK_ORDER
			, KP.ID_PALLET
			, KP.NO_QUANTITY
			, CASE WHEN KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)') = 'NUMERICBOX' THEN KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,7)') END AS NO_WEIGHT
			, KF.ID_K_FORM
			, KS.ID_PRODUCTION_LINE
		FROM PRD.K_PALLET KP
			INNER JOIN PRD.K_QA27 KQ
				ON KP.ID_QA27 = KQ.ID_QA27
				AND EXISTS (SELECT TOP 1 1 FROM ADM.VW_C_PALLET_STATUS VCPS WHERE VCPS.KY_PALLET_STATUS = KP.KY_STATUS AND VCPS.FG_FOR_SAVE = 1)
			INNER JOIN PRD.K_SHIFT KS
				ON KQ.ID_SHIFT = KS.ID_SHIFT
			INNER JOIN @T_PRODUCTION_LINES TPL
				ON TPL.ID_PRODUCTION_LINE = KS.ID_PRODUCTION_LINE
			--INNER JOIN PRD.C_PRODUCTION_LINE CPL
			--	ON CPL.ID_PRODUCTION_LINE = KS.ID_PRODUCTION_LINE
			LEFT JOIN PRD.K_FORM KF
				ON KF.ID_PALLET = KP.ID_PALLET
				AND KF.KY_PROCESS_TYPE = 'MANUFACTURE'
				AND KF.KY_STATUS_FORM = 'CAPTURED'
			LEFT JOIN PRD.K_FORM_METRICS KFM
				ON KF.ID_K_FORM = KFM.ID_K_FORM
				AND KFM.ID_METRICS = TPL.ID_WEIGHT_METRIC
		WHERE KP.DT_INITIAL_TIME BETWEEN @DT_INITIAL AND @DT_FINAL
	)
	INSERT INTO @T_LBS_SAVED_PER_SKID (
		ID_PRODUCTION_LINE
		, ID_WORK_ORDER
		, ID_PALLET
		, NO_QUANTITY
		, NO_AVG_WEIGHT
	)
	SELECT ID_PRODUCTION_LINE
		, ID_WORK_ORDER
		, ID_PALLET
		, NO_QUANTITY
		, AVG(NO_WEIGHT) AS NO_AVG_WEIGHT
	FROM T_LBS_PER_SKID
	GROUP BY ID_PRODUCTION_LINE, ID_WORK_ORDER, ID_PALLET, NO_QUANTITY
	
	; WITH T_AVG_LBS_PER_WORK_ORDER AS (
		SELECT ID_WORK_ORDER
			, AVG(NO_AVG_WEIGHT) AS NO_AVG_LBS_WORK_ORDER
		FROM @T_LBS_SAVED_PER_SKID
		GROUP BY ID_WORK_ORDER
	)
	UPDATE TLSPS
	SET NO_AVG_WEIGHT = TALPWO.NO_AVG_LBS_WORK_ORDER
	FROM @T_LBS_SAVED_PER_SKID TLSPS
		INNER JOIN T_AVG_LBS_PER_WORK_ORDER TALPWO
			ON TLSPS.ID_WORK_ORDER = TALPWO.ID_WORK_ORDER
	WHERE NO_AVG_WEIGHT IS NULL

	INSERT INTO @TB_POUNDS_SAVED_PER_LINE (
		ID_PRODUCTION_LINE
		, ID_PRODUCTION_LINE_TYPE
		, NO_POUNDS_SAVED
	)
	SELECT CPL.ID_PRODUCTION_LINE
		, CPL.ID_PRODUCTION_LINE_TYPE
		, SUM(TLSPS.NO_QUANTITY * NO_AVG_WEIGHT)
	FROM @T_LBS_SAVED_PER_SKID TLSPS
		INNER JOIN PRD.C_PRODUCTION_LINE CPL
			ON TLSPS.ID_PRODUCTION_LINE = CPL.ID_PRODUCTION_LINE
	GROUP BY CPL.ID_PRODUCTION_LINE_TYPE, CPL.ID_PRODUCTION_LINE

	UPDATE TPL
	SET NO_SVD_LBS = TPSPL.NO_POUNDS_SAVED
	FROM @T_PRD_LBS TPL
		INNER JOIN @TB_POUNDS_SAVED_PER_LINE TPSPL
			ON TPL.ID_PRODUCTION_LINE = TPSPL.ID_PRODUCTION_LINE





	RETURN
END