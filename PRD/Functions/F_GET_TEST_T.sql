
-- =============================================
-- Author:		Juan De Dios Pérez
-- Create date: 13/07/2017
-- Description:	Function to return the users by position
-- =============================================
CREATE FUNCTION [PRD].[F_GET_TEST_T]
(
	 @PIN_LAMBDA REAL,
	 @PIN_HYPOTHETICAL_DIFFERENCE_MEDIAS REAL, 
	 @PIN_TOTAL_SAMPLES INT,
	 @NO_WORK_ORDER INT,
	 @ID_METRICS INT
)
RETURNS INT 
AS 
BEGIN

	DECLARE @NO_RESULT INT = NULL
	 --@XML_RESULT XML = NULL

	DECLARE @XML_SAMPLE_1 XML
	DECLARE @XML_SAMPLE_2 XML

	DECLARE @NO_SAMPLE_SIZE_1 INT
	DECLARE @NO_SAMPLE_SIZE_2 INT

	DECLARE @V_MEAN_X1 REAL
	DECLARE @V_MEAN_X2 REAL
	DECLARE @V_VARIANCE_X1 REAL
	DECLARE @V_VARIANCE_X2 REAL
	DECLARE @V_N1_TOTAL_OBSERVATIONS REAL 
	DECLARE @V_N2_TOTAL_OBSERVATIONS REAL 
	DECLARE @TEST_T REAL=0
	DECLARE @V_HYPOTHETICAL_DIFFERENCE_MEAN REAL=0
	DECLARE @V_GL REAL=0
	DECLARE @V_DEGREE_FREEDOM INT=0
	DECLARE @V_VARIANCE_GROUP REAL=0
	DECLARE @AUX_X1 REAL=0
	DECLARE @AUX_X2 REAL=0
	DECLARE @DECIMAL_PART_T REAL=0
	DECLARE @INTEGER_PART_T REAL=0
	DECLARE @PT_MENOR_t_ONE_TAIL REAL=0
	DECLARE @PT_MENOR_t_TWO_TAIL REAL=0
	DECLARE @PT_CRITICAL_VALUE_ONE_TAIL REAL=0
	DECLARE @PT_CRITICAL_VALUE_TWO_TAIL REAL=0
	DECLARE @V_KY_FIELD_TYPE_METRIC AS NVARCHAR(50)

	DECLARE @TABLE_OBS_1 TABLE( READINGS REAL)
	DECLARE @TABLE_OBS_2 TABLE( READINGS REAL)
	DECLARE @TABLE_MUESTRA_1 TABLE(ID INT PRIMARY KEY IDENTITY(1,1), READINGS REAL, READINGS_X1_X2 REAL,READINGS_SQUART REAL)
	DECLARE @TABLE_MUESTRA_2 TABLE(ID INT PRIMARY KEY IDENTITY(1,1), READINGS REAL, READINGS_X1_X2 REAL,READINGS_SQUART REAL)
				

	SELECT @V_KY_FIELD_TYPE_METRIC = KY_FIELD_TYPE FROM PRD.C_METRICS WHERE ID_METRICS = @ID_METRICS

	IF @V_KY_FIELD_TYPE_METRIC = 'NUMERICBOX' BEGIN	

		SELECT @NO_SAMPLE_SIZE_1 = COUNT(*) 
		FROM PRD.K_WORK_ORDER WO
			INNER JOIN PRD.C_ITEM I ON I.ID_ITEM = WO.ID_ITEM
			INNER JOIN PRD.K_QA27 QA ON QA.ID_WORK_ORDER = WO.ID_WORK_ORDER 
			INNER JOIN PRD.K_SHIFT KS ON KS.KY_SHIFT= QA.KY_SHIFT AND KS.ID_PRODUCTION_LINE = WO.ID_PRODUCTION_LINE 		
			INNER JOIN PRD.K_FORM KF ON WO.ID_WORK_ORDER = KF.ID_WORK_ORDER --KF.ID_K_FORM = KFM.ID_K_FORM
			INNER JOIN PRD.K_FORM_METRICS KFM ON KF.ID_K_FORM = KFM.ID_K_FORM
			INNER JOIN PRD.C_METRICS M ON M.ID_METRICS = KFM.ID_METRICS
			INNER JOIN PRD.C_FORM CF ON KF.ID_FORM = CF.ID_FORM 
		WHERE WO.NO_WORK_ORDER = @NO_WORK_ORDER --and KS.FG_STATUS = 1 AND QA.KY_STATUS = 'RUNNING' --AND R.KY_STATUS ='READ' 
			AND KFM.ID_METRICS = @ID_METRICS AND CF.KY_PROCESS = 'MANUFACTURE' AND  (KFM.DT_CREATION BETWEEN KS.DT_SHIFT_HISTORY AND KS.DT_END_SHIFT) AND KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES[1]/@FIELD_TYPE)[1]', 'NVARCHAR(100)') = 'NUMERICBOX'

		SELECT  @NO_SAMPLE_SIZE_2 = COUNT(*) 
		FROM PRD.K_WORK_ORDER WO --ON R.ID_WORK_ORDER = WO.ID_WORK_ORDER
			INNER JOIN PRD.C_ITEM I ON I.ID_ITEM = WO.ID_ITEM
			INNER JOIN PRD.K_QA27 QA ON QA.ID_WORK_ORDER = WO.ID_WORK_ORDER 
			INNER JOIN PRD.K_SHIFT KS ON KS.KY_SHIFT= QA.KY_SHIFT AND KS.ID_PRODUCTION_LINE = WO.ID_PRODUCTION_LINE 		
			INNER JOIN PRD.K_FORM KF ON WO.ID_WORK_ORDER = KF.ID_WORK_ORDER 
			INNER JOIN PRD.K_FORM_METRICS KFM ON KF.ID_K_FORM = KFM.ID_K_FORM
			INNER JOIN PRD.C_METRICS M ON M.ID_METRICS = KFM.ID_METRICS
			INNER JOIN PRD.C_FORM CF ON KF.ID_FORM = CF.ID_FORM 
		WHERE WO.NO_WORK_ORDER = @NO_WORK_ORDER --and KS.FG_STATUS = 1 AND QA.KY_STATUS = 'RUNNING' --AND R.KY_STATUS ='READ' 
			AND KFM.ID_METRICS = @ID_METRICS AND CF.KY_PROCESS = 'QUALITY' AND  (KFM.DT_CREATION BETWEEN KS.DT_SHIFT_HISTORY AND KS.DT_END_SHIFT) AND KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES[1]/@FIELD_TYPE)[1]', 'NVARCHAR(100)') = 'NUMERICBOX'

		IF @PIN_TOTAL_SAMPLES > 0 BEGIN

			IF @NO_SAMPLE_SIZE_1 > (@PIN_TOTAL_SAMPLES - 1) AND @NO_SAMPLE_SIZE_2 > (@PIN_TOTAL_SAMPLES - 1) BEGIN

				SET @XML_SAMPLE_1 = (
					SELECT XML_METRICS_VALUE.value('(/FIELD_TYPES[1]/@FINISHED_VALUE)[1]', 'NUMERIC(36,4)') AS VALUE 
					FROM PRD.K_WORK_ORDER WO
						INNER JOIN PRD.C_ITEM I ON I.ID_ITEM = WO.ID_ITEM
						INNER JOIN PRD.K_QA27 QA ON QA.ID_WORK_ORDER = WO.ID_WORK_ORDER 
						INNER JOIN PRD.K_SHIFT KS ON KS.KY_SHIFT= QA.KY_SHIFT AND KS.ID_PRODUCTION_LINE = WO.ID_PRODUCTION_LINE 		
						INNER JOIN PRD.K_FORM KF ON WO.ID_WORK_ORDER = KF.ID_WORK_ORDER --KF.ID_K_FORM = KFM.ID_K_FORM
						INNER JOIN PRD.K_FORM_METRICS KFM ON KF.ID_K_FORM = KFM.ID_K_FORM
						INNER JOIN PRD.C_METRICS M ON M.ID_METRICS = KFM.ID_METRICS
						INNER JOIN PRD.C_FORM CF ON KF.ID_FORM = CF.ID_FORM 
					WHERE WO.NO_WORK_ORDER = @NO_WORK_ORDER --and KS.FG_STATUS = 1 AND QA.KY_STATUS = 'RUNNING' --AND R.KY_STATUS ='READ' 
						AND KFM.ID_METRICS = @ID_METRICS AND CF.KY_PROCESS = 'MANUFACTURE' AND  (KFM.DT_CREATION BETWEEN KS.DT_SHIFT_HISTORY AND KS.DT_END_SHIFT) AND KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES[1]/@FIELD_TYPE)[1]', 'NVARCHAR(100)') = 'NUMERICBOX'
					FOR XML RAW ('READING'), ROOT ('READINGS')
				)

				 SET @XML_SAMPLE_2 = (
					SELECT XML_METRICS_VALUE.value('(/FIELD_TYPES[1]/@FINISHED_VALUE)[1]', 'NUMERIC(36,4)') AS VALUE 
					FROM PRD.K_WORK_ORDER WO
						INNER JOIN PRD.C_ITEM I ON I.ID_ITEM = WO.ID_ITEM
						INNER JOIN PRD.K_QA27 QA ON QA.ID_WORK_ORDER = WO.ID_WORK_ORDER 
						INNER JOIN PRD.K_SHIFT KS ON KS.KY_SHIFT= QA.KY_SHIFT AND KS.ID_PRODUCTION_LINE = WO.ID_PRODUCTION_LINE 		
						INNER JOIN PRD.K_FORM KF ON WO.ID_WORK_ORDER = KF.ID_WORK_ORDER 
						INNER JOIN PRD.K_FORM_METRICS KFM ON KF.ID_K_FORM = KFM.ID_K_FORM
						INNER JOIN PRD.C_METRICS M ON M.ID_METRICS = KFM.ID_METRICS
						INNER JOIN PRD.C_FORM CF ON KF.ID_FORM = CF.ID_FORM 
					WHERE WO.NO_WORK_ORDER = @NO_WORK_ORDER --and KS.FG_STATUS = 1 AND QA.KY_STATUS = 'RUNNING' --AND R.KY_STATUS ='READ' 
						AND KFM.ID_METRICS = @ID_METRICS AND CF.KY_PROCESS = 'QUALITY' AND  (KFM.DT_CREATION BETWEEN KS.DT_SHIFT_HISTORY AND KS.DT_END_SHIFT) AND KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES[1]/@FIELD_TYPE)[1]', 'NVARCHAR(100)') = 'NUMERICBOX'
					FOR XML RAW ('READING'), ROOT ('READINGS')
				)

				INSERT INTO @TABLE_OBS_1(READINGS)  
				SELECT msgs.msg.value('@VALUE', 'REAL') AS READING
				FROM @XML_SAMPLE_1.nodes('READINGS/READING') msgs(msg)

				INSERT INTO @TABLE_OBS_2(READINGS)  
				SELECT msgs.msg.value('@VALUE', 'REAL') AS ID_METRICS
				FROM @XML_SAMPLE_2.nodes('READINGS/READING') msgs(msg)	

				SELECT @V_MEAN_X1 = SUM(READINGS)/ COUNT(*) FROM @TABLE_OBS_1
				SELECT @V_MEAN_X2 = SUM(READINGS)/ COUNT(*) FROM @TABLE_OBS_2

				INSERT INTO @TABLE_MUESTRA_1(READINGS,READINGS_X1_X2,READINGS_SQUART)
				SELECT READINGS,READINGS-@V_MEAN_X1, POWER((READINGS-@V_MEAN_X1),2) FROM @TABLE_OBS_1

				INSERT INTO @TABLE_MUESTRA_2(READINGS,READINGS_X1_X2,READINGS_SQUART)
				SELECT READINGS,READINGS-@V_MEAN_X2, POWER((READINGS-@V_MEAN_X2),2) FROM @TABLE_OBS_2

				SELECT @V_VARIANCE_X1 = SUM(READINGS_SQUART)/(COUNT(*)-1) FROM @TABLE_MUESTRA_1
				SELECT @V_VARIANCE_X2 = SUM(READINGS_SQUART)/(COUNT(*)-1) FROM @TABLE_MUESTRA_2

				SELECT @V_N1_TOTAL_OBSERVATIONS = COUNT(*) FROM @TABLE_MUESTRA_1 
				SELECT @V_N2_TOTAL_OBSERVATIONS = COUNT(*) FROM @TABLE_MUESTRA_2 

				IF (@V_N1_TOTAL_OBSERVATIONS  + @V_N2_TOTAL_OBSERVATIONS - 2) <> 0
					SET @AUX_X1 = (((@V_N1_TOTAL_OBSERVATIONS - 1) * @V_VARIANCE_X1) + ((@V_N2_TOTAL_OBSERVATIONS - 1)  * @V_VARIANCE_X2)) / ((@V_N1_TOTAL_OBSERVATIONS  + @V_N2_TOTAL_OBSERVATIONS - 2))
				ELSE
					SET @AUX_X1 = 0

				IF @V_N1_TOTAL_OBSERVATIONS <> 0 AND @V_N2_TOTAL_OBSERVATIONS <> 0
					SET @AUX_X2 = SQRT(@AUX_X1 * ((1 / @V_N1_TOTAL_OBSERVATIONS) + (1 / @V_N2_TOTAL_OBSERVATIONS))) ;
				ELSE
					SET @AUX_X2 = 0;

				IF @AUX_X2 <> 0
					SET @TEST_T = ABS(((@V_MEAN_X1 - @V_MEAN_X2) - 0) / @AUX_X2)
				ELSE
					SET @TEST_T = 0;

				SET @V_GL = (@V_N1_TOTAL_OBSERVATIONS + @V_N2_TOTAL_OBSERVATIONS) -2
				SET @V_VARIANCE_GROUP = (@V_VARIANCE_X1+@V_VARIANCE_X2)/2

				SET @INTEGER_PART_T = round(@TEST_T, 1, 1) --CAST(@TEST_T AS numeric(36,1)) 
				SET @DECIMAL_PART_T = cast(@TEST_T as numeric(36,2)) - round(@TEST_T, 1, 1) -- @TEST_T - FLOOR(@TEST_T) 

				SELECT  @PT_MENOR_t_ONE_TAIL = NO_VALUE FROM  [PRD].[VW_TEST_T_DISTRIBUTIONS]
				WHERE 
					NO_VALUE_X =  @INTEGER_PART_T AND 
					NO_VALUE_Y = @DECIMAL_PART_T AND 
					NM_DISTRIBUTION_TYPE = 'NORMAL DISTRIBUTION';

				SET @PT_MENOR_t_TWO_TAIL = @PT_MENOR_t_ONE_TAIL*2;

				IF @V_GL > 140
					SET @V_DEGREE_FREEDOM = 140
				ELSE
					SET @V_DEGREE_FREEDOM = FLOOR(@V_GL)


				SELECT  @PT_CRITICAL_VALUE_ONE_TAIL = NO_VALUE 
				FROM  [PRD].[VW_TEST_T_DISTRIBUTIONS]
				WHERE NO_VALUE_Y = 0.05 
					AND FLOOR(NO_VALUE_X) = @V_DEGREE_FREEDOM 
					AND NM_DISTRIBUTION_TYPE = 'DISTRIBUTION T ONE TAIL';


				SELECT @PT_CRITICAL_VALUE_TWO_TAIL = NO_VALUE 
				FROM  [PRD].[VW_TEST_T_DISTRIBUTIONS]
				WHERE NO_VALUE_Y = 0.05 
					AND FLOOR(NO_VALUE_X) = @V_DEGREE_FREEDOM 
					AND NM_DISTRIBUTION_TYPE = 'DISTRIBUTION T TWO TAIL';

				--Se rechaza Hipótesis nula y se acepta la alternativa, esto se debe a que el Estadístico t 4.315900437 > al valor absoluto del valor crítico de t (dos colas) 2.042272456.

				IF  @PT_MENOR_t_TWO_TAIL > (@PIN_LAMBDA / 2) AND @TEST_T < @PT_CRITICAL_VALUE_TWO_TAIL BEGIN
				--Cuando este valor toma una probabilidad superior a 0,025 (0,05/2=0,025), asumimos que el estadístico no esta debido al azar, por tanto, podemos aceptar la hipótesis nula que afirma que las diferencias entre las medias es igual a cero.
					SET @NO_RESULT = 1
				END ELSE BEGIN
					SET @NO_RESULT = 0
				END
			END ELSE BEGIN
				SET @NO_RESULT = -1
			END
		 END ELSE BEGIN
			SET @NO_RESULT = -1
		 END
	END ELSE BEGIN
		SET @NO_RESULT = -99999999
	END


	RETURN @NO_RESULT

END