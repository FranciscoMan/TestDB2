CREATE TABLE [PRD].[C_PRODUCTION_LINE] (
    [ID_PRODUCTION_LINE]      INT            NOT NULL,
    [KY_PRODUCTION_LINE]      NVARCHAR (50)  NOT NULL,
    [NM_PRODUCTION_LINE]      NVARCHAR (300) NOT NULL,
    [DS_PRODUCTION_LINE]      NVARCHAR (500) NULL,
    [FG_ACTIVE]               BIT            CONSTRAINT [DF_C_PRODUCTION_LINE_FG_ACTIVE] DEFAULT ((1)) NOT NULL,
    [ID_PRODUCTION_LINE_TYPE] INT            NOT NULL,
    [ID_BRANCH_PLANT]         INT            NULL,
    [NO_POUNDS_PER_HOUR]      FLOAT (53)     NOT NULL,
    [FG_STACK_LIGHT_ENABLED]  BIT            CONSTRAINT [DF_C_PRODUCTION_LINE_FG_STACK_LIGHT_ENABLED] DEFAULT ((0)) NOT NULL,
    [NO_IP]                   NVARCHAR (20)  NULL,
    [NO_PORT]                 NVARCHAR (4)   NULL,
    [NO_GREEN_REGISTER]       NVARCHAR (100) NULL,
    [NO_RED_REGISTER]         NVARCHAR (100) NULL,
    [NO_YELLOW_REGISTER]      NVARCHAR (100) NULL,
    [NO_GRAY_REGISTER]        NVARCHAR (100) NULL,
    [DT_CREATION]             DATETIME       NOT NULL,
    [DT_UPDATE]               DATETIME       NULL,
    [KY_USER_APP_CREATION]    NVARCHAR (50)  NOT NULL,
    [KY_USER_APP_UPDATE]      NVARCHAR (50)  NULL,
    [NM_PROGAM_CREATE]        NVARCHAR (50)  NOT NULL,
    [NM_PROGRAM_UPDATE]       NVARCHAR (50)  NULL,
    CONSTRAINT [PK_C_PRODUCTION_LINE] PRIMARY KEY CLUSTERED ([ID_PRODUCTION_LINE] ASC),
    CONSTRAINT [FK_C_PRODUCTION_LINE_C_BRANCH_PLANT] FOREIGN KEY ([ID_BRANCH_PLANT]) REFERENCES [ADM].[C_BRANCH_PLANT] ([ID_BRANCH_PLANT])
);


GO
CREATE TRIGGER [PRD].[TR_CUD_PRODUCTION_LINE] ON  PRD.C_PRODUCTION_LINE AFTER INSERT,UPDATE,DELETE
AS 
BEGIN

DECLARE @XML_CATALOG AS XML,
		@XML_VALUES AS XML,
		@XML_REFERENCE AS XML,
		@KY_CATALOG AS NVARCHAR(100) = 'PRODUCTION LINE',
		@DS_MESSAGE AS NVARCHAR(100),
		@KY_ACTION NVARCHAR(10),
		@KY_ACTION_INSERT NVARCHAR(10) = 'INSERT',
		@KY_ACTION_UPDATE NVARCHAR(10) = 'UPDATE',
		@KY_ACTION_DELETE NVARCHAR(10) = 'DELETE',
		@NO_AFFECTED_RECORDS INT = 0,
		@KY_USER NVARCHAR(50),
		@NM_PROGRAM NVARCHAR(50),
		@DT_AFFECTED DATETIME
BEGIN TRY

	SET @KY_ACTION = (
		SELECT CASE 
			WHEN EXISTS(SELECT TOP 1 1 FROM inserted) AND EXISTS(SELECT TOP 1 1 FROM deleted) THEN @KY_ACTION_UPDATE --IF SO, THEN UPDATE
			WHEN EXISTS(SELECT TOP 1 1 FROM inserted) THEN @KY_ACTION_INSERT
			WHEN EXISTS(SELECT TOP 1 1 FROM deleted) THEN @KY_ACTION_DELETE
		END
	)

	------------------------------------------------ UPDATE
	IF @KY_ACTION = @KY_ACTION_UPDATE BEGIN


		SET @XML_VALUES = (
			SELECT 
				I.ID_PRODUCTION_LINE AS "@ID_PRODUCTION_LINE" 
				, I.KY_PRODUCTION_LINE AS "@KY_PRODUCTION_LINE_NEW"
				, I.NM_PRODUCTION_LINE AS "@NM_POSITION_NEW"
				, I.DS_PRODUCTION_LINE AS "@DS_PRODUCTION_LINE_NEW"
				, I.FG_ACTIVE AS "@FG_ACTIVE_NEW"
				, I.ID_PRODUCTION_LINE_TYPE AS "@ID_PRODUCTION_LINE_TYPE_NEW"
				, I.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_NEW"
				, D.KY_PRODUCTION_LINE AS "@KY_PRODUCTION_LINE_OLD"
				, D.NM_PRODUCTION_LINE AS "@NM_POSITION_OLD"
				, D.DS_PRODUCTION_LINE AS "@DS_PRODUCTION_LINE_OLD"
				, D.FG_ACTIVE AS "@FG_ACTIVE_OLD"
				, D.ID_PRODUCTION_LINE_TYPE AS "@ID_PRODUCTION_LINE_TYPE_OLD"
				, D.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_OLD"
				FROM inserted I
					INNER JOIN deleted D
						ON I.ID_PRODUCTION_LINE = D.ID_PRODUCTION_LINE
			FOR XML PATH ('UPDATED')
		)

		SELECT @NO_AFFECTED_RECORDS = COUNT(*) FROM inserted
		SELECT TOP 1 @DS_MESSAGE = 'The production line ' + NM_PRODUCTION_LINE + ', with id ' + CONVERT( NVARCHAR(10),ID_PRODUCTION_LINE) + ' has been updated correctly' 
			, @KY_USER = KY_USER_APP_UPDATE
			, @NM_PROGRAM = NM_PROGRAM_UPDATE
			, @DT_AFFECTED = DT_UPDATE
		FROM inserted

		IF @NO_AFFECTED_RECORDS > 1
			SET @DS_MESSAGE = CONVERT(NVARCHAR(10), @NO_AFFECTED_RECORDS) + ' production lines has been updated correctly'

	END

	-------------------------------------------------- INSERT
	IF @KY_ACTION = @KY_ACTION_INSERT BEGIN
		SET @XML_VALUES = (
			SELECT 
			      I.ID_PRODUCTION_LINE AS "@ID_PRODUCTION_LINE" 
				, I.KY_PRODUCTION_LINE AS "@KY_PRODUCTION_LINE_NEW"
				, I.NM_PRODUCTION_LINE AS "@NM_POSITION_NEW"
				, I.DS_PRODUCTION_LINE AS "@DS_PRODUCTION_LINE_NEW"
				, I.FG_ACTIVE AS "@FG_ACTIVE_NEW"
				, I.ID_PRODUCTION_LINE_TYPE AS "@ID_PRODUCTION_LINE_TYPE_NEW"
				, I.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_NEW"
				FROM inserted i
			FOR XML PATH ('INSERTED')
		)
		
		SELECT @NO_AFFECTED_RECORDS = COUNT(*) FROM inserted
		SELECT TOP 1 @DS_MESSAGE = 'The production line ' + NM_PRODUCTION_LINE + ', with id ' + CONVERT( NVARCHAR(10),ID_PRODUCTION_LINE) + ' has been inserted correctly' 
			, @KY_USER = KY_USER_APP_CREATION
			, @NM_PROGRAM = NM_PROGAM_CREATE
			, @DT_AFFECTED = DT_CREATION
		FROM inserted

		IF @NO_AFFECTED_RECORDS > 1
			SET @DS_MESSAGE = CONVERT(NVARCHAR(10), @NO_AFFECTED_RECORDS) + ' production lines has been inserted correctly'
	END

	------------------------------------------------ DELETE
	IF @KY_ACTION = @KY_ACTION_DELETE BEGIN
		SET @XML_VALUES = (
			SELECT 
			      D.ID_PRODUCTION_LINE AS "@ID_PRODUCTION_LINE" 
				, D.KY_PRODUCTION_LINE AS "@KY_PRODUCTION_LINE_OLD"
				, D.NM_PRODUCTION_LINE AS "@NM_POSITION_OLD"
				, D.DS_PRODUCTION_LINE AS "@DS_PRODUCTION_LINE_OLD"
				, D.FG_ACTIVE AS "@FG_ACTIVE_OLD"
				, D.ID_PRODUCTION_LINE_TYPE AS "@ID_PRODUCTION_LINE_TYPE_OLD"
				, D.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_OLD"
				FROM deleted D
			FOR XML PATH ('DELETED')
		)
		
		SELECT @NO_AFFECTED_RECORDS = COUNT(*) FROM deleted
		SELECT TOP 1 @DS_MESSAGE = 'The production line ' + NM_PRODUCTION_LINE + ', with id ' + CONVERT( NVARCHAR(10),ID_PRODUCTION_LINE) + ' has been deleted correctly' 
			, @KY_USER = KY_USER_APP_CREATION
			, @NM_PROGRAM = NM_PROGAM_CREATE
			, @DT_AFFECTED = GETDATE()
		FROM deleted

		IF @NO_AFFECTED_RECORDS > 1
			SET @DS_MESSAGE = CONVERT(NVARCHAR(10), @NO_AFFECTED_RECORDS) + ' production lines has been deleted correctly'
	END

	SET @XML_CATALOG = (
		SELECT  
			@KY_CATALOG AS "@CATALOG" 
			, @XML_VALUES
		FOR XML PATH ('CATALOG')
	)
	
	SET @XML_REFERENCE = (
		SELECT  
			@XML_CATALOG
		FOR XML PATH ('REFERENCE')
	)


	INSERT INTO [PRD].[K_LOG]([DS_LOG],[XML_REFERENCE],DT_CREATION,KY_USER_APP_CREATION,NM_PROGAM_CREATE)
	SELECT @DS_MESSAGE, @XML_REFERENCE, @DT_AFFECTED, @KY_USER, @NM_PROGRAM;

END TRY
BEGIN CATCH  
	ROLLBACK;  
END CATCH; 
	
END
