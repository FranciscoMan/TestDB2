-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2018
-- Author: Julio Tavares	
-- UPDATE Diego LLanos  04/17/2019
-- UPDATE Diego LLanos 04/24/2019
-- CRETAE date: 12/07/2018
-- Description: Insert or update a new form quality inspector
-- =============================================
-- 12/04/2018 JDR The parameter is added to receive the list of the people who authorize the registration update process to insert the log
-- =============================================
CREATE PROCEDURE   [PRD].[SPE_INSERT_UPDATE_INSPECTION_SKID] 
	@XML_RESULT XML = '' OUT     -- --0 TO ERROR AND 1 TO CORRECT
   , @PIN_ID_INSPECTION_SKID INT
   , @PIN_ID_WORK_ORDER INT
   , @PIN_NO_PALLET INT
   , @PIN_NO_SKIDS_OPENED INT
   , @PIN_NO_QUANTITY INT
   , @PIN_KY_STATUS NVARCHAR(50)
   , @PIN_KY_USER_INSPECTOR NVARCHAR(50)
   , @PIN_ID_QUALITY_INSPECTOR_AGREEMENT INT
   , @PIN_NM_QUALITY_INSPECTOR_AGREEMENT NVARCHAR(200)
   , @PIN_FG_INSPECTOR_AGREEMENT BIT
   , @PIN_DT_INSPECTOR_AGREEMENT DATETIME
   , @PIN_DS_EXPLANATION_AGREEMENT NVARCHAR(MAX)
   , @PIN_XML_PALLETS XML
   , @PIN_XML_AUTHORIZER_USERS XML
   , @PIN_KY_USER_APP NVARCHAR(50)
   , @PIN_NM_PROGRAM NVARCHAR(50)
   , @PIN_NM_ORIGIN_STATUS NVARCHAR(50) = NULL
   , @PIN_DS_EXPLANATION_AGREEMENT_DISP NVARCHAR(150) = NULL
   , @PIN_TYPE_TRANSACTION CHAR(1)  --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
   	BEGIN TRY
		DECLARE @V_EXIST_TRAN BIT = 0
			, @DT_SYSTEM DATETIME = GETDATE()

		IF (@@TRANCOUNT = 0) BEGIN
			BEGIN TRANSACTION
			SET @V_EXIST_TRAN = 1
		END	

		IF @PIN_TYPE_TRANSACTION = 'I' BEGIN -- INSERTS THE SKID FOR INSPECTION

			IF NOT EXISTS (SELECT 1 FROM PRD.K_INSPECTION_SKID WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER AND NO_PALLET = @PIN_NO_PALLET) BEGIN

				SELECT @PIN_NO_QUANTITY = NO_QTY_SKID
				FROM PRD.K_WORK_ORDER
				WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER

				INSERT INTO PRD.K_INSPECTION_SKID (
					ID_WORK_ORDER
					, NO_PALLET
					, NO_QUANTITY
					, KY_STATUS
					, KY_USER_INSPECTOR
					, NO_SKIDS_OPENED
					, DT_INSPECTION_CREATED
					, DT_CREATION
					, KY_USER_APP_CREATION
					, NM_PROGRAM_CREATE
				) VALUES (
					@PIN_ID_WORK_ORDER
					, @PIN_NO_PALLET
					, @PIN_NO_QUANTITY
					, @PIN_KY_STATUS
					, @PIN_KY_USER_INSPECTOR
					, @PIN_NO_SKIDS_OPENED
					, @DT_SYSTEM
					, @DT_SYSTEM
					, @PIN_KY_USER_APP
					, @PIN_NM_PROGRAM
				)		

				-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
				SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

			END	ELSE BEGIN
					-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
				SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'WARNING')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Este skid ya está creado para el quality inspector', 'ES')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'This skid is already created for the quality inspector', 'EN')
			END
		END 
		
		IF @PIN_TYPE_TRANSACTION = 'U' BEGIN --UPDATES THE SKID FOR INSPECTION

			UPDATE PRD.K_INSPECTION_SKID 
			SET KY_STATUS = CASE WHEN  @PIN_KY_STATUS IS NULL THEN KY_STATUS ELSE @PIN_KY_STATUS END
				, DT_UPDATE = @DT_SYSTEM
				, ID_QUALITY_INSPECTOR = CASE WHEN  @PIN_ID_QUALITY_INSPECTOR_AGREEMENT IS NULL THEN ID_QUALITY_INSPECTOR ELSE @PIN_ID_QUALITY_INSPECTOR_AGREEMENT END
				, NM_QUALITY_INSPECTOR = CASE WHEN  @PIN_NM_QUALITY_INSPECTOR_AGREEMENT IS NULL THEN NM_QUALITY_INSPECTOR ELSE @PIN_NM_QUALITY_INSPECTOR_AGREEMENT END
				, FG_INSPECTOR_AGREEMENT = CASE WHEN @PIN_FG_INSPECTOR_AGREEMENT IS NULL THEN FG_INSPECTOR_AGREEMENT ELSE @PIN_FG_INSPECTOR_AGREEMENT END
				, DT_INSPECTOR_AGREEMENT =  CASE WHEN  @PIN_DT_INSPECTOR_AGREEMENT IS NULL THEN DT_INSPECTOR_AGREEMENT ELSE @PIN_DT_INSPECTOR_AGREEMENT END
				, DS_EXPLANATION_AGREEMENT = CASE WHEN @PIN_DS_EXPLANATION_AGREEMENT IS NULL THEN DS_EXPLANATION_AGREEMENT ELSE @PIN_DS_EXPLANATION_AGREEMENT END
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE ID_INSPECTION_SKID = @PIN_ID_INSPECTION_SKID

			INSERT INTO PRD.K_INSPECTION_SKID_LOG (
				ID_INSPECTION_SKID
				, ID_WORK_ORDER
				, NO_SKID
				, KY_USER
				, XML_AUTHORIZER_USERS
				, DS_COMMENT
				, DT_CREATION
				, KY_USER_APP_CREATION
				, NM_PROGAM_CREATE
				, NM_ORIGIN_STATUS
			)
			SELECT ID_INSPECTION_SKID
				, ID_WORK_ORDER
				, NO_PALLET
				, @PIN_KY_USER_APP
				, @PIN_XML_AUTHORIZER_USERS
				, @PIN_DS_EXPLANATION_AGREEMENT_DISP
				, @DT_SYSTEM
				, @PIN_KY_USER_APP
				, @PIN_NM_PROGRAM
				, @PIN_NM_ORIGIN_STATUS
 			FROM PRD.K_INSPECTION_SKID
			WHERE ID_INSPECTION_SKID = @PIN_ID_INSPECTION_SKID


			-- TRIES TO UPDATE THE SKID FOR THE OPERATOR SIDE (IF ITS ALREADY CREATED)
			UPDATE KP
			SET KY_STATUS = CASE WHEN @PIN_KY_STATUS IN ('INSPECTING', 'INSPECTED') THEN KP.KY_STATUS ELSE @PIN_KY_STATUS END
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, DT_UPDATE = @DT_SYSTEM
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			FROM PRD.K_PALLET KP
				INNER JOIN PRD.K_INSPECTION_SKID KIS 
					ON KP.NO_PALLET = KIS.NO_PALLET 
					AND KP.ID_WORK_ORDER = KIS.ID_WORK_ORDER
			WHERE KIS.ID_INSPECTION_SKID = @PIN_ID_INSPECTION_SKID

			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

		END

		IF @PIN_TYPE_TRANSACTION = 'F' BEGIN

			-- TRIES TO UPDATE THE SKID FOR INPECTION FROM A LIST OF SKIDS (XML)
			UPDATE KIS
			SET KIS.KY_STATUS = @PIN_KY_STATUS
				, KIS.DT_UPDATE =@DT_SYSTEM
				, KIS.KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, KIS.NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			FROM PRD.K_INSPECTION_SKID KIS
				INNER JOIN (
					SELECT 
					d.value('@ID_PALLET', 'INT') AS ID_PALLET
					FROM @PIN_XML_PALLETS.nodes('PALLETS/PALLET') AS T(d)
				) AS PALLET 
					ON KIS.ID_INSPECTION_SKID = PALLET.ID_PALLET

			-- TRIES TO UPDATE THE SKID FOR THE OPERATOR SIDE FROM A LIST OF SKIDS (XML)
			UPDATE KP
			SET KY_STATUS = @PIN_KY_STATUS
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, DT_UPDATE =@DT_SYSTEM
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM

			FROM PRD.K_PALLET KP
				INNER JOIN PRD.K_INSPECTION_SKID KIS 
					ON KP.NO_PALLET = KIS.NO_PALLET 
					AND KP.ID_WORK_ORDER = KIS.ID_WORK_ORDER
				INNER JOIN (
					SELECT 
					d.value('@ID_PALLET', 'INT') AS ID_PALLET
					FROM @PIN_XML_PALLETS.nodes('PALLETS/PALLET') AS T(d)
				) PALLET 
					ON KIS.ID_INSPECTION_SKID = PALLET.ID_PALLET

			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

		END


		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			COMMIT	
		END

	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			ROLLBACK
		END
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,@ERROR_MESSAGE)--'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
			
	END CATCH
END
