-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2018
-- Author: Julio Tavares
-- CREATE date: 07/17/2018
-- Description: get Inpector Readings
-- =============================================
-- 10/15/2018 JDR It calculates the thresholds of the upper and lower limits to use the absolute values from the configuration of each characteristic
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_GET_READINGS_INSPECTION_SKIDS] 
	 @PIN_ID_K_FORM INT=NULL   
	,@PIN_ID_WORK_ORDER INT = NULL
	--,@PIN_ID_QA27 INT = NULL
	,@PIN_ID_PRODUCTION_LINE INT = NULL
	,@PIN_ID_INSPECTION_SKID INT = NULL   
	,@PIN_ID_FORM INT=NULL   
	,@PIN_KY_STATUS_READINGS NVARCHAR(20) =NULL
	,@PIN_KY_PROCESS_TYPE NVARCHAR(50) = NULL
AS   

	DECLARE @NO_ALPHA NUMERIC(36,2)
		, @NO_HYPOTHESIZED_MEAN_DIFFERENCE NUMERIC(36,2)
		, @NO_SAMPLES INT
		, @XML_CONFIGURATION XML = (SELECT TOP 1 XML_CONFIGURATION FROM ADM.S_CONFIGURATION)


	SELECT @XML_CONFIGURATION = XML_CONFIGURATION FROM ADM.S_CONFIGURATION

	SELECT @NO_ALPHA = d.value('@NO_ALPHA', 'NUMERIC(36,2)')
		, @NO_HYPOTHESIZED_MEAN_DIFFERENCE = d.value('@NO_HYPOTHESIZED_MEAN_DIFFERENCE', 'NUMERIC(36,2)')
		, @NO_SAMPLES = d.value('@NO_SAMPLES', 'INT')
	FROM @XML_CONFIGURATION.nodes('CONFIGURATIONS/TEST_T/SET_UP') AS T(d)	


	SELECT 			  
		 CF.ID_FORM
		, KF.ID_K_FORM
		, CF.NM_FORM	 
		, VCP.NM_PROCESS
		, CM.ID_METRICS
		, CM.KY_METRICS		
		, CM.NM_METRICS		 
		, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'nvarchar(max)') + ' ' + ISNULL(KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@DS_CATALOG_VALUE)[1]', 'nvarchar(max)'), '') AS  NOMINAL_VALUE
		, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'nvarchar(max)') + ' ' + ISNULL(KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@DS_CATALOG_VALUE)[1]', 'nvarchar(max)'), '') AS FINISHED_VALUE
		, CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)') WHEN 'NUMERICBOX' THEN
			CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
					CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@HYSTERESIS)[1]', 'NVARCHAR(20)')
						WHEN 'ABS' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'DECIMAL(20,7)') 
						WHEN 'PCT' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'DECIMAL(20,7)') * (1 + (XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'DECIMAL(20,7)') / 100))
						WHEN 'REL' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'DECIMAL(20,7)') + XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'DECIMAL(20,7)')
				END
			END
		END AS NO_UPPER_LIMIT
		, CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)') WHEN 'NUMERICBOX' THEN
			CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
				CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@HYSTERESIS)[1]', 'NVARCHAR(20)')
					WHEN 'ABS' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'DECIMAL(20,7)') 
					WHEN 'PCT' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'DECIMAL(20,7)') * (1 - (XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'DECIMAL(20,7)') / 100))
					WHEN 'REL' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'DECIMAL(20,7)') - XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'DECIMAL(20,7)')
				END
			END
		END AS NO_LOWER_LIMIT
		, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@DS_CATALOG_VALUE)[1]', 'nvarchar(max)') AS NO_UNIT
		, CHT.NM_HYSTERESIS_TYPE --, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@HYSTERESIS)[1]', 'nvarchar(max)') AS HYSTERESIS
		, KF.KY_STATUS_FORM
		, CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)')
			WHEN 'NUMERICBOX' THEN
				CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL 
					AND NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL 
					AND NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR'), '') IS NOT NULL 
					AND NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
					CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@HYSTERESIS)[1]', 'NVARCHAR(20)')
						WHEN 'ABS' THEN 
							CASE WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'FLOAT') 
								BETWEEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT') 
									AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT') 
								THEN 'YES' 
								ELSE 'NO' 
							END
						WHEN 'PCT' THEN
							CASE WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'FLOAT') 
								BETWEEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') * (1 - (XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT') / 100))
									AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') * (1 + (XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT') / 100))
								THEN 'YES' 
								ELSE 'NO' 
							END
						WHEN 'REL' THEN
							CASE WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'FLOAT') 
								BETWEEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') - XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT')
									AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') + XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT')
								THEN 'YES' 
								ELSE 'NO' 
							END
						ELSE 'NA'
					END
				END
			ELSE 
				CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR'), '') IS NULL OR NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR'), '') IS NULL THEN 'NA'
					WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR') = XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR') THEN 'YES'
					ELSE 'NO'
				END
			END
			AS KY_IN_NOMINAL_RANGE,
			CASE PRD.F_GET_TEST_T (@NO_ALPHA, @NO_HYPOTHESIZED_MEAN_DIFFERENCE, @NO_SAMPLES, KF.ID_WORK_ORDER, KFM.ID_METRICS)
			WHEN 1 THEN 'YES'
			WHEN 0 THEN 'NO'
			WHEN -1 THEN 'ND'
			ELSE 'NA'
			END AS KY_T_TEST_RESULT
	FROM PRD.K_FORM KF	
		INNER JOIN PRD.C_FORM CF 
			ON CF.ID_FORM = KF.ID_FORM AND CF.FG_ACTIVE =1
		INNER JOIN PRD.K_FORM_METRICS KFM 
			ON KFM.ID_K_FORM = KF.ID_K_FORM
		INNER JOIN PRD.C_METRICS CM 
			ON CM.ID_METRICS = KFM.ID_METRICS
		LEFT JOIN ADM.VW_C_PROCESS VCP
			ON CF.KY_PROCESS = VCP.KY_PROCESS
		LEFT JOIN ADM.VW_C_HYSTERESIS_TYPE CHT
			ON CHT.KY_HYSTERESIS_TYPE = KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@HYSTERESIS)[1]', 'nvarchar(max)')
	WHERE @PIN_KY_PROCESS_TYPE = KF.KY_PROCESS_TYPE AND 
		(@PIN_ID_K_FORM IS NULL OR (KF.ID_K_FORM = @PIN_ID_K_FORM)) AND 
		(@PIN_ID_WORK_ORDER IS NULL OR (KF.ID_WORK_ORDER = @PIN_ID_WORK_ORDER)) AND
		--(@PIN_ID_PRODUCTION_LINE IS NULL OR (KF.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE)) AND
		(KF.ID_PRODUCTION_LINE IS NULL OR @PIN_ID_PRODUCTION_LINE IS NULL OR ( KF.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE)) AND
		(@PIN_ID_INSPECTION_SKID IS NULL OR (KF.ID_INSPECTION_SKID = @PIN_ID_INSPECTION_SKID)) AND
		(@PIN_ID_FORM  IS NULL OR (KF.ID_FORM = @PIN_ID_FORM )) AND 
		(@PIN_KY_STATUS_READINGS IS NULL OR (KF.KY_STATUS_FORM = @PIN_KY_STATUS_READINGS))
	ORDER BY CM.NO_ORDER ASC

