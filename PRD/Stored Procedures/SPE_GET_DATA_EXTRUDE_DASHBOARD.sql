

-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - VITEK - 2019
-- Author: DELLC
-- CREATE date: 07/30/2019
-- Description: Get data extruded lbs, save lbs and saving rate 
-- =============================================
-- =============================================
CREATE PROCEDURE  [PRD].[SPE_GET_DATA_EXTRUDE_DASHBOARD]
	  @ID_BP INT = NULL, 
	  @ENDT DATETIME = NULL,
	  @ID_WO INT =NULL
AS
BEGIN    
	DECLARE  
	 
	 @INIT DATETIME,
	 @TIMENOW DATETIME

	 SET @TIMENOW = GETDATE();

	 IF @ID_WO  IS NOT NULL
		
		
		SELECT @ENDT=  CASE WHEN W.DT_CLOSE_WORK_ORDER IS NOT NULL 
	THEN W.DT_CLOSE_WORK_ORDER ELSE  GETDATE() END FROM PRD.K_WORK_ORDER W WHERE ID_WORK_ORDER=@ID_WO 
		
	  
	  IF DATEADD(HOUR, 6, @ENDT) > @TIMENOW
			SET @INIT =  DATEADD(HOUR, -6, @ENDT)
		ELSE 
		BEGIN
			SET @INIT =  DATEADD(HOUR, -6, @ENDT)
			--SET @ENDT =  DATEADD(HOUR, 6, @ENDT)
		END
		
	



	create table #LBS_SKIDS(
    ID_PALLET INT, 
	ID_WORK_ORDER INT, 
	NO_PALLET INT, 
	ID_QA27 INT, 
	DT_INITIAL_TIME DATETIME, 
	DT_FINAL_OPERATION_TIME DATETIME, 
	KY_STATUS VARCHAR(20),
    MIN_DURATION INT,
    LBS FLOAT)
	
;WITH pallet_lbs

AS (SELECT P.ID_PALLET, P.ID_WORK_ORDER, NO_PALLET, ID_QA27, DT_INITIAL_TIME, DT_FINAL_OPERATION_TIME, P.KY_STATUS,
 DATEDIFF(MINUTE, DT_INITIAL_TIME, DT_FINAL_OPERATION_TIME) AS MIN_DURATION,


CASE 
  WHEN DT_INITIAL_TIME>=@INIT AND DT_FINAL_OPERATION_TIME<=@ENDT THEN  W.NO_POUNDS * P.NO_QUANTITY 
   
   
   WHEN DT_INITIAL_TIME<=@INIT AND DT_FINAL_OPERATION_TIME<=@ENDT 
	THEN CASE WHEN( DATEDIFF(MINUTE, @INIT,DT_FINAL_OPERATION_TIME) > DATEDIFF(MINUTE, DT_INITIAL_TIME,@INIT) )
			THEN  W.NO_POUNDS * P.NO_QUANTITY   ELSE 0 END
	WHEN DT_INITIAL_TIME<=@INIT AND DT_FINAL_OPERATION_TIME>=@ENDT THEN DATEDIFF(MINUTE, @INIT,@ENDT)

	WHEN DT_INITIAL_TIME>=@INIT AND DT_FINAL_OPERATION_TIME>=@ENDT 
	THEN CASE WHEN( DATEDIFF(MINUTE, DT_INITIAL_TIME,@ENDT) > DATEDIFF(MINUTE, @ENDT,DT_FINAL_OPERATION_TIME) )
			THEN  W.NO_POUNDS * P.NO_QUANTITY   ELSE 0 END	

WHEN  (DT_INITIAL_TIME  BETWEEN @INIT AND @ENDT AND DT_FINAL_OPERATION_TIME BETWEEN @INIT AND @ENDT)
	 THEN W.NO_POUNDS * P.NO_QUANTITY
	 WHEN DT_INITIAL_TIME< @INIT AND (DATEDIFF(MINUTE,@INIT, DT_FINAL_TIME) > DATEDIFF(MINUTE,DT_INITIAL_TIME, @INIT))THEN  
	  W.NO_POUNDS * P.NO_QUANTITY

	  
  ELSE 0 END AS lbs
 
 FROM PRD.K_PALLET P INNER JOIN 
 PRD.K_WORK_ORDER W ON W.ID_WORK_ORDER = P.ID_WORK_ORDER
 
 WHERE P.KY_STATUS='ACCEPTED' AND (DT_INITIAL_TIME  BETWEEN @INIT AND @ENDT OR 
	  (@INIT BETWEEN DT_INITIAL_TIME AND DT_FINAL_OPERATION_TIME )))



INSERT INTO #LBS_SKIDS SELECT * FROM pallet_lbs 


CREATE TABLE #LINE_RATE(
ID_PRODUCTION_LINE INT,
LINE_RATE VARCHAR(10)
)


-- LINE RATE 
/*
;WITH line_rate

AS (SELECT KF.ID_PRODUCTION_LINE, KF.DT_CREATION, KF.DT_CLOSED
	, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'varchar(10)') AS [LINE_RATE]

FROM  PRD.K_FORM KF
INNER JOIN PRD.K_FORM_METRICS KFM
			ON KF.ID_K_FORM = KFM.ID_K_FORM
			AND KF.KY_PROCESS_TYPE IN ('PROCESS')
			AND KF.KY_STATUS_FORM = 'CAPTURED'
			AND KFM.ID_METRICS=66
			
			WHERE(KF.DT_CREATION  BETWEEN @INIT AND @ENDT OR 
	  @INIT BETWEEN KF.DT_CREATION AND KF.DT_CLOSED))

INSERT INTO #LINE_RATE SELECT DISTINCT ID_PRODUCTION_LINE,DT_CREATION,DT_CLOSED,LINE_RATE  FROM line_rate 

*/


CREATE TABLE #T_PRODUCTION_LINES  (
		ID_PRODUCTION_LINE INT
		, ID_LINE_RATE_METRIC INT
		, ID_WEIGHT_METRIC INT
	)

	INSERT INTO #T_PRODUCTION_LINES (ID_PRODUCTION_LINE) 
	 SELECT P.ID_PRODUCTION_LINE FROM PRD.C_PRODUCTION_LINE P WHERE P.FG_ACTIVE=1 AND ID_BRANCH_PLANT = @ID_BP
	

	


	CREATE TABLE  #T_LINE_RATE (
		ID_PRODUCTION_LINE INT
		, ID_K_FORM INT
		, DT_FORM_CAPTURED DATETIME
		, DT_NEXT_FORM DATETIME
		, NO_LINE_RATE DECIMAL(13,2)
	)


	; WITH T_QA27 AS (
	SELECT KW.ID_PRODUCTION_LINE FROM PRD.K_QA27 KQ INNER JOIN PRD.K_WORK_ORDER KW ON
		KW.ID_WORK_ORDER=KQ.ID_WORK_ORDER
		WHERE 

		(@INIT BETWEEN KQ.DT_INITIAL_TIME AND CASE WHEN KQ.KY_STATUS='RUNNING' THEN ISNULL(KQ.DT_FINAL_TIME,@TIMENOW )  ELSE KQ.DT_FINAL_TIME END) OR
(@ENDT BETWEEN KQ.DT_INITIAL_TIME AND CASE WHEN KQ.KY_STATUS='RUNNING' THEN ISNULL(KQ.DT_FINAL_TIME,@TIMENOW )  ELSE KQ.DT_FINAL_TIME END) OR
KQ.DT_INITIAL_TIME BETWEEN @INIT AND @ENDT OR
(KQ.KY_STATUS = 'RUNNING' AND ISNULL(KQ.DT_FINAL_TIME,@TIMENOW ) BETWEEN @INIT AND @ENDT )
		--@INIT BETWEEN KQ.DT_INITIAL_TIME AND DT_FINAL_TIME

		), T_FORMS AS (
		SELECT ROW_NUMBER() OVER (PARTITION BY KF.ID_PRODUCTION_LINE ORDER BY DT_FORM DESC) AS NO_ROW
			, KF.ID_PRODUCTION_LINE
			, KF.ID_K_FORM
			, CASE WHEN KF.DT_CLOSED < @INIT THEN @INIT ELSE KF.DT_CLOSED END AS DT_CLOSED
		FROM PRD.K_FORM KF
			INNER JOIN T_QA27 TQ
				ON KF.ID_PRODUCTION_LINE = TQ.ID_PRODUCTION_LINE
		WHERE KF.DT_FORM < @INIT
			AND KF.KY_STATUS_FORM = 'CAPTURED'
			AND KF.KY_PROCESS_TYPE = 'PROCESS'
	)
	INSERT INTO #T_LINE_RATE (ID_PRODUCTION_LINE, ID_K_FORM, DT_FORM_CAPTURED)
	SELECT ID_PRODUCTION_LINE, ID_K_FORM, DT_CLOSED
	FROM T_FORMS
	WHERE NO_ROW = 1

	

	INSERT INTO #T_LINE_RATE (ID_PRODUCTION_LINE, ID_K_FORM, DT_FORM_CAPTURED)
	SELECT ID_PRODUCTION_LINE, ID_K_FORM, DT_CLOSED
	FROM PRD.K_FORM KF
	WHERE KF.DT_FORM BETWEEN @INIT AND @ENDT
		AND KF.KY_STATUS_FORM = 'CAPTURED'
		AND KF.KY_PROCESS_TYPE = 'PROCESS'
		AND EXISTS (SELECT TOP 1 1 FROM #T_PRODUCTION_LINES TPL WHERE KF.ID_PRODUCTION_LINE = TPL.ID_PRODUCTION_LINE)
	
	; WITH T_FORM AS (
		SELECT TLR.ID_K_FORM
			, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,2)') AS NO_LINE_RATE
			, ISNULL(LEAD(TLR.DT_FORM_CAPTURED, 1, NULL) OVER (PARTITION BY TLR.ID_PRODUCTION_LINE ORDER BY TLR.ID_PRODUCTION_LINE, TLR.DT_FORM_CAPTURED), @ENDT) AS DT_NEXT_FORM
		FROM #T_LINE_RATE TLR
			INNER JOIN #T_PRODUCTION_LINES TPL
				ON TLR.ID_PRODUCTION_LINE = TPL.ID_PRODUCTION_LINE
			INNER JOIN PRD.K_FORM_METRICS KFM
				ON TLR.ID_K_FORM = KFM.ID_K_FORM
				AND KFM.ID_METRICS =66
	)
	UPDATE TLR
	SET NO_LINE_RATE = TF.NO_LINE_RATE
		, DT_NEXT_FORM = TF.DT_NEXT_FORM
	FROM #T_LINE_RATE TLR
		INNER JOIN T_FORM TF
			ON TLR.ID_K_FORM = TF.ID_K_FORM

		

;WITH CTE (ID_PRODUCTION_LINE,NO_LINE_RATE,DuplicateCount)
AS
(
  SELECT ID_PRODUCTION_LINE ,NO_LINE_RATE,
  ROW_NUMBER() OVER(PARTITION BY ID_PRODUCTION_LINE  
  ORDER BY ID_PRODUCTION_LINE) AS DuplicateCount
  FROM #T_LINE_RATE 

) 

INSERT INTO #LINE_RATE SELECT ID_PRODUCTION_LINE, NO_LINE_RATE AS LINE_RATE  from CTE Where DuplicateCount = 1





CREATE TABLE #HOURS_RUN(
 ID_PRODUCTION_LINE INT, 
 MIN_DURATION INT
)

;WITH hrs_run

AS (
--  runing minutes
-- set 6 hr default 
SELECT W.ID_PRODUCTION_LINE, 
 SUM (DATEDIFF(MINUTE, Q.DT_INITIAL_TIME, ISNULL(Q.DT_FINAL_TIME,@INIT))) AS MIN_DURATION
-- 360 AS MIN_DURATION
 FROM PRD.K_QA27 Q
 INNER JOIN PRD.K_WORK_ORDER W ON Q.ID_WORK_ORDER = W.ID_WORK_ORDER  WHERE 
 --Q.DT_INITIAL_TIME BETWEEN @INIT AND @ENDT  OR 
 --(@INIT BETWEEN Q.DT_INITIAL_TIME AND Q.DT_FINAL_TIME AND @ENDT BETWEEN Q.DT_INITIAL_TIME AND Q.DT_FINAL_TIME)
 --GROUP BY W.ID_PRODUCTION_LINE)

 --(@MIDDLE_DATE BETWEEN Q.DT_INITIAL_TIME AND CASE WHEN Q.KY_STATUS='RUNNING' THEN ISNULL(Q.DT_FINAL_TIME,@TIMENOW )  ELSE Q.DT_FINAL_TIME END) OR
(@INIT BETWEEN Q.DT_INITIAL_TIME AND CASE WHEN Q.KY_STATUS='RUNNING' THEN ISNULL(Q.DT_FINAL_TIME,@TIMENOW )  ELSE Q.DT_FINAL_TIME END) OR
(@ENDT BETWEEN Q.DT_INITIAL_TIME AND CASE WHEN Q.KY_STATUS='RUNNING' THEN ISNULL(Q.DT_FINAL_TIME,@TIMENOW )  ELSE Q.DT_FINAL_TIME END) OR
Q.DT_INITIAL_TIME BETWEEN @INIT AND @ENDT OR
(Q.KY_STATUS = 'RUNNING' AND ISNULL(Q.DT_FINAL_TIME,@TIMENOW ) BETWEEN @INIT AND @ENDT )  GROUP BY W.ID_PRODUCTION_LINE
)

INSERT INTO #HOURS_RUN SELECT * FROM hrs_run

 

CREATE TABLE #EVENTS(
ID_ISSUE INT,
ID_WORK_ORDER INT,
ID_PRODUCTION_LINE INT,
FG_LINE_DOWN BIT,
DT_ISSUE DATETIME,
DT_ISSUE_CLOSED DATETIME, 
MIN_DURATION INT
)

print @INIT
print @ENDT

-- events unproductives
;WITH events_unproductive
AS (SELECT ID_ISSUE, ID_WORK_ORDER, ID_PRODUCTION_LINE,   FG_LINE_DOWN, DT_ISSUE, DT_ISSUE_CLOSED, 
CASE
    WHEN DT_ISSUE>=@INIT AND DT_ISSUE_CLOSED<=@ENDT THEN DATEDIFF(MINUTE, DT_ISSUE, DT_ISSUE_CLOSED) 
    WHEN DT_ISSUE<=@INIT AND DT_ISSUE_CLOSED<=@ENDT THEN DATEDIFF(MINUTE, @INIT, DT_ISSUE_CLOSED)
	WHEN DT_ISSUE<=@INIT AND DT_ISSUE_CLOSED>=@ENDT THEN DATEDIFF(MINUTE, @INIT,@ENDT)
	WHEN DT_ISSUE>=@INIT AND DT_ISSUE_CLOSED>=@ENDT THEN DATEDIFF(MINUTE, DT_ISSUE, @ENDT)
	ELSE 0
	END 
	AS MIN_DURATION
    FROM PRD.K_ISSUE WHERE
       DT_ISSUE  BETWEEN @INIT AND @ENDT OR 
	  (@INIT BETWEEN DT_ISSUE AND DT_ISSUE_CLOSED AND @ENDT BETWEEN DT_ISSUE AND DT_ISSUE_CLOSED))

INSERT INTO #EVENTS SELECT * FROM events_unproductive



CREATE TABLE #DOWN_HRS(
ID_PRODUCTION_LINE INT,
DMIN INT 
)

;WITH hr_down
AS (
SELECT E.ID_PRODUCTION_LINE, SUM(E.MIN_DURATION) AS DMIN FROM #EVENTS E 
WHERE E.FG_LINE_DOWN=1   GROUP BY E.ID_PRODUCTION_LINE
)

INSERT INTO #DOWN_HRS SELECT * FROM hr_down



UPDATE #HOURS_RUN SET MIN_DURATION = MIN_DURATION-D.DMIN
FROM #DOWN_HRS AS D
WHERE #HOURS_RUN.ID_PRODUCTION_LINE = D.ID_PRODUCTION_LINE 


-- produced lbs

CREATE TABLE #PROD_LBS(
	ID_PRODUCTION_LINE INT,
	LBS INT
)

;WITH lbs_prod 
AS (
 SELECT W.ID_PRODUCTION_LINE, 
 SUM (SLBS.LBS) AS LBS  FROM PRD.K_QA27 Q
 INNER JOIN PRD.K_WORK_ORDER W ON Q.ID_WORK_ORDER = W.ID_WORK_ORDER
 LEFT JOIN #LBS_SKIDS SLBS ON Q.ID_QA27=SLBS.ID_QA27  GROUP BY W.ID_PRODUCTION_LINE
)

INSERT INTO #PROD_LBS SELECT * FROM lbs_prod

--SELECT *  FROM #T_PRODUCTION_LINES
--SELECT * FROM #LINE_RATE

--SELECT * FROM #LBS_SKIDS
--SELECT * FROM #EVENTS  
--SELECT * FROM #DOWN_HRS
--SELECT * FROM #HOURS_RUN

--SELECT * FROM #PROD_LBS 

-- extruded lbs 

CREATE TABLE #EXTRUDED_LBS(
ID_PRODUCTION_LINE INT,
EXTRUDE_LBS INT 
)

;WITH extr_lbs
AS(

SELECT H.ID_PRODUCTION_LINE,

CASE WHEN H.MIN_DURATION> 0 THEN CONVERT(float,extrudedlbs.LINE_RATE)*(H.MIN_DURATION/60)
ELSE 0 END AS EXTRUDE_LBS FROM #HOURS_RUN H 
CROSS APPLY (
    SELECT TOP 1 *
    FROM #LINE_RATE
    WHERE H.ID_PRODUCTION_LINE = ID_PRODUCTION_LINE 
    ORDER BY ID_PRODUCTION_LINE ) extrudedlbs 
)

INSERT INTO #EXTRUDED_LBS SELECT * FROM  extr_lbs 

--SELECT * FROM #EXTRUDED_LBS
--SELECT * FROM #PROD_LBS

SELECT PROD.ID_PRODUCTION_LINE, ISNULL(PROD.LBS,0)  PRODUCE_LBS,EXTR.EXTRUDE_LBS EXTRUDE_LBS, @ENDT AS DATEST,
 CASE WHEN EXTR.EXTRUDE_LBS>0  THEN 
 CAST(CAST(  ISNULL(PROD.LBS,0) AS DECIMAL(10,4)) / CAST(EXTR.EXTRUDE_LBS AS DECIMAL(10,4)) AS DECIMAL(10,4)) ELSE 0 END SAVING_RATE, 
 ISNULL((SELECT TOP 1 S.KY_USER FROM PRD.K_QA27 Q INNER JOIN PRD.K_WORK_ORDER W ON Q.ID_WORK_ORDER= W.ID_WORK_ORDER INNER JOIN PRD.K_SHIFT S ON S.ID_SHIFT = Q.ID_SHIFT
 WHERE W.ID_PRODUCTION_LINE= PROD.ID_PRODUCTION_LINE AND Q.KY_STATUS= 'RUNNING' ),'')AS LEADMAN
 FROM #EXTRUDED_LBS EXTR LEFT JOIN #PROD_LBS PROD ON 
	PROD.ID_PRODUCTION_LINE = EXTR.ID_PRODUCTION_LINE

	
RETURN 


END





