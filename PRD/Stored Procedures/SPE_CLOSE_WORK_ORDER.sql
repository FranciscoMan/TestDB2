-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Julio Tavares	
-- CRETAE date: 27/04/2017
-- Description: Clhange a status work order when puch the button "Close Work Order"
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_CLOSE_WORK_ORDER] 
    	    @XML_RESULT XML = '' OUT ,    -- --0 TO ERROR AND 1 TO CORRECT
			@PIN_ID_WORK_ORDER AS int = NULL,
			@PIN_ID_QA_27 AS int = NULL,
			@PIN_KY_STATUS_WO AS nvarchar(300) = NULL,
			@PIN_KY_STATUS_QA AS nvarchar(300) = NULL

		  , @PIN_KY_USER_APP_UPDATE AS nvarchar(50)
		  , @PIN_NM_PROGRAM_UPDATE AS nvarchar(50)
		  , @PIN_TYPE_TRANSACTION CHAR(1)             --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
	,@DT_SYSTEM DATETIME = DBO.F_GETDATE(1)

    	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	
		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION='U'
	    	BEGIN
				-- WE UPDATE THE REGISTER ON THE TABLE ADM.C_POSITION

				UPDATE PRD.K_QA27
				   SET KY_STATUS = @PIN_KY_STATUS_QA
					, [DT_FINAL_TIME] = @DT_SYSTEM
				    , [DT_UPDATE] =@DT_SYSTEM
					, [KY_USER_APP_UPDATE] = @PIN_KY_USER_APP_UPDATE
					, [NM_PROGRAM_UPDATE] = @PIN_NM_PROGRAM_UPDATE
				   WHERE ID_QA27 = @PIN_ID_QA_27

				UPDATE PRD.K_WORK_ORDER
				   SET
   					  [KY_STATUS] = @PIN_KY_STATUS_WO
					, [DT_CLOSE_WORK_ORDER] = @DT_SYSTEM
					, [DT_UPDATE] =@DT_SYSTEM
					, [KY_USER_APP_UPDATE] = @PIN_KY_USER_APP_UPDATE
					, [NM_PROGRAM_UPDATE] = @PIN_NM_PROGRAM_UPDATE
				WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER;
				
				--JPP 21/07/2017
--********************* START UPDATE PALLETS WITH THE STATUS SAVE_AS_IS TO A NEW PALLET NUMBER **************************--
;WITH T_MAX_VALUE AS(
SELECT TOP 1  WO.ID_WORK_ORDER ,NO_PALLET 
FROM PRD.K_PALLET P 
INNER JOIN PRD.K_WORK_ORDER WO ON WO.ID_WORK_ORDER = P.ID_WORK_ORDER
WHERE WO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
AND P.KY_STATUS = 'ACCEPTED'
ORDER BY NO_PALLET DESC
	),
	T_VALUES AS(SELECT 
				WO.ID_WORK_ORDER,
				P.ID_PALLET,
				P.NO_PALLET,
				P.KY_STATUS,
				ROW_NUMBER() OVER (PARTITION BY WO.ID_WORK_ORDER,P.KY_STATUS ORDER BY WO.ID_WORK_ORDER,P.NO_PALLET) AS ROWNUM
				FROM PRD.K_PALLET P 
				INNER JOIN PRD.K_WORK_ORDER WO ON WO.ID_WORK_ORDER = P.ID_WORK_ORDER
				WHERE WO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
				AND P.KY_STATUS = 'SAVE_AS_IS'
				)

				UPDATE A
				SET NO_PALLET = B.NO_NEW_PALLET
				FROM PRD.K_PALLET A
				JOIN (SELECT T1.ID_PALLET,(T1.ROWNUM + ISNULL(T2.NO_PALLET,0)) AS NO_NEW_PALLET FROM T_VALUES T1
						LEFT OUTER JOIN T_MAX_VALUE T2 ON T1.ID_WORK_ORDER = T2.ID_WORK_ORDER) B
					ON A.ID_PALLET = B.ID_PALLET				


--********************* END UPDATE PALLETS WITH THE STATUS SAVE_AS_IS TO A NEW PALLET NUMBER **************************--						
			END
		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
			
	END CATCH
END

