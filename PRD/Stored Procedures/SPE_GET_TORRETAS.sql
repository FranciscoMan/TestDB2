
CREATE PROCEDURE  [PRD].[SPE_GET_TORRETAS]

AS
DECLARE @T_PRODUCTION_LINE TABLE (
		ID_PRODUCTION_LINE INT
		, NM_PRODUCTION_LINE NVARCHAR(50)
		, KY_LAST_ISSUE_STATUS NVARCHAR(20)
		, FG_IDLE BIT
		, DT_LAST_FORM DATETIME
		, FG_LINE_DOWN BIT
		, FG_WORK_ORDERS BIT
		, FG_RECLAIMED_SHIFT BIT
		, FG_LINE_RUNNING BIT
		, FG_LOST_TIME_ATTENDED BIT
		, NO_IP NVARCHAR(20)
		, NO_PORT NVARCHAR(4)
		, NO_GREEN_REGISTER NVARCHAR(100)
		, NO_RED_REGISTER NVARCHAR(100)
		, NO_YELLOW_REGISTER NVARCHAR(100)
		, NO_GRAY_REGISTER NVARCHAR(100)
	)

	INSERT INTO @T_PRODUCTION_LINE (
		ID_PRODUCTION_LINE
		, NM_PRODUCTION_LINE
		, NO_IP
		, NO_PORT
		, NO_GREEN_REGISTER
		, NO_RED_REGISTER
		, NO_YELLOW_REGISTER
		, NO_GRAY_REGISTER
	)
	SELECT ID_PRODUCTION_LINE
		, NM_PRODUCTION_LINE
		, NO_IP
		, NO_PORT
		, NO_GREEN_REGISTER
		, NO_RED_REGISTER
		, NO_YELLOW_REGISTER
		, NO_GRAY_REGISTER
	FROM PRD.C_PRODUCTION_LINE CPL
	WHERE CPL.FG_ACTIVE = 1
		AND CPL.FG_STACK_LIGHT_ENABLED = 1

 --  Se actualiza en la variable de tabla el último estatus de las líneas de producción.
	; WITH T_LAST_ISSUE_STATUS AS (
		SELECT (SELECT TOP 1 KI.KY_STATUS FROM PRD.K_ISSUE KI INNER JOIN PRD.K_WORK_ORDER KWO 
		        ON KI.ID_WORK_ORDER = KWO.ID_WORK_ORDER AND KWO.ID_PRODUCTION_LINE = TPL.ID_PRODUCTION_LINE 
				ORDER BY DT_ISSUE DESC) AS KY_LAST_ISSUE_STATUS
			, TPL.ID_PRODUCTION_LINE
		FROM @T_PRODUCTION_LINE TPL
	)

	UPDATE TPL
	SET KY_LAST_ISSUE_STATUS = TLIS.KY_LAST_ISSUE_STATUS
	FROM @T_PRODUCTION_LINE TPL
		INNER JOIN T_LAST_ISSUE_STATUS TLIS
			ON TPL.ID_PRODUCTION_LINE = TLIS.ID_PRODUCTION_LINE



-- Se actualiza la bandera de IDLE 

			; WITH T_LAST_ISSUE_STATUS_IDLE AS (
		SELECT (SELECT TOP 1 KI.DS_ISSUE_EXPLANATION_OPEN FROM PRD.K_ISSUE KI INNER JOIN PRD.K_WORK_ORDER KWO 
		        ON KI.ID_WORK_ORDER = KWO.ID_WORK_ORDER AND KWO.ID_PRODUCTION_LINE = TPL.ID_PRODUCTION_LINE AND KI.KY_STATUS='HOLD_ON' 
				ORDER BY DT_ISSUE DESC) AS TYPE_EVENT
			, TPL.ID_PRODUCTION_LINE
		FROM @T_PRODUCTION_LINE TPL
	)

	UPDATE TPL
	SET FG_IDLE = CASE WHEN CONVERT(VARCHAR(20),TLISI.TYPE_EVENT) = CONVERT(VARCHAR(20),'Event idle') THEN CONVERT(BIT,1)  ELSE  CONVERT(BIT,0)  END
	FROM @T_PRODUCTION_LINE TPL
		INNER JOIN T_LAST_ISSUE_STATUS_IDLE TLISI
			ON TPL.ID_PRODUCTION_LINE = TLISI.ID_PRODUCTION_LINE

	

 -- Se obtiene la fecha de su estatus actual y se hace un update.
	; WITH T_LAST_FORM_STATUS AS (
		SELECT (SELECT TOP 1 KF.DT_FORM
			FROM PRD.K_FORM KF
				LEFT JOIN PRD.K_WORK_ORDER KWO
					ON KF.ID_WORK_ORDER = KWO.ID_WORK_ORDER
			WHERE KF.KY_PROCESS_TYPE IN ('MANUFACTURE', 'PROCESS')
				AND CASE KF.KY_PROCESS_TYPE 
					WHEN 'MANUFACTURE' THEN KWO.ID_PRODUCTION_LINE
					WHEN 'PROCESS' THEN KF.ID_PRODUCTION_LINE
				END = TPL.ID_PRODUCTION_LINE
				AND KF.KY_STATUS_FORM = 'CREATED'
			ORDER BY KF.DT_FORM ASC
		) AS DT_FORM
		, TPL.ID_PRODUCTION_LINE
		FROM @T_PRODUCTION_LINE TPL
	)
	UPDATE TPL
	SET DT_LAST_FORM = TLFS.DT_FORM
	FROM @T_PRODUCTION_LINE TPL
		INNER JOIN T_LAST_FORM_STATUS TLFS
			ON TPL.ID_PRODUCTION_LINE = TLFS.ID_PRODUCTION_LINE

 -- De la tabla shift se obtiene qué línea está siendo utilizada por un leadman.
	UPDATE TPL
	SET FG_RECLAIMED_SHIFT = 1
	FROM @T_PRODUCTION_LINE TPL
		INNER JOIN PRD.K_SHIFT KS
			ON TPL.ID_PRODUCTION_LINE = KS.ID_PRODUCTION_LINE
			AND KS.FG_STATUS = 1
			AND KS.KY_USER IS NOT NULL

 -- Se busca las líneas que  estén en down.
	UPDATE TPL
	SET FG_LINE_DOWN = 1
	FROM @T_PRODUCTION_LINE TPL
		INNER JOIN PRD.K_ISSUE KI
			ON KI.ID_PRODUCTION_LINE = TPL.ID_PRODUCTION_LINE
			AND KI.KY_STATUS IN ('HOLD_ON', 'CREATED')
			AND KI.FG_LINE_DOWN = 1

	
 -- Se activan las líneas al tener una work order corriendo o programada.
	UPDATE TPL
	SET FG_WORK_ORDERS = 1
	FROM @T_PRODUCTION_LINE TPL
	WHERE EXISTS (SELECT TOP 1 1 FROM PRD.K_WORK_ORDER KWO WHERE KWO.KY_STATUS IN 
	('RUNNING', 'SCHEDULED') AND TPL.ID_PRODUCTION_LINE = KWO.ID_PRODUCTION_LINE)

 -- Se actualizan las últimas banderas.
	UPDATE @T_PRODUCTION_LINE
	SET  
		  FG_LOST_TIME_ATTENDED = CASE WHEN ISNULL(KY_LAST_ISSUE_STATUS, 'CLOSED') = 'HOLD_ON' THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END
		, FG_LINE_RUNNING = CASE WHEN ISNULL(KY_LAST_ISSUE_STATUS, 'CLOSED') = 'CLOSED' THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END
-- Si no hay, se rellenan con 0.
		, FG_RECLAIMED_SHIFT = ISNULL(FG_RECLAIMED_SHIFT, 0)
		, FG_LINE_DOWN = ISNULL(FG_LINE_DOWN, 0)
		, FG_WORK_ORDERS = ISNULL(FG_WORK_ORDERS, 0)


   --SELECT * FROM @T_PRODUCTION_LINE -- PRUEBAS

	SELECT ID_PRODUCTION_LINE
		, NM_PRODUCTION_LINE
		, NO_IP
		, NO_PORT
		, NO_GREEN_REGISTER
		, NO_RED_REGISTER
		, NO_YELLOW_REGISTER
		, NO_GRAY_REGISTER
		, CASE WHEN  FG_LINE_DOWN = 1 OR  FG_RECLAIMED_SHIFT = 0 OR 
			FG_IDLE = 1
		        THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS NO_RED_VALUE --RED
		, CASE WHEN (FG_LINE_DOWN = 0 AND FG_WORK_ORDERS = 1 AND  FG_RECLAIMED_SHIFT = 1 AND FG_LOST_TIME_ATTENDED = 1 AND FG_LINE_RUNNING = 0) OR 
			FG_IDLE = 1
		        THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS NO_YELLOW_VALUE -- YELLOW
		, CASE WHEN FG_LINE_DOWN = 0 AND FG_WORK_ORDERS = 1 AND   FG_RECLAIMED_SHIFT = 1 AND FG_LINE_RUNNING = 1 AND FG_LOST_TIME_ATTENDED = 0
		        THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS NO_GREEN_VALUE --GREEN
		, CASE WHEN FG_LINE_DOWN = 0  OR  FG_RECLAIMED_SHIFT = 0  OR (FG_LINE_RUNNING = 0  AND FG_WORK_ORDERS = 0)
		        THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END AS NO_GRAY_VALUE -- GRAY
	FROM @T_PRODUCTION_LINE




