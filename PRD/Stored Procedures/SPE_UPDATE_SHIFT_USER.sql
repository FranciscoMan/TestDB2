-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2018
-- Author: Julio Tavares
-- CRETAE date: 22/06/2018
-- Description: Insert or update a shift leadman
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_UPDATE_SHIFT_USER] 
	@XML_RESULT XML = '' OUT
	, @PIN_ID_SHIFT AS INT
	, @PIN_ID_QA27 AS INT = NULL
	, @PIN_KY_USER AS NVARCHAR(50) = NULL
	, @PIN_KY_USER_APP AS NVARCHAR(50)
	, @PIN_ID_BRANCH_PLANT AS INT = NULL
	, @PIN_NM_PROGRAM AS NVARCHAR(50)
	, @PIN_TYPE_TRANSACTION CHAR(1) --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
		, @DT_SYSTEM DATETIME = GETDATE()
		, @V_ID_LEADMAN_NEW INT
		, @V_NM_LEADMAN NVARCHAR(100)
		, @V_ID_ISSUE INT
		, @V_ID_PRODUCTION_LINE INT
		, @V_ID_PRODUCTION INT
		, @V_IPS_CREATE_FORM NVARCHAR(20)
		, @V_FG_ISSUE_CONFIRMED BIT = NULL
		, @XML_FORM XML
		, @XML_RECIPIENTS_USERS XML
		, @XML_NOTIFICATION_FORM XML = N'<NOTIFICATIONS><RECIPIENTS></RECIPIENTS></NOTIFICATIONS>'
		, @XML_NOTIFICATION_FORM_PARAMETERS XML
		, @V_KY_NOTIFICATION_ORIGIN AS NVARCHAR(20) = 'ISSUE'
		, @V_DT_START_WORK_ORDER DATETIME

		----PARAMETERS OF FORMS
		, @P_NM_FORM NVARCHAR(50) 
		, @P_KY_URL NVARCHAR(50)
		, @P_DS_TITLE NVARCHAR(50)
		, @P_NO_WIDTH NVARCHAR(50)
		, @P_NO_HEIGHT NVARCHAR(50)
		, @P_URL_PARAMETERS NVARCHAR(200)
		, @V_ID_BRANCH_PLANT_PRODUCTION_LINE INT = NULL
	
	CREATE TABLE #T_K_FORM  (
		ID_K_FORM INT
	)

	CREATE TABLE #T_NOTIFICATION_K_FORMS  (
		ID_NOTIFICATION INT
		, ID_K_FORM	INT
	)

	BEGIN TRY
			--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
				--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END			

		--WE VERIFY IF THE STORED PROCEDURE IS GOING TO EXECUTE UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION = 'U' BEGIN				
			
			SELECT @V_ID_LEADMAN_NEW = CE.ID_EMPLOYEE, 
				   @V_NM_LEADMAN = CE.NM_FIRST_NAME + ' ' + CE.NM_LAST_NAME
			FROM ADM.C_USER CU
				INNER JOIN ADM.C_EMPLOYEE CE 
					ON CU.ID_EMPLOYEE = CE.ID_EMPLOYEE
			WHERE CU.KY_USER = @PIN_KY_USER

			SELECT @V_ID_PRODUCTION_LINE = ID_PRODUCTION_LINE
			FROM PRD.K_SHIFT KS
			WHERE KS.ID_SHIFT = @PIN_ID_SHIFT

			SET @V_ID_BRANCH_PLANT_PRODUCTION_LINE = (SELECT ID_BRANCH_PLANT FROM PRD.C_PRODUCTION_LINE WHERE ID_PRODUCTION_LINE = @V_ID_PRODUCTION_LINE)

			SET @V_DT_START_WORK_ORDER = (SELECT KWO.DT_START_WORK_ORDER FROM PRD.K_WORK_ORDER KWO WHERE KWO.ID_PRODUCTION_LINE = @V_ID_PRODUCTION_LINE AND KWO.KY_STATUS = 'RUNNING')
			------------------------------------------------------------------------------------------
			-------------------------------------ISSUE VALIDATION BEGIN----------------------------------------------------
			------ THIS CODE REPLICATED IN SPE_UPDATE_SHIFT_USER ----------IF CHANGED CODE, CHANGE TOO IN THIS SP ---------

			SELECT @V_ID_ISSUE = KI.ID_ISSUE -- GET ISSUE ID IF EXISTS FOR THAT PRODUCTION LINE WHEN CHANGE SHIFT
			FROM PRD.K_ISSUE KI
				INNER JOIN PRD.K_WORK_ORDER WO 
					ON WO.ID_WORK_ORDER = KI.ID_WORK_ORDER
			WHERE KI.KY_ISSUE IS NULL 
				AND WO.ID_PRODUCTION_LINE = @V_ID_PRODUCTION_LINE 
				AND KI.KY_STATUS IN ('CHANGE_SHIFT', 'HOLD_ON', 'CREATED')
				AND WO.KY_STATUS = 'RUNNING'

			IF @V_ID_ISSUE IS NOT NULL BEGIN
				------ INSERT A NEW ISSUE IF THERE ARE AN ISSUE WHEN CHANGE SHIFT
				------ GET IP ASOCIATED TO PRODUCTION LINE, GET THE FIRST
				CREATE TABLE #TB_ISSUE_NOTIFICATIONS  (
					ID_NOTIFICATION INT,
					ID_ISSUE INT
				)

				SELECT @V_IPS_CREATE_FORM = IPS.NO_IP
				FROM (
					SELECT ROW_NUMBER() OVER(PARTITION BY ID_PRODUCTION_LINE ORDER BY ID_PRODUCTION_LINE_IP) ROWNUMBER
						, CIP.NO_IP
						, CIP.ID_PRODUCTION_LINE
					FROM PRD.C_PRODUCTION_LINE_IP CIP
				) IPS
				WHERE IPS.ROWNUMBER = 1
					AND IPS.ID_PRODUCTION_LINE = @V_ID_PRODUCTION_LINE

				SELECT @V_FG_ISSUE_CONFIRMED = FG_CONFIRMED 
				FROM PRD.K_ISSUE
				WHERE ID_ISSUE = @V_ID_ISSUE;


				----GET ISSUE NOTIFICATIONS TO DELETE AND RECREATE
				; WITH T_ISSUE_NOTIFICATION AS (
					SELECT NP.ID_NOTIFICATION,
						   (SELECT TOP 1 msgs.msg.value('@KY_VALUE', 'nvarchar(50)') TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/FORM/PARAMETERS/child::node()') msgs(msg)  WHERE msgs.msg.value('@KY_PARAMETER' , 'nvarchar(max)') = 'ID_ISSUE') AS ID_ISSUE
					  FROM PRD.K_NOTIFICATION_PROCESS NP
				)
				
				INSERT INTO #TB_ISSUE_NOTIFICATIONS
				SELECT ISN.ID_NOTIFICATION, ISN.ID_ISSUE
				FROM T_ISSUE_NOTIFICATION ISN
				WHERE ISN.ID_ISSUE = @V_ID_ISSUE


				INSERT INTO PRD.K_NOTIFICATIONS_SENDED (
					KY_USER
					, KY_PROCESS_TYPE
					, KY_STATUS
					, XML_PROCESS_CONFIGURATION
					, NO_ATTEMPT_NUMBER
					, DS_ERROR
					, DT_NOTIFICATION
					, DT_SENDED
					, DT_WAITING
					, DT_CLOSE
					, ID_BRANCH_PLANT
					, ID_NOTIFICATION_REFERENCE
					, KY_NOTIFICATION_ORIGIN
					, NO_LEVEL
					, FG_ATTENDED
					, DT_CREATION
					, DT_UPDATE
					, KY_USER_APP_CREATION
					, KY_USER_APP_UPDATE
					, NM_PROGAM_CREATE
					, NM_PROGRAM_UPDATE
				)
				SELECT KY_USER
					, KY_PROCESS_TYPE
					, 'CANCELLED' --, KY_STATUS
					, XML_PROCESS_CONFIGURATION
					, NO_ATTEMPT_NUMBER
					, DS_ERROR
					, DT_NOTIFICATION
					, DT_SENDED
					, DT_WAITING
					, DT_CLOSE
					, ID_BRANCH_PLANT
					, ID_NOTIFICATION_REFERENCE
					, KY_NOTIFICATION_ORIGIN
					, NO_LEVEL
					, FG_ATTENDED
					, GETDATE()
					, NULL
					, @PIN_KY_USER
					, NULL
					, @PIN_NM_PROGRAM
					, NULL
				FROM PRD.K_NOTIFICATION_PROCESS NP 
					INNER JOIN #TB_ISSUE_NOTIFICATIONS KN 
						ON NP.ID_NOTIFICATION = KN.ID_NOTIFICATION 
		
				DELETE NP
				FROM PRD.K_NOTIFICATION_PROCESS NP
					INNER JOIN #TB_ISSUE_NOTIFICATIONS KN 
						ON NP.ID_NOTIFICATION = KN.ID_NOTIFICATION

				SET @XML_RECIPIENTS_USERS = (
					SELECT @PIN_KY_USER  AS "@TO",
						'SEND'  AS "@STATUS",
						'0' AS "@ATTEMPT_NUMBER",
						'' AS "@ERROR",
						@V_ID_PRODUCTION_LINE AS "@ID_PRODUCTION_LINE",
						@V_IPS_CREATE_FORM AS "@IP_CREATE_FORM"
					FOR XML PATH ('RECIPIENT')
				)

				IF @V_FG_ISSUE_CONFIRMED = 1 BEGIN
					SET @P_NM_FORM = 'WorkOrders';
					SET @P_KY_URL = '/PRD/AddEventLostTime.aspx';
					SET @P_DS_TITLE = 'Close unproductive time';
					SET @P_NO_WIDTH ='900';
					SET @P_NO_HEIGHT ='520';
					SET @P_URL_PARAMETERS =CONCAT('?ID_ISSUE=',CAST(@V_ID_ISSUE AS NVARCHAR(10)),'&KY_STATUS=','HOLD_ON');
					SET @XML_NOTIFICATION_FORM_PARAMETERS = (
						SELECT KY_PARAMETER AS '@KY_PARAMETER'
							, KY_VALUE AS '@KY_VALUE'
						FROM (
							SELECT 'ID_ISSUE' AS KY_PARAMETER, CAST(@V_ID_ISSUE AS NVARCHAR(10)) AS KY_VALUE UNION ALL
							SELECT 'KY_STATUS' AS KY_PARAMETER, 'HOLD_ON' AS KY_VALUE
						) AS T
						FOR XML PATH('PARAMETER'), ROOT ('PARAMETERS')
					)
				END ELSE BEGIN
					SET @P_NM_FORM = 'WorkOrders';
					SET @P_KY_URL = '/PRD/ConfirmUserWindow.aspx';
					SET @P_DS_TITLE = 'Confirm User';
					SET @P_NO_WIDTH ='500';
					SET @P_NO_HEIGHT ='310';
					SET @P_URL_PARAMETERS =CONCAT('?ID_ISSUE=',CAST(@V_ID_ISSUE AS NVARCHAR(10)));
					SET @XML_NOTIFICATION_FORM_PARAMETERS = (
						SELECT KY_PARAMETER AS '@KY_PARAMETER'
							, KY_VALUE AS '@KY_VALUE'
						FROM (
							SELECT 'ID_ISSUE' AS KY_PARAMETER, CAST(@V_ID_ISSUE AS NVARCHAR(10)) AS KY_VALUE
						) AS T
						FOR XML PATH('PARAMETER'), ROOT ('PARAMETERS')
					)
				END

				SET @XML_FORM = (
					SELECT 	    
						@P_NM_FORM AS "@NAME",
						@P_KY_URL AS "@URL",
						@P_DS_TITLE AS "@TITLE",
						@P_NO_WIDTH AS "@WIDTH",
						@P_NO_HEIGHT AS "@HEIGHT",
						@P_URL_PARAMETERS AS "@URL_PARAMETERS"
					FOR XML PATH ('FORM')
				)

				SET @XML_FORM.modify('insert sql:variable("@XML_NOTIFICATION_FORM_PARAMETERS") into (/FORM)[1]')

				SET @XML_NOTIFICATION_FORM.modify('insert sql:variable("@XML_RECIPIENTS_USERS") into (/NOTIFICATIONS/RECIPIENTS)[1]')
				SET @XML_NOTIFICATION_FORM.modify('insert sql:variable("@XML_FORM") into (/NOTIFICATIONS)[1]') ;

				EXEC PRD.SPE_INSERT_NOTIFICATION 
					@XML_RESULT = ''
					, @PIN_ID_NOTIFICATION = 1
					, @PIN_KY_USER = @PIN_KY_USER
					, @PIN_KY_PROCESS_TYPE = 'FORM'
					, @PIN_KY_STATUS = 'SEND'
					, @PIN_XML_PROCESS_CONFIGURATION = @XML_NOTIFICATION_FORM
					, @PIN_DT_SENDED = @DT_SYSTEM
					, @PIN_DT_WAITING = NULL
					, @PIN_DT_CLOSE = NULL
					, @PIN_ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT
					, @PIN_ID_NOTIFICATION_REFERENCE = @V_ID_BRANCH_PLANT_PRODUCTION_LINE
--					, @V_ID_ISSUE
					, @PIN_KY_NOTIFICATION_ORIGIN = @V_KY_NOTIFICATION_ORIGIN
					, @PIN_KY_CLOSE_TYPE = NULL
					, @PIN_NO_LEVEL = 1
					, @PIN_FG_ATTENDED = 0
					, @PIN_KY_USER_APP_CREATION = @PIN_KY_USER_APP
					, @PIN_NM_PROGRAM_CREATION = @PIN_NM_PROGRAM
				END

			-------------------------------------ISSUE VALIDATION END-----------------------------------------------------
			-----------------------------------------------------------------------------------------

			IF @V_DT_START_WORK_ORDER IS NOT NULL BEGIN

				INSERT INTO #T_K_FORM 
				SELECT KF.ID_K_FORM
				FROM PRD.K_FORM KF
					LEFT JOIN PRD.K_WORK_ORDER WO
						ON WO.ID_WORK_ORDER = KF.ID_WORK_ORDER
				WHERE KF.DT_FORM <= @DT_SYSTEM
					AND ISNULL(WO.ID_PRODUCTION_LINE, KF.ID_PRODUCTION_LINE) = @V_ID_PRODUCTION_LINE
					AND KF.KY_STATUS_FORM = 'CREATED'
					AND (KF.KY_PROCESS_TYPE = 'MANUFACTURE' OR KF.KY_PROCESS_TYPE = 'PROCESS')
			END

			; WITH T_NOTIFICATION AS (
				SELECT NP.ID_NOTIFICATION
					, (SELECT TOP 1 msgs.msg.value('@KY_VALUE', 'nvarchar(50)') TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/FORM/PARAMETERS/child::node()') msgs(msg)  WHERE msgs.msg.value('@KY_PARAMETER' , 'nvarchar(max)') = 'idKForm') AS ID_K_FORM
					, NP.XML_PROCESS_CONFIGURATION
				FROM PRD.K_NOTIFICATION_PROCESS NP
			)

			INSERT INTO #T_NOTIFICATION_K_FORMS
			SELECT TN.ID_NOTIFICATION
				, CAST(TN.ID_K_FORM AS INT) ID_K_FORM
			FROM T_NOTIFICATION TN
				INNER JOIN #T_K_FORM KF 
					ON TN.ID_K_FORM = KF.ID_K_FORM
			WHERE TN.ID_K_FORM IS NOT NULL
			ORDER BY 1 DESC

 			UPDATE KF
			SET KY_STATUS_FORM = 'CANCELLED', 
				KY_USER_AUTHORIZED_CANCEL = 'Change of line operator',
				NM_USER_AUTHORIZED_CANCEL = 'Change of line operator' ,
				DS_EXPLANATION_CANCEL = 'Change of line operator',
				DT_CLOSED = @DT_SYSTEM,
				DT_UPDATE = @DT_SYSTEM,
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM 
			FROM PRD.K_FORM KF
				INNER JOIN  #T_K_FORM FC 
					ON KF.ID_K_FORM = FC.ID_K_FORM
						
			UPDATE KFM
			SET XML_METRICS_VALUE = '<METRICS />',
				DT_UPDATE = @DT_SYSTEM, 
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			FROM PRD.K_FORM_METRICS KFM 
				INNER JOIN #T_K_FORM FC 
					ON KFM.ID_K_FORM = FC.ID_K_FORM

			----**** DELETE NOTIFICATION PROCESS AND INSERT NOTIFICATIONS SENDED FROM FORMS CANCELLED
			INSERT INTO PRD.K_NOTIFICATIONS_SENDED (
				KY_USER
				, KY_PROCESS_TYPE
				, KY_STATUS
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, NO_LEVEL
				, FG_ATTENDED
				, DT_CREATION
				, DT_UPDATE
				, KY_USER_APP_CREATION
				, KY_USER_APP_UPDATE
				, NM_PROGAM_CREATE
				, NM_PROGRAM_UPDATE
			)
			SELECT KY_USER
				, KY_PROCESS_TYPE
				, 'CANCELLED' --, KY_STATUS
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, NO_LEVEL
				, FG_ATTENDED
				, GETDATE()
				, NULL
				, @PIN_KY_USER
				, NULL
				, @PIN_NM_PROGRAM
				, NULL
			FROM PRD.K_NOTIFICATION_PROCESS NP 
				INNER JOIN #T_NOTIFICATION_K_FORMS KN 
					ON NP.ID_NOTIFICATION = KN.ID_NOTIFICATION

			DELETE NP
			FROM PRD.K_NOTIFICATION_PROCESS NP
				INNER JOIN #T_NOTIFICATION_K_FORMS KN 
					ON NP.ID_NOTIFICATION = KN.ID_NOTIFICATION

			UPDATE PRD.K_QA27
			SET ID_LEADMAN = @V_ID_LEADMAN_NEW,
				NM_LEADMAN = @V_NM_LEADMAN,
				DT_UPDATE = @DT_SYSTEM,
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE ID_QA27 = @PIN_ID_QA27

			UPDATE KS
			SET	KY_USER = @PIN_KY_USER,
				DT_UPDATE = @DT_SYSTEM ,
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			FROM PRD.K_SHIFT KS
			WHERE ID_SHIFT = @PIN_ID_SHIFT
							

			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')			

		END
		
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	

	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES(ERROR_NUMBER(), ERROR_MESSAGE())
		EXECUTE ADM.SPE_RAISE_ERROR			
	END CATCH
END

