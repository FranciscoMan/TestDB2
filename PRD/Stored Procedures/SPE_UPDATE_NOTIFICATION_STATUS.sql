-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Javier Diaz Barron
-- CREATE date: 05/04/2017
-- Description: Change Status of Notification
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_UPDATE_NOTIFICATION_STATUS] 
	 @XML_RESULT XML = '' OUT --0 TO ERROR AND 1 TO CORRECT
	,@PIN_ID_NOTIFICATION  INT 
	,@PIN_KY_STATUS NVARCHAR(50)
	,@DS_ERROR NVARCHAR(1000)= NULL
	,@NO_ATTEMPT_NUMBER INT = NULL
	,@XML_PROCESS_CONFIGURATION XML = NULL
	,@PIN_FG_ATTENDED BIT = NULL
	,@PIN_KY_USER_APP_UPDATE NVARCHAR(50)
	,@PIN_NM_PROGRAM_UPDATE NVARCHAR(50)	
AS
BEGIN
	--WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	BEGIN TRY		   			
		DECLARE @V_EXIST_TRAN BIT = 0
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			BEGIN TRANSACTION

			SET @V_EXIST_TRAN = 1
		END	

		DECLARE @V_ID_DOCUMENT_HISTORY INT = NULL
			   ,@V_ID_NOTIFICATION_SENDED INT = NULL
			

		UPDATE PRD.K_NOTIFICATION_PROCESS 
		SET KY_STATUS =@PIN_KY_STATUS 			
			, DT_SENDED =CASE WHEN @PIN_KY_STATUS = 'SEND' THEN GETDATE() ELSE DT_SENDED END --, DT_SENDED =CASE WHEN @PIN_KY_STATUS = 'SEND' THEN GETDATE() ELSE NULL END
			, DT_WAITING =CASE WHEN @PIN_KY_STATUS = 'WAIT' THEN GETDATE() ELSE DT_WAITING END --, DT_WAITING =CASE WHEN @PIN_KY_STATUS = 'WAIT' THEN GETDATE() ELSE NULL END
			, DT_CLOSE =CASE WHEN @PIN_KY_STATUS = 'CLOSED' THEN GETDATE() ELSE DT_CLOSE END --, DT_CLOSE =CASE WHEN @PIN_KY_STATUS = 'CLOSED' THEN GETDATE() ELSE NULL END
			, NO_ATTEMPT_NUMBER = CASE WHEN @NO_ATTEMPT_NUMBER = NULL THEN (SELECT NO_ATTEMPT_NUMBER FROM PRD.K_NOTIFICATION_PROCESS WHERE ID_NOTIFICATION = @PIN_ID_NOTIFICATION) ELSE @NO_ATTEMPT_NUMBER END 
			, DS_ERROR = @DS_ERROR
			, DT_UPDATE = GETDATE()
			--, FG_ATTENDED = CASE WHEN @PIN_KY_STATUS = 'CLOSED' THEN @PIN_FG_ATTENDED ELSE FG_ATTENDED END 
			, XML_PROCESS_CONFIGURATION = CASE WHEN @XML_PROCESS_CONFIGURATION IS NULL THEN XML_PROCESS_CONFIGURATION ELSE @XML_PROCESS_CONFIGURATION END	
			, KY_USER_APP_UPDATE = @PIN_KY_USER_APP_UPDATE
			, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM_UPDATE			 					
		WHERE ID_NOTIFICATION = @PIN_ID_NOTIFICATION
		
/*		
		-- UPDATE STATUS TO CLOSE
		UPDATE PRD.K_NOTIFICATION_PROCESS 
			SET KY_STATUS ='CLOSED'
				, DT_CLOSE = GETDATE()
				, KY_USER_APP_UPDATE=@PIN_KY_USER_APP_UPDATE
				, NM_PROGRAM_UPDATE=@PIN_NM_PROGRAM_UPDATE			 					
		WHERE ID_NOTIFICATION = @PIN_ID_NOTIFICATION
			AND NOT EXISTS(SELECT TOP 1 1
					FROM @XML_PROCESS_CONFIGURATION.nodes('/NOTIFICATIONS/RECIPIENTS/RECIPIENT') AS ref(recipients)
					WHERE recipients.value('(@STATUS)[1]', 'varchar(MAX)') IN('SEND','WAIT','AWAIT','PROCESSING','ERROR')
				)
*/
	
		
		UPDATE PRD.K_NOTIFICATION_PROCESS 
			SET KY_STATUS ='CLOSED'
				, DT_CLOSE = GETDATE()
				, FG_ATTENDED = @PIN_FG_ATTENDED
				, KY_USER_APP_UPDATE=@PIN_KY_USER_APP_UPDATE
				, NM_PROGRAM_UPDATE=@PIN_NM_PROGRAM_UPDATE			 					
		WHERE ID_NOTIFICATION = @PIN_ID_NOTIFICATION AND (KY_CLOSE_TYPE IS NULL OR KY_CLOSE_TYPE = 'ALL')
			AND NOT EXISTS(SELECT TOP 1 1
					FROM @XML_PROCESS_CONFIGURATION.nodes('/NOTIFICATIONS/RECIPIENTS/RECIPIENT') AS ref(recipients)
					WHERE recipients.value('(@STATUS)[1]', 'varchar(MAX)') IN('SEND','WAIT','AWAIT','PROCESSING','ERROR')
				)

		UPDATE PRD.K_NOTIFICATION_PROCESS 
			SET KY_STATUS ='CLOSED'
				, DT_CLOSE = GETDATE()
				, FG_ATTENDED = @PIN_FG_ATTENDED
				, KY_USER_APP_UPDATE=@PIN_KY_USER_APP_UPDATE
				, NM_PROGRAM_UPDATE=@PIN_NM_PROGRAM_UPDATE			 					
		WHERE ID_NOTIFICATION = @PIN_ID_NOTIFICATION AND KY_CLOSE_TYPE = 'ONE'
			AND EXISTS(SELECT TOP 1 1
					FROM @XML_PROCESS_CONFIGURATION.nodes('/NOTIFICATIONS/RECIPIENTS/RECIPIENT') AS ref(recipients)
					WHERE recipients.value('(@STATUS)[1]', 'varchar(MAX)') = 'CLOSED'
				)

	IF(@PIN_KY_STATUS = 'CLOSED')
		BEGIN
			--INSERT INTO PRD.K_DOCUMENT_HISTORY (ID_DOCUMENT, NM_DOCUMENT, KY_USER_SENDED, NM_USER_SENDED, DT_SENDED, DT_CONFIRM, ID_BRANCH_PLANT, DT_CREATION, KY_USER_APP_CREATION, NM_PROGAM_CREATE)	
			--SELECT 
			--	 CAST(NOTI.ID_DOCUMENT AS UNIQUEIDENTIFIER) AS ID_DOCUMENT
			--	,DM.name AS NM_DOCUMENT
			--	,NOTI.USER_RECIPENT 
			--	,CU.NM_USER
			--	,NOTI.DT_SENDED
			--	,ISNULL(NOTI.DT_CLOSE, GETDATE())
			--	,NOTI.ID_BRANCH_PLANT
			--	,GETDATE()
			--	,@PIN_KY_USER_APP_UPDATE
			--	,@PIN_NM_PROGRAM_UPDATE
			--FROM(
			--	SELECT NP.ID_NOTIFICATION,
			--			NP.KY_PROCESS_TYPE,
			--			NP.DT_NOTIFICATION,
			--			NP.DT_SENDED,
			--			NP.DT_WAITING,
			--			NP.DT_CLOSE,
			--			NP.ID_BRANCH_PLANT,
			--			(SELECT TOP 1  msgs.msg.value('@KY_VALUE', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/FORM/PARAMETERS/child::node()') msgs(msg) WHERE msgs.msg.value('@KY_PARAMETER' , 'nvarchar(max)') = 'idDocument') 
			--				AS ID_DOCUMENT,
			--			(SELECT TOP 1  msgs.msg.value('@TO', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/RECIPIENTS/child::node()') msgs(msg) /*WHERE msgs.msg.value('@TO' , 'nvarchar(max)') = @PIN_KY_USER*/) 
			--				AS USER_RECIPENT,
			--			(SELECT TOP 1  msgs.msg.value('@ID_PRODUCTION_LINE', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/RECIPIENTS/child::node()') msgs(msg) /*WHERE msgs.msg.value('@TO' , 'nvarchar(max)') = @PIN_KY_USER*/) 
			--				AS ID_PRODUCTION_LINE
			--		FROM PRD.K_NOTIFICATION_PROCESS NP
			--	)
			--	NOTI
			--JOIN ADM.FS_DOCUMENT_MANAGEMENT DM ON NOTI.ID_DOCUMENT = DM.stream_id
			--JOIN ADM.C_USER CU ON NOTI.USER_RECIPENT = CU.KY_USER
			--WHERE NOTI.KY_PROCESS_TYPE =  'FORM'
			--  AND NOTI.ID_DOCUMENT IS NOT NULL 
			--  AND NOTI.ID_NOTIFICATION = @PIN_ID_NOTIFICATION
		 UPDATE PRD.K_DOCUMENT_HISTORY
			SET DT_CONFIRM = GETDATE()
			   ,KY_USER_APP_UPDATE = @PIN_KY_USER_APP_UPDATE
			   ,NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM_UPDATE
		  WHERE ID_NOTIFICATION = @PIN_ID_NOTIFICATION

	  END

		INSERT INTO PRD.K_NOTIFICATIONS_SENDED 
		SELECT KY_USER
			, KY_PROCESS_TYPE
			, KY_STATUS
			, XML_PROCESS_CONFIGURATION
			, NO_ATTEMPT_NUMBER
			, DS_ERROR
			, DT_NOTIFICATION
			, DT_SENDED
			, DT_WAITING
			, DT_CLOSE
			, ID_BRANCH_PLANT
			, ID_NOTIFICATION_REFERENCE
			, KY_NOTIFICATION_ORIGIN
			, NO_LEVEL
			, FG_ATTENDED
			, GETDATE()
			, NULL
			, KY_USER_APP_UPDATE
			, NULL
			, NM_PROGRAM_UPDATE
			, NULL
		FROM PRD.K_NOTIFICATION_PROCESS 
		WHERE ID_NOTIFICATION = @PIN_ID_NOTIFICATION	
			AND KY_STATUS = 'CLOSED'
		
		DELETE PRD.K_NOTIFICATION_PROCESS WHERE ID_NOTIFICATION =@PIN_ID_NOTIFICATION AND KY_STATUS = 'CLOSED'
		
		--WE RETURN A VARIABLE THAT INDICATES THAT EVERYTHING WAS PERFORMED OKAY.
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Se Actualizo el estatus de la notificación satisfactoriamente', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successfully Update of notification status', 'EN')
		
		--IN THIS BLOCK ALL TRANSACTIONS WILL DELETED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			COMMIT
		END

	END TRY
	BEGIN CATCH			
		
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			ROLLBACK
		END

		SET @XML_RESULT = DBO.F_ERROR_MESSAGES(ERROR_NUMBER(), ERROR_MESSAGE())

		EXECUTE ADM.SPE_RAISE_ERROR
	END CATCH
END

