-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Julio César Tavares
-- CRETAE date: 22/03/2017
-- Description: Insert or update a new form
-- =============================================
-- 15/02/2018 JDR PIN_GET_PERIODICALLY, PIN_ID_PRODUCTION_LINE_TYPE parameters added
-- 11/05/2018 JCTC PIN_CUSTOMER_SAMPLES_XML parameters added
-- =============================================


CREATE PROCEDURE  [PRD].[SPE_INSERT_UPDATE_FORM] 
    	  @XML_RESULT XML = '' OUT ,    -- --0 TO ERROR AND 1 TO CORRECT
			@PIN_ID_FORM AS int = NULL,
			@PIN_KY_FORM AS nvarchar(50) = NULL,
			@PIN_NM_FORM AS nvarchar(300) = NULL,
			@PIN_DS_FORM AS nvarchar(500) = NULL,
			@PIN_NO_FREQUENCE AS INT = NULL,
			@PIN_ID_DATA_ACQUISITION_ORIGIN AS INT = NULL,
			@PIN_ID_BRANCH_PLANT AS int = NULL,
			@PIN_FG_ACTIVE AS bit = NULL,
			@PIN_NO_SAMPLE AS INT = NULL,
			@PIN_KY_SAMPLE_UNIT AS NVARCHAR(20) = NULL,
			@PIN_KY_PROCESS AS nvarchar(30) = NULL,
			--@PIN_KY_USER_LEVELS_XML AS XML = NULL,
			@PIN_KY_METRICS_XML AS XML = NULL,
			@PIN_KY_PRODUCTION_LINE_XML AS XML = NULL,
			--@PIN_NO_TIME_HOLD_ON AS INT,
			@PIN_FG_GET_PERIODICALLY AS BIT,
			@PIN_ID_PRODUCTION_LINE_TYPE AS INT,
			@PIN_NO_RANDOM_VARIABLES AS INT,
			@PIN_CUSTOMER_SAMPLES_XML AS XML = NULL,
		    @PIN_KY_USER_APP AS nvarchar(50),
		    @PIN_NM_PROGRAM AS nvarchar(50),
		    @PIN_TYPE_TRANSACTION CHAR(1)             --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
	,@DT_SYSTEM DATETIME = GETDATE()
	--,@V_ID_FORM INT

    	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	
		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION = 'I' 
		BEGIN
			--WE INSERT THE REGISTER ON THE TABLE  PRD.C_FORM
			INSERT INTO PRD.C_FORM (
				KY_FORM
				, NM_FORM
				, DS_FORM
				, NO_FREQUENCE
				, ID_DATA_ACQUISITION_ORIGIN
				, ID_BRANCH_PLANT
				, FG_ACTIVE
				, NO_SAMPLE
				, KY_SAMPLE_UNIT
				, KY_PROCESS
				, FG_GET_PERIODICALLY
				, ID_PRODUCTION_LINE_TYPE
				, NO_RANDOM_ACQUISITION_VARIABLES
				, DT_CREATION
				, KY_USER_APP_CREATION
				, NM_PROGAM_CREATE
			)
			VALUES (
				@PIN_KY_FORM 
				, @PIN_NM_FORM 
				, @PIN_DS_FORM 
				, ISNULL(@PIN_NO_FREQUENCE, 99999999)
				, @PIN_ID_DATA_ACQUISITION_ORIGIN 
				, @PIN_ID_BRANCH_PLANT 
				, @PIN_FG_ACTIVE 
				, @PIN_NO_SAMPLE 
				, @PIN_KY_SAMPLE_UNIT
				, @PIN_KY_PROCESS
				, @PIN_FG_GET_PERIODICALLY
				, @PIN_ID_PRODUCTION_LINE_TYPE
				, @PIN_NO_RANDOM_VARIABLES
				, @DT_SYSTEM 
				, @PIN_KY_USER_APP 
				, @PIN_NM_PROGRAM
			)
			
			SET @PIN_ID_FORM = SCOPE_IDENTITY();


			--INSERTS THE REGISTER ON THE TABLE  PRD.K_USERS_SCALING
			--INSERT INTO PRD.K_POSITION_SCALING (
			--	ID_FORM
			--	,ID_POSITION
			--	,KY_LEVEL_TYPE
			--	,NO_TIME_HOLD_ON
			--	,DT_CREATION
			--	,KY_USER_APP_CREATION
			--	,NM_PROGAM_CREATE
			--)
			--SELECT 
			--	@PIN_ID_FORM
			--	,LEVELS.ID_POSITION
			--	,LEVELS.NO_LEVEL
			--	,@PIN_NO_TIME_HOLD_ON
			--	,@DT_SYSTEM
			--	,@PIN_KY_USER_APP 
			--	,@PIN_NM_PROGRAM
			--FROM (SELECT x.ref.value('@NO_LEVEL', 'INT') NO_LEVEL,
			--	x.ref.value('@ID_POSITION', 'INT') ID_POSITION
			--	FROM @PIN_KY_USER_LEVELS_XML.nodes('/LEVELS/LEVEL') x(ref)
			--) LEVELS

			--WE INSERT THE REGISTER ON THE TABLE  PRD.C_FORM_METRICS

			INSERT INTO PRD.C_FORM_METRICS (
				 ID_FORM
				,ID_METRICS
				,FG_VALIDATE_METRICS
				,KY_VARIABLE_ACQUISITION_TYPE
				,DT_CREATION
				,KY_USER_APP_CREATION
				,NM_PROGAM_CREATE
			)
			SELECT @PIN_ID_FORM
				,METRICS.ID_METRIC
				,METRICS.FG_VALIDATE
				,KY_VARIABLE_ACQUISITION_TYPE --added
				,@DT_SYSTEM
				,@PIN_KY_USER_APP 
				,@PIN_NM_PROGRAM
			FROM (
			SELECT  x.ref.value('@ID_METRIC', 'INT') ID_METRIC,
			    	x.ref.value('@FG_VALIDATE', 'BIT') FG_VALIDATE,
					x.ref.value('@KY_VARIABLE_ACQUISITION_TYPE', 'NVARCHAR(10)') KY_VARIABLE_ACQUISITION_TYPE
				FROM @PIN_KY_METRICS_XML.nodes('/METRICS/METRIC') x(ref)
			) METRICS

			INSERT INTO ADM.C_CUSTOMER_SAMPLES (
				 ID_FORM
				,KY_CUSTOMER
				,NO_LENGTH_SAMPLE
				,KY_SAMPLE_UNIT
				,DT_CREATION
				,KY_USER_APP_CREATION
				,NM_PROGRAM_CREATE
			)
			SELECT @PIN_ID_FORM
				,CS.KY_CUSTOMER
				,CS.NO_LENGTH_SAMPLE
				,CS.KY_SAMPLE_UNIT
				,@DT_SYSTEM
				,@PIN_KY_USER_APP 
				,@PIN_NM_PROGRAM
			FROM (
				SELECT 
				--x.ref.value('@ID_CUSTOMER_SAMPLE', 'INT') ID_CUSTOMER_SAMPLE,
				--x.ref.value('@ID_FORM', 'INT') ID_FORM,
				x.ref.value('@KY_CUSTOMER', 'VARCHAR(20)') KY_CUSTOMER,
				x.ref.value('@NO_LENGTH_SAMPLE', 'INT') NO_LENGTH_SAMPLE,
				x.ref.value('@KY_SAMPLE_UNIT', 'VARCHAR(10)') KY_SAMPLE_UNIT
				FROM @PIN_CUSTOMER_SAMPLES_XML.nodes('/SAMPLES/SAMPLE') x(ref)
			) CS

			INSERT INTO [PRD].[C_FORM_PRODUCTION_LINE]
					   ([ID_FORM]
					   ,[ID_PRODUCTION_LINE]
					   ,[DT_CREATION]
					   ,[KY_USER_APP_CREATION]
					   ,[NM_PROGRAM_CREATE])
			SELECT @PIN_ID_FORM
				  ,PL.ID_PRODUCTION_LINE
				  ,@DT_SYSTEM
				  ,@PIN_KY_USER_APP 
				  ,@PIN_NM_PROGRAM
			FROM (
				SELECT x.ref.value('@ID_PRODUCTION_LINE', 'INT') ID_PRODUCTION_LINE
				FROM @PIN_KY_PRODUCTION_LINE_XML.nodes('/PRODUCTION_LINES/LINE') x(ref)
			) PL
			
		END 
		
		ELSE 
		BEGIN

			-- WE UPDATE THE REGISTER ON THE TABLE PRD.C_FORM

			UPDATE PRD.C_FORM
			   SET   KY_FORM = @PIN_KY_FORM
				   , NM_FORM = @PIN_NM_FORM
				   , DS_FORM = @PIN_DS_FORM
				   , NO_FREQUENCE = ISNULL(@PIN_NO_FREQUENCE, 99999999)
				   , ID_DATA_ACQUISITION_ORIGIN = @PIN_ID_DATA_ACQUISITION_ORIGIN
				   , NO_SAMPLE = @PIN_NO_SAMPLE 
				   , KY_SAMPLE_UNIT = @PIN_KY_SAMPLE_UNIT
				   , KY_PROCESS = @PIN_KY_PROCESS
				   , ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT
				   , FG_ACTIVE = @PIN_FG_ACTIVE
				   , FG_GET_PERIODICALLY = @PIN_FG_GET_PERIODICALLY
				   , ID_PRODUCTION_LINE_TYPE = @PIN_ID_PRODUCTION_LINE_TYPE
				   , NO_RANDOM_ACQUISITION_VARIABLES = @PIN_NO_RANDOM_VARIABLES
				   , DT_UPDATE =@DT_SYSTEM
				   , KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				   , NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM    
			 WHERE ID_FORM = @PIN_ID_FORM

			-- WE UPDATE THE REGISTER ON THE TABLE PRD.K_USERS_SCALING

			--MERGE PRD.K_POSITION_SCALING AS target
			--USING(
			--		SELECT DISTINCT ID_POSITION_SCALING, NO_LEVEL,ID_POSITION, ID_FORM, ID_BRANCH_PLANT
			--		FROM(
			--				SELECT x.ref.value('@NO_LEVEL', 'INT') NO_LEVEL,
			--					   x.ref.value('@ID_POSITION', 'INT') ID_POSITION,
			--					   x.ref.value('@ID_POSITION_SCALING', 'INT') ID_POSITION_SCALING,
			--					   x.ref.value('@ID_BRANCH_PLANT', 'INT') ID_BRANCH_PLANT,
			--					   @PIN_ID_FORM ID_FORM
			--				  FROM @PIN_KY_USER_LEVELS_XML.nodes('/LEVELS/LEVEL') x(ref) 
						  
			--			) AS USERS_SCALING
			--	)AS SOURCE (ID_POSITION_SCALING, NO_LEVEL, ID_POSITION, ID_FORM, ID_BRANCH_PLANT)
			--ON(TARGET.ID_POSITION_SCALING = SOURCE.ID_POSITION_SCALING)
			--WHEN MATCHED 
			--THEN
			--	UPDATE
			--	   SET  ID_POSITION = SOURCE.ID_POSITION,
			--    		KY_LEVEL_TYPE = SOURCE.NO_LEVEL,
			--    		NO_TIME_HOLD_ON = @PIN_NO_TIME_HOLD_ON,
			--    		DT_UPDATE =@DT_SYSTEM,
			--    		KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
			--    		NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM

			--WHEN NOT MATCHED BY TARGET THEN
			--	INSERT(ID_FORM, ID_POSITION, KY_LEVEL_TYPE, NO_TIME_HOLD_ON, DT_CREATION,KY_USER_APP_CREATION,NM_PROGAM_CREATE )
			--	VALUES(SOURCE.ID_FORM, SOURCE.ID_POSITION, SOURCE.NO_LEVEL, @PIN_NO_TIME_HOLD_ON, @DT_SYSTEM ,@PIN_KY_USER_APP , @PIN_NM_PROGRAM )

			--WHEN NOT MATCHED BY SOURCE AND TARGET.ID_FORM = @PIN_ID_FORM  THEN DELETE;

			-- WE UPDATE THE REGISTER ON THE TABLE PRD.K_FORM_METRICS
			MERGE PRD.C_FORM_METRICS AS target
			USING(
					SELECT DISTINCT ID_FORM_METRICS, ID_METRICS, ID_FORM, FG_VALIDATE, KY_VARIABLE_ACQUISITION_TYPE
					FROM(
							SELECT x.ref.value('@ID_FORM_METRIC', 'INT') ID_FORM_METRICS,
								   x.ref.value('@ID_METRIC', 'INT') ID_METRICS,
								   x.ref.value('@ID_FORM', 'INT') ID_FORM,
								   x.ref.value('@FG_VALIDATE', 'BIT') FG_VALIDATE,
								   x.ref.value('@KY_VARIABLE_ACQUISITION_TYPE', 'NVARCHAR(10)') KY_VARIABLE_ACQUISITION_TYPE
						  FROM @PIN_KY_METRICS_XML.nodes('/METRICS/METRIC') x(ref)
						) AS USERS_SCALING
				)AS SOURCE (ID_FORM_METRICS, ID_METRICS, ID_FORM, FG_VALIDATE,KY_VARIABLE_ACQUISITION_TYPE)
			ON(TARGET.ID_FORM_METRICS = SOURCE.ID_FORM_METRICS)
			WHEN MATCHED 
			THEN
				UPDATE-- PRD.C_FORM_METRICS
				   SET  ID_FORM = SOURCE.ID_FORM,
			    		ID_METRICS = SOURCE.ID_METRICS,
						FG_VALIDATE_METRICS = SOURCE.FG_VALIDATE,
						KY_VARIABLE_ACQUISITION_TYPE = SOURCE.KY_VARIABLE_ACQUISITION_TYPE,
			    		DT_UPDATE =@DT_SYSTEM,
			    		KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
			    		NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM

			WHEN NOT MATCHED BY TARGET THEN
			-- WE UPDATE THE REGISTER ON THE TABLE PRD.C_FORM_METRICS

				INSERT(ID_FORM, ID_METRICS, FG_VALIDATE_METRICS, KY_VARIABLE_ACQUISITION_TYPE, DT_CREATION,KY_USER_APP_CREATION,NM_PROGAM_CREATE )
				VALUES(SOURCE.ID_FORM, SOURCE.ID_METRICS, SOURCE.FG_VALIDATE, SOURCE.KY_VARIABLE_ACQUISITION_TYPE, @DT_SYSTEM ,@PIN_KY_USER_APP , @PIN_NM_PROGRAM )

			WHEN NOT MATCHED BY SOURCE AND TARGET.ID_FORM = @PIN_ID_FORM THEN DELETE;


			-- **** WE UPDATE THE REGISTER ON THE TABLE ADM.C_CUSTOMER_SAMPLES

			MERGE ADM.C_CUSTOMER_SAMPLES AS target
			USING(
					  SELECT CS.ID_CUSTOMER_SAMPLE
							,CS.ID_FORM
							,CS.KY_CUSTOMER
							,CS.NO_LENGTH_SAMPLE
							,CS.KY_SAMPLE_UNIT
						FROM (
							 SELECT x.ref.value('@ID_CUSTOMER_SAMPLE', 'INT') ID_CUSTOMER_SAMPLE,
									@PIN_ID_FORM ID_FORM,
									x.ref.value('@KY_CUSTOMER', 'VARCHAR(20)') KY_CUSTOMER,
									x.ref.value('@NO_LENGTH_SAMPLE', 'INT') NO_LENGTH_SAMPLE,
									x.ref.value('@KY_SAMPLE_UNIT', 'VARCHAR(10)') KY_SAMPLE_UNIT
							FROM @PIN_CUSTOMER_SAMPLES_XML.nodes('/SAMPLES/SAMPLE') x(ref)
						) CS
				)AS SOURCE (ID_CUSTOMER_SAMPLE, ID_FORM, KY_CUSTOMER, NO_LENGTH_SAMPLE,KY_SAMPLE_UNIT)
			ON(TARGET.ID_CUSTOMER_SAMPLE = SOURCE.ID_CUSTOMER_SAMPLE)
			WHEN MATCHED 
			THEN
				UPDATE-- ADM.C_CUSTOMER_SAMPLES
				   SET  --ID_FORM = SOURCE.ID_FORM,
			    		KY_CUSTOMER = SOURCE.KY_CUSTOMER,
						NO_LENGTH_SAMPLE = SOURCE.NO_LENGTH_SAMPLE,
						KY_SAMPLE_UNIT = SOURCE.KY_SAMPLE_UNIT,
			    		DT_UPDATE =@DT_SYSTEM,
			    		KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
			    		NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM

			WHEN NOT MATCHED BY TARGET THEN
			-- WE UPDATE THE REGISTER ON THE TABLE PRD.K_USERS_SCALING

				INSERT(ID_FORM, KY_CUSTOMER, NO_LENGTH_SAMPLE, KY_SAMPLE_UNIT, DT_CREATION,KY_USER_APP_CREATION,NM_PROGRAM_CREATE )
				VALUES(SOURCE.ID_FORM, SOURCE.KY_CUSTOMER, SOURCE.NO_LENGTH_SAMPLE, SOURCE.KY_SAMPLE_UNIT, @DT_SYSTEM ,@PIN_KY_USER_APP , @PIN_NM_PROGRAM )

			WHEN NOT MATCHED BY SOURCE AND TARGET.ID_FORM = @PIN_ID_FORM THEN DELETE;



			MERGE PRD.C_FORM_PRODUCTION_LINE AS target
			USING(
					SELECT @PIN_ID_FORM,
						  PL.ID_PRODUCTION_LINE,
						  PL.ID_FORM_PRODUCTION_LINE
					FROM (
						SELECT 
							x.ref.value('@ID_PRODUCTION_LINE', 'INT') ID_PRODUCTION_LINE,
							x.ref.value('@ID_FORM_PRODUCTION_LINE', 'INT') ID_FORM_PRODUCTION_LINE
						FROM @PIN_KY_PRODUCTION_LINE_XML.nodes('/PRODUCTION_LINES/LINE') x(ref)
					) PL
				)AS SOURCE (ID_FORM, ID_PRODUCTION_LINE, ID_FORM_PRODUCTION_LINE)
			ON(TARGET.ID_FORM_PRODUCTION_LINE = SOURCE.ID_FORM_PRODUCTION_LINE)
			WHEN MATCHED 
			THEN
				UPDATE
				   SET
			    		ID_PRODUCTION_LINE = SOURCE.ID_PRODUCTION_LINE,
			    		DT_UPDATE =@DT_SYSTEM,
			    		KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
			    		NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM

			WHEN NOT MATCHED BY TARGET THEN
			-- WE UPDATE THE REGISTER ON THE TABLE PRD.K_USERS_SCALING

				INSERT(ID_FORM, ID_PRODUCTION_LINE, DT_CREATION,KY_USER_APP_CREATION,NM_PROGRAM_CREATE )
				VALUES(SOURCE.ID_FORM, SOURCE.ID_PRODUCTION_LINE, @DT_SYSTEM ,@PIN_KY_USER_APP , @PIN_NM_PROGRAM )

			WHEN NOT MATCHED BY SOURCE AND TARGET.ID_FORM = @PIN_ID_FORM THEN DELETE;

		END

		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, CAST(@PIN_ID_FORM AS NVARCHAR(10)), 'ID_FORM')		
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
			
	END CATCH
END

