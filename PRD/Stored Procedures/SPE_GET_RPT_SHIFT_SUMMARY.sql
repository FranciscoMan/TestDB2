-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Julio Díaz
-- CREATE date: 02/25/2019
-- Description: Get the report of the production summary between shifts
-- =============================================


CREATE PROCEDURE    [PRD].[SPE_GET_RPT_SHIFT_SUMMARY] 
	@PIN_DT_INITIAL DATE
	, @PIN_DT_FINAL DATE

AS
BEGIN
	DECLARE @DT_SYSTEM DATETIME = GETDATE()

	CREATE TABLE #T_QA27(
		ID_QA27 INT
		, ID_WORK_ORDER INT
		, ID_PRODUCTION_LINE INT
		, ID_SHIFT INT
		, KY_SHIFT_TIME NVARCHAR(10)
		, KY_SHIFT NVARCHAR(10)
		, NO_SHIFT INT
		, DT_INITIAL_QA27 DATETIME
		, DT_FINAL_QA27 DATETIME
		, NO_MINUTES_LAST INT
		, NO_MINUTES_DOWN_TIME INT
		, NO_MINUTES_LOST_TIME INT
		, NO_PRODUCED_LBS INT
		, NO_AVG_WEIGHT DECIMAL(13,4) DEFAULT (0)
		, NO_SUM_QUANTITY INT DEFAULT (0)
	)

	CREATE TABLE #T_QA27_LINE_RATE(
		ID_QA27 INT
		, ID_K_FORM INT
		, ID_PRODUCTION_LINE INT
		, DT_INITIAL_QA27 DATETIME
		, DT_FINAL_QA27 DATETIME
		, DT_FORM_CLOSED DATETIME
		, DT_NEXT_FORM_CLOSED DATETIME
		, NO_LBS_PER_HOUR DECIMAL(13,4)
		, NO_MINUTES_LAST INT
		, NO_MINUTES_DOWN_TIME INT DEFAULT (0)
		, NO_MINUTES_LOST_TIME INT DEFAULT (0)
		, NO_PRODUCED_LBS DECIMAL(13,4)
		, KY_ORIGIN NVARCHAR(20)
	)


	-- SE DETERMINAN LOS REGISTROS QA27 QUE SERÁN CONSIDERADOS EN LA CONSULTA

	INSERT INTO #T_QA27 (
		ID_QA27
		, ID_WORK_ORDER
		, ID_PRODUCTION_LINE
		, ID_SHIFT
		, KY_SHIFT_TIME
		, KY_SHIFT
		, NO_SHIFT
		, DT_INITIAL_QA27
		, DT_FINAL_QA27
	)
	SELECT KQ.ID_QA27
		, KQ.ID_WORK_ORDER
		, KS.ID_PRODUCTION_LINE
		, KQ.ID_SHIFT
		, REPLACE(KS.KY_SHIFT_TIME, 'SF-', '')
		, VCS.KY_SHIFT
		, (YEAR(KQ.DT_INITIAL_TIME) * 100000) + (MONTH(KQ.DT_INITIAL_TIME) * 1000) + (DAY(KQ.DT_INITIAL_TIME) * 10) + CASE WHEN VCS.KY_SHIFT = 'SF-1' THEN 0 ELSE 1 END
		, KQ.DT_INITIAL_TIME
		, ISNULL(KQ.DT_FINAL_TIME, @DT_SYSTEM)
	FROM PRD.K_QA27 KQ
		INNER JOIN PRD.K_SHIFT KS
			ON KQ.ID_SHIFT = KS.ID_SHIFT
		INNER JOIN ADM.VW_C_SHIFT VCS
			ON KQ.DT_INITIAL_TIME BETWEEN DATETIMEFROMPARTS(YEAR(KQ.DT_INITIAL_TIME), MONTH(KQ.DT_INITIAL_TIME), DAY(KQ.DT_INITIAL_TIME), DATEPART(HOUR, VCS.TS_START_SHIFT), DATEPART(MINUTE, VCS.TS_START_SHIFT), DATEPART(SECOND, VCS.TS_START_SHIFT), 0) AND DATEADD(HOUR, CAST(VCS.NO_SHIFT_TIME AS INT), DATETIMEFROMPARTS(YEAR(KQ.DT_INITIAL_TIME), MONTH(KQ.DT_INITIAL_TIME), DAY(KQ.DT_INITIAL_TIME), DATEPART(HOUR, VCS.TS_START_SHIFT), DATEPART(MINUTE, VCS.TS_START_SHIFT), DATEPART(SECOND, VCS.TS_START_SHIFT), 0))
	WHERE CAST(KQ.DT_INITIAL_TIME AS DATE) BETWEEN @PIN_DT_INITIAL AND @PIN_DT_FINAL
	ORDER BY KQ.DT_INITIAL_TIME


	-- SE ACTUALIZA EL TURNO QUE CORRESPONDA CON BASE EN LA MAYORÍA DE LOS TURNOS RECLAMADOS
	; WITH T_SHIFT_KEY_GROUPED AS (
		SELECT ROW_NUMBER() OVER (PARTITION BY NO_SHIFT ORDER BY NO_SHIFT, COUNT(1) DESC) NO_ROW
			, NO_SHIFT
			, KY_SHIFT_TIME
		FROM #T_QA27 TQ
		GROUP BY NO_SHIFT, KY_SHIFT_TIME
	)

	UPDATE TQ
	SET KY_SHIFT_TIME = TSKG.KY_SHIFT_TIME
	FROM T_SHIFT_KEY_GROUPED TSKG
		INNER JOIN #T_QA27 TQ
			ON TSKG.NO_SHIFT = TQ.NO_SHIFT
			AND NO_ROW = 1


	-- SE BUSCA LA PRIMER FORMA DE SOC CAPTURADA ANTES DE QUE EMPEZARA A CORRER LA QA27
	; WITH T_FIRST_FORM_BEFORE AS (
		SELECT ROW_NUMBER() OVER (PARTITION BY TQ.ID_QA27 ORDER BY TQ.ID_QA27 ASC, KF.DT_CLOSED DESC) AS NO_ROW
			, TQ.ID_QA27
			, TQ.DT_FINAL_QA27
			, TQ.DT_INITIAL_QA27
			, KF.ID_K_FORM
			, KF.DT_CLOSED
			, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]','DECIMAL(13,4)') AS NO_LBS_PER_HOUR
			, KF.ID_PRODUCTION_LINE
		FROM #T_QA27 TQ
			INNER JOIN PRD.K_FORM KF
				ON TQ.ID_PRODUCTION_LINE = KF.ID_PRODUCTION_LINE
				AND KF.DT_CLOSED < TQ.DT_INITIAL_QA27
				AND KF.KY_STATUS_FORM = 'CAPTURED'
			INNER JOIN ADM.C_BRANCH_PLANT CBP	
				ON KF.ID_BRANCH_PLANT = CBP.ID_BRANCH_PLANT
			INNER JOIN PRD.K_FORM_METRICS KFM
				ON KFM.ID_K_FORM = KF.ID_K_FORM
				AND KFM.ID_METRICS = CBP.ID_LBS_PER_HOUR_METRIC
	)
	INSERT INTO #T_QA27_LINE_RATE (
		ID_QA27
		, ID_K_FORM
		, DT_INITIAL_QA27
		, DT_FINAL_QA27
		, DT_FORM_CLOSED
		, NO_LBS_PER_HOUR
		, ID_PRODUCTION_LINE
		, KY_ORIGIN
	)
	SELECT ID_QA27
		, ID_K_FORM
		, DT_INITIAL_QA27
		, DT_FINAL_QA27
		, DT_INITIAL_QA27
		, NO_LBS_PER_HOUR
		, ID_PRODUCTION_LINE
		, 'FIRST BEFORE' AS KY_ORIGIN
	FROM T_FIRST_FORM_BEFORE TFFB
	WHERE NO_ROW = 1


	-- SE INSERTAN TODAS LAS FORMAS SOC QUE SE CAPTURARON DURANTE LA VIDA DEL REGISTRO DE LA QA27
	INSERT INTO #T_QA27_LINE_RATE (
		ID_QA27
		, ID_K_FORM
		, DT_INITIAL_QA27
		, DT_FINAL_QA27
		, DT_FORM_CLOSED
		, NO_LBS_PER_HOUR
		, ID_PRODUCTION_LINE
		, KY_ORIGIN
	)
	SELECT TQLR.ID_QA27
		, KF.ID_K_FORM
		, TQLR.DT_INITIAL_QA27
		, TQLR.DT_FINAL_QA27
		, KF.DT_CLOSED
		, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]','DECIMAL(13,4)') AS NO_LBS_PER_HOUR
		, KF.ID_PRODUCTION_LINE
		, 'WITHIN QA27' AS KY_ORIGIN
	FROM #T_QA27_LINE_RATE TQLR
		INNER JOIN PRD.K_FORM KF
			ON TQLR.ID_QA27 = KF.ID_QA27
			AND KF.KY_PROCESS_TYPE = 'PROCESS'
			AND KF.KY_STATUS_FORM = 'CAPTURED'
		INNER JOIN ADM.C_BRANCH_PLANT CBP
			ON CBP.ID_BRANCH_PLANT = KF.ID_BRANCH_PLANT
		INNER JOIN PRD.K_FORM_METRICS KFM
			ON CBP.ID_LBS_PER_HOUR_METRIC = KFM.ID_METRICS
			AND KFM.ID_K_FORM = KF.ID_K_FORM


	-- SE ACTUALIZA LA FECHA DE TÉRMINO DEL FORMULARIO CON BASEN EN LA FECHA DE CAPTURA DEL SIGUIENTE FORMULARIO
	; WITH T_NEXT_FORM AS (
		SELECT ID_K_FORM
			, ID_QA27
			, ISNULL(LEAD(DT_FORM_CLOSED) OVER (PARTITION BY ID_QA27 ORDER BY ID_QA27, TQLR.DT_FORM_CLOSED), TQLR.DT_FINAL_QA27) AS DT_NEXT_FORM_CLOSED
		FROM #T_QA27_LINE_RATE TQLR
	)

	UPDATE TQLR
	SET DT_NEXT_FORM_CLOSED = TNF.DT_NEXT_FORM_CLOSED
		, NO_MINUTES_LAST = DATEDIFF(MINUTE, TQLR.DT_FORM_CLOSED, TNF.DT_NEXT_FORM_CLOSED)
	FROM T_NEXT_FORM TNF
		INNER JOIN #T_QA27_LINE_RATE TQLR
			ON TNF.ID_K_FORM = TQLR.ID_K_FORM
			AND TNF.ID_QA27 = TQLR.ID_QA27

	CREATE TABLE #T_ISSUES(
		ID_ISSUE INT
		, ID_QA27 INT
		, ID_WORK_ORDER INT
		, ID_PRODUCTION_LINE INT
		, ID_PROBLEM_AREA INT
		, ID_PROBLEM_CODE INT
		, DS_SYMPTOM NVARCHAR(300)
		, XML_POSITIONS_INVOLVED XML
		, KY_USER_INVOLVED NVARCHAR(50)
		, DS_ISSUE_EXPLANATION_OPEN NVARCHAR(300)
		, DT_ISSUE DATETIME
		, FG_CONFIRMED BIT
		, DT_CONFIRMED DATETIME
		, ID_DEFECT_CATEGORY INT
		, DS_EXPLANATION_EVENT_CLOSED NVARCHAR(500)
		, DT_ISSUE_CLOSED DATETIME
		, KY_STATUS NVARCHAR(40)
		, NO_TIME_BEFORE_HELP INT
		, FG_LINE_DOWN BIT
	)

	-- SE BUSCAN TODOS LOS TIEMPOS IMPRODUCTIVOS QUE SE ENCUENTRAN EN EL PERIODO DE TIEMPO DETERMINADO POR LOS PARÁMETROS DE ENTRADA DEL PROCEDIMIENTO
	INSERT INTO #T_ISSUES (
		ID_ISSUE
		, ID_QA27
		, ID_WORK_ORDER
		, ID_PRODUCTION_LINE
		, ID_PROBLEM_AREA
		, ID_PROBLEM_CODE
		, DS_SYMPTOM
		, XML_POSITIONS_INVOLVED
		, KY_USER_INVOLVED
		, DS_ISSUE_EXPLANATION_OPEN
		, DT_ISSUE
		, FG_CONFIRMED
		, DT_CONFIRMED
		, ID_DEFECT_CATEGORY
		, DS_EXPLANATION_EVENT_CLOSED
		, DT_ISSUE_CLOSED
		, KY_STATUS
		, NO_TIME_BEFORE_HELP
		, FG_LINE_DOWN
	)
	SELECT ID_ISSUE
		, ID_QA27
		, ID_WORK_ORDER
		, ID_PRODUCTION_LINE
		, ID_PROBLEM_AREA
		, ID_PROBLEM_CODE
		, DS_SYMPTOM
		, XML_POSITIONS_INVOLVED
		, KY_USER_INVOLVED
		, DS_ISSUE_EXPLANATION_OPEN
		, DT_ISSUE
		, FG_CONFIRMED
		, DT_CONFIRMED
		, ID_DEFECT_CATEGORY
		, DS_EXPLANATION_EVENT_CLOSED
		, ISNULL(DT_ISSUE_CLOSED, @DT_SYSTEM)
		, KY_STATUS
		, NO_TIME_BEFORE_HELP
		, FG_LINE_DOWN
	FROM PRD.K_ISSUE KI
	WHERE CAST(DT_ISSUE AS DATE) BETWEEN @PIN_DT_INITIAL AND @PIN_DT_FINAL
		OR CAST(ISNULL(KI.DT_ISSUE_CLOSED, @DT_SYSTEM) AS DATE) BETWEEN @PIN_DT_INITIAL AND @PIN_DT_FINAL
		OR @PIN_DT_INITIAL BETWEEN CAST(KI.DT_ISSUE AS DATE) AND CAST(ISNULL(KI.DT_ISSUE_CLOSED, @DT_SYSTEM) AS DATE)
	ORDER BY ID_PRODUCTION_LINE, DT_ISSUE

	-- SE BUSCA EL TIEMPO DE VIDA DE CADA EVENTO DE TIEMPO CAÍDO PARA DETERMINAR CUÁNTO TIEMPO HA SIDO PRODUCTIVA CADA QA27
	; WITH T_DOWN_TIME_SOC AS (
		-- SE BUSCAN LOS EVENTOS DE TIEPO CAIDO PARA CADA PERIODO DE TIEMPO DE LA QA27
		SELECT TQLR.ID_PRODUCTION_LINE
			, TQLR.ID_QA27
			, TQLR.ID_K_FORM
			, TQLR.DT_FORM_CLOSED
			--, DATEDIFF(MINUTE
			--		, CASE WHEN TI.DT_ISSUE < TQLR.DT_FORM_CLOSED THEN TQLR.DT_FORM_CLOSED ELSE TI.DT_ISSUE END
			--		, CASE WHEN TI.DT_ISSUE_CLOSED > TQLR.DT_NEXT_FORM_CLOSED THEN TQLR.DT_NEXT_FORM_CLOSED ELSE TI.DT_ISSUE_CLOSED END
			--	) AS NO_MINUTES_DOWN_TIME ---- REVISAR LAS FECHAS DE INICIO Y TÉRMINO DEL TIEMPO MUERTO PARA QUE EMPATE SEGÚN EL REGISTRO DE LA QA27
			, CASE WHEN TI.FG_LINE_DOWN = 1 THEN
				 DATEDIFF(MINUTE
					, CASE WHEN TI.DT_ISSUE < TQLR.DT_FORM_CLOSED THEN TQLR.DT_FORM_CLOSED ELSE TI.DT_ISSUE END
					, CASE WHEN TI.DT_ISSUE_CLOSED > TQLR.DT_NEXT_FORM_CLOSED THEN TQLR.DT_NEXT_FORM_CLOSED ELSE TI.DT_ISSUE_CLOSED END
				) 
			ELSE 0 END AS NO_MINUTES_DOWN_TIME ---- REVISAR LAS FECHAS DE INICIO Y TÉRMINO DEL TIEMPO MUERTO PARA QUE EMPATE SEGÚN EL REGISTRO DE LA QA27
			, CASE WHEN TI.FG_LINE_DOWN = 0 THEN
				DATEDIFF(MINUTE
				, CASE WHEN TI.DT_ISSUE < TQLR.DT_FORM_CLOSED THEN TQLR.DT_FORM_CLOSED ELSE TI.DT_ISSUE END
				, CASE WHEN TI.DT_ISSUE_CLOSED > TQLR.DT_NEXT_FORM_CLOSED THEN TQLR.DT_NEXT_FORM_CLOSED ELSE TI.DT_ISSUE_CLOSED END
			) 
			ELSE 0 END AS NO_MINUTES_LOST_TIME ---- REVISAR LAS FECHAS DE INICIO Y TÉRMINO DEL TIEMPO MUERTO PARA QUE EMPATE SEGÚN EL REGISTRO DE LA QA27
		FROM #T_QA27_LINE_RATE TQLR
			INNER JOIN #T_ISSUES TI
				ON TI.ID_PRODUCTION_LINE = TQLR.ID_PRODUCTION_LINE
				--AND TI.FG_LINE_DOWN = 1
				AND (TI.DT_ISSUE BETWEEN TQLR.DT_FORM_CLOSED AND TQLR.DT_NEXT_FORM_CLOSED
					OR TI.DT_ISSUE_CLOSED BETWEEN TQLR.DT_FORM_CLOSED AND TQLR.DT_NEXT_FORM_CLOSED
					OR TQLR.DT_FORM_CLOSED BETWEEN TI.DT_ISSUE AND TI.DT_ISSUE_CLOSED
				)
	), T_SUM_DOWN_TIME_MINUTES AS (
		-- SE AGRUPA POR FORMULARIO Y POR QA27 PARA CALCULAR EL TOTAL DE TIEMPO CAÍDO PARA CADA PERIODO DE TIEMPO DETERMINADO POR EL FORMULARIO Y LA QA27
		SELECT ID_PRODUCTION_LINE
			, ID_QA27
			, ID_K_FORM
			, SUM(NO_MINUTES_DOWN_TIME) AS NO_SUM_DOWN_TIME_MINUTES
			, SUM(NO_MINUTES_LOST_TIME) AS NO_SUM_LOST_TIME_MINUTES
		FROM T_DOWN_TIME_SOC
		GROUP BY ID_PRODUCTION_LINE, ID_QA27, ID_K_FORM
	)

	UPDATE TQLR
	SET NO_MINUTES_DOWN_TIME = TSDTM.NO_SUM_DOWN_TIME_MINUTES
		, NO_MINUTES_LOST_TIME = TSDTM.NO_SUM_LOST_TIME_MINUTES
	FROM #T_QA27_LINE_RATE TQLR
		INNER JOIN T_SUM_DOWN_TIME_MINUTES TSDTM
			ON TSDTM.ID_K_FORM = TQLR.ID_K_FORM
			AND TSDTM.ID_QA27 = TQLR.ID_QA27
			AND TSDTM.ID_PRODUCTION_LINE = TQLR.ID_PRODUCTION_LINE


	-- SE CALCULA LA CANTIDAD DE LIBRAS PRODUCIDAS PARA CADA FORMULARIO DE CADA QA27
	UPDATE #T_QA27_LINE_RATE SET NO_PRODUCED_LBS = (NO_MINUTES_LAST - NO_MINUTES_DOWN_TIME) * NO_LBS_PER_HOUR / 60


	-- SE CALCULA EL TOTAL DEL TIEMPO DE PRODUCCIÓN, TIEMPO CAÍDO Y LIBRAS PRODUCIDAS
	; WITH T_LINE_RATE_GROUPED AS (
		SELECT ID_QA27
			, SUM(NO_PRODUCED_LBS) AS NO_SUM_PRODUCED_LBS
			, SUM(NO_MINUTES_LAST) AS NO_SUM_MINUTES_LAST
			, SUM(NO_MINUTES_DOWN_TIME) AS NO_SUM_MINUTES_DOWN_TIME
			, SUM(NO_MINUTES_LOST_TIME) AS NO_SUM_MINUTES_LOST_TIME
		FROM #T_QA27_LINE_RATE TQLR
		GROUP BY ID_QA27
	)

	UPDATE TQ
	SET NO_MINUTES_LAST = TLRG.NO_SUM_MINUTES_LAST
		, NO_MINUTES_DOWN_TIME = TLRG.NO_SUM_MINUTES_DOWN_TIME
		, NO_MINUTES_LOST_TIME = TLRG.NO_SUM_MINUTES_LOST_TIME
		, NO_PRODUCED_LBS = TLRG.NO_SUM_PRODUCED_LBS
	FROM #T_QA27 TQ
		INNER JOIN T_LINE_RATE_GROUPED TLRG
			ON TQ.ID_QA27 = TLRG.ID_QA27

	-- SE BUSCA LAS MEDICIONES REALIZADAS A LOS SKIDS DE CADA REGISTRO QA27 PARA DETERMINARL EL PROMEDIO DEL PESO DE LA PIEZA ASÍ COMO LA SUMA DE LA CANTIDAD DE PIEZAS POR SKID SALVADO
	; WITH T_GROUPED_WEIGHT AS (
		SELECT TQ.ID_QA27
			, AVG(KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,4)')) AS NO_AVG_WEIGHT
			, SUM(KP.NO_QUANTITY) AS NO_SUM_QUANTITY
		FROM PRD.K_FORM KF
			INNER JOIN #T_QA27 TQ
				ON KF.ID_QA27 = TQ.ID_QA27
				AND KF.KY_PROCESS_TYPE = 'MANUFACTURE'
				AND KF.KY_STATUS_FORM = 'CAPTURED'
			INNER JOIN PRD.K_PALLET KP
				ON KP.ID_PALLET = KF.ID_PALLET
			INNER JOIN ADM.VW_C_PALLET_STATUS VCPS
				ON VCPS.KY_PALLET_STATUS = KP.KY_STATUS
				AND VCPS.FG_FOR_SAVE = 1
			INNER JOIN ADM.C_BRANCH_PLANT CBP
				ON KF.ID_BRANCH_PLANT = CBP.ID_BRANCH_PLANT
			INNER JOIN PRD.K_FORM_METRICS KFM
				ON KF.ID_K_FORM = KFM.ID_K_FORM
				AND KFM.ID_METRICS = CBP.ID_WEIGHT_METRIC
		GROUP BY TQ.ID_QA27
	)
	UPDATE TQ
	SET NO_AVG_WEIGHT = TGW.NO_AVG_WEIGHT
		, NO_SUM_QUANTITY = TGW.NO_SUM_QUANTITY
	FROM #T_QA27 TQ
		INNER JOIN T_GROUPED_WEIGHT TGW
			ON TQ.ID_QA27 = TGW.ID_QA27

	SELECT ID_PRODUCTION_LINE, KY_SHIFT_TIME
		, SUM(NO_MINUTES_LAST) / 60.0 AS NO_SUM_MINUTES_LAST
		, SUM(NO_MINUTES_DOWN_TIME) / 60.0 AS NO_SUM_MINUTES_DOWN_TIME
		, SUM(NO_MINUTES_LOST_TIME) / 60.0 AS NO_SUM_MINUTES_LOST_TIME
		, SUM(NO_PRODUCED_LBS) AS NO_SUM_PRODUCED_LBS
		, SUM(NO_AVG_WEIGHT * NO_SUM_QUANTITY) AS NO_SUM_SAVED_LBS
		, CASE WHEN SUM(NO_PRODUCED_LBS) > 0 THEN SUM(NO_AVG_WEIGHT * NO_SUM_QUANTITY) / SUM(NO_PRODUCED_LBS) * 100 ELSE 0 END AS NO_SAVING_RATE
	FROM #T_QA27 TQ
	GROUP BY ID_PRODUCTION_LINE, KY_SHIFT_TIME
	ORDER BY ID_PRODUCTION_LINE, KY_SHIFT_TIME
 
	IF(@PIN_DT_INITIAL IS NOT NULL)
	BEGIN
	DROP TABLE #T_QA27
	DROP TABLE #T_QA27_LINE_RATE
	DROP TABLE #T_ISSUES
	END
	ELSE
	PRINT 'Error performing the operation'


END

