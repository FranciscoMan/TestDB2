-- ================================================================
-- Proyecto: Plaskolite v2
-- Copyright (c) - Vitek - 2019
-- Author: DELLC, Daniel RM, Jose Donaldo Luna 
-- CREATE date: 08/2/2019
-- Description: GET SHIFT REPORT V.2 (DATETIME AND PRODUCTION_LINE)
-- ================================================================
CREATE PROCEDURE    [PRD].[SPE_GET_SHIFT_REPORT_V2_PER_LINE]
	 @ENDT DATETIME, -- DATA REQUIRED
	 @ID_PRODUCTION_LINE INT  -- DATA REQUIRED

AS
BEGIN

	DECLARE @INIT DATETIME
	 SET @INIT = DATEADD(HOUR, -12, @ENDT)
	  --@ENDT = '04/8/2019 12:00:00'
	 /* se almacenan los valores en una tabla temporal para utilizarlos en posteriores operaciones
		Este extrae el running time bruto sin descontar los eventos inproductivos*/

	 IF OBJECT_ID('tempdb..#RUNNING_HRS') IS NOT NULL
	   DROP TABLE #RUNNING_HRS
	CREATE TABLE #RUNNING_HRS(
	ID_QA27 INT,
	ID_WORK_ORDER INT,
	ID_PRODUCTION_LINE INT,
	DT_INITIAL_TIME DATETIME,
	DT_FINAL_TIME DATETIME,
	MIN_DURATION_HOURS INT,
	NM_MATERIAL VARCHAR(200),
	ID_ITEM INT,
	NM_ITEM VARCHAR(200),
	NO_QTY_SKID FLOAT,
	NO_RUN_QTY INT,
	NO_POUNDS FLOAT,
	NO_WIDTH FLOAT,
	NO_BOX_QTY INT)
	;WITH running_hrs
	as
 	(SELECT Q.ID_QA27, W.ID_WORK_ORDER, W.ID_PRODUCTION_LINE,  Q.DT_INITIAL_TIME, Q.DT_FINAL_TIME, 
	DATEDIFF(MINUTE, Q.DT_INITIAL_TIME, Q.DT_FINAL_TIME) AS MIN_DURATION, W.NM_MATERIAL, W.ID_ITEM
	,W.NM_ITEM, W.NO_QTY_SKID, W.NO_RUN_QTY, W.NO_POUNDS, W.NO_WIDTH, W.NO_BOX_QTY FROM PRD.K_QA27 Q
	INNER JOIN PRD.K_WORK_ORDER W ON Q.ID_WORK_ORDER = W.ID_WORK_ORDER  WHERE 
	ID_PRODUCTION_LINE =@ID_PRODUCTION_LINE AND
	DT_QA27 BETWEEN @INIT AND @ENDT)

 INSERT INTO #RUNNING_HRS SELECT * FROM running_hrs
  --Finaliza el almacenamiento de los valores para running time bruto

 ---- CALIZ DESEPERACION

 	 IF OBJECT_ID('tempdb..#DESES') IS NOT NULL
    DROP TABLE #DESES
	CREATE TABLE #DESES(
	TOTAL_L INT,
	DT_ENDT DATETIME)

	INSERT INTO #DESES(TOTAL_L, DT_ENDT) SELECT SUM(DATEDIFF(MINUTE, DT_INITIAL_TIME, DT_FINAL_TIME)), @ENDT
	FROM PRD.K_QA27 Q INNER JOIN PRD.K_WORK_ORDER W ON Q.ID_WORK_ORDER = W.ID_WORK_ORDER  WHERE 
	W.ID_PRODUCTION_LINE = @ID_PRODUCTION_LINE AND
	DT_QA27 BETWEEN @INIT AND @ENDT
 /*Tabla temporal para almacenar los eventos inproductivos y posteriormente
 realizar operaciones*/
IF OBJECT_ID('tempdb..#EVENTS') IS NOT NULL
    DROP TABLE #EVENTS

CREATE TABLE #EVENTS(
ID_ISSUE INT,
ID_WORK_ORDER INT,
ID_PRODUCTION_LINE INT,
FG_LINE_DOWN BIT,
DT_ISSUE DATETIME,
DT_ISSUE_CLOSED DATETIME, 
MIN_DURATION INT)
-- events unproductives
;WITH events_unproductive
AS (SELECT KI.ID_ISSUE, KI.ID_WORK_ORDER, KI.ID_PRODUCTION_LINE,   KI.FG_LINE_DOWN, KI.DT_ISSUE, KI.DT_ISSUE_CLOSED, 
 DATEDIFF(MINUTE, KI.DT_ISSUE, KI.DT_ISSUE_CLOSED) AS MIN_DURATION  FROM PRD.K_ISSUE  KI WHERE
  KI.DT_ISSUE  BETWEEN @ENDT AND @INIT OR @ENDT BETWEEN KI.DT_ISSUE AND KI.DT_ISSUE_CLOSED
   AND KI.ID_PRODUCTION_LINE = @ID_PRODUCTION_LINE)

  
INSERT INTO #EVENTS SELECT * FROM events_unproductive
-- FInaliza el almacenamiento de los eventos inproductivos

/*Tabla temporar para realizar el calculo de las horas que realmente estuvo trabajando la linea
 restando unicamente los que se encuentran en lostime*/
IF OBJECT_ID('tempdb..#real_production_times') IS NOT NULL
    DROP TABLE #real_production_times
create table #real_production_times(
running_time INT,)

INSERT INTO #real_production_times(running_time)  SELECT D.TOTAL_L - (E.MIN_DURATION) FROM #DESES D 
INNER JOIN #EVENTS E ON E.ID_PRODUCTION_LINE = 2211009



-- Fin de la operacion para calcular el tiempo real de trabajo

--Tabla temporal para almacenar el LINE_RATE
IF OBJECT_ID('tempdb..#LINE_RATE') IS NOT NULL
    DROP TABLE #LINE_RATE
CREATE TABLE #LINE_RATE(
ID_PRODUCTION_LINE INT,
DT_CREATION DATETIME,
DT_CLOSED DATETIME,
LINE_RATE VARCHAR(10)
)


-- LINE RATE 
;WITH line_rate

AS (SELECT KF.ID_PRODUCTION_LINE, KF.DT_CREATION, KF.DT_CLOSED
	, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'varchar(10)') AS LINE_RATE

FROM  PRD.K_FORM KF
INNER JOIN PRD.K_FORM_METRICS KFM
			ON KF.ID_K_FORM = KFM.ID_K_FORM
			AND KF.KY_PROCESS_TYPE IN ('PROCESS')
			AND KF.KY_STATUS_FORM = 'CAPTURED'
			AND KFM.ID_METRICS=66
			
			WHERE(KF.DT_CREATION  BETWEEN @INIT AND @ENDT OR 
	  @INIT BETWEEN KF.DT_CREATION AND KF.DT_CLOSED)
	  AND KF.ID_PRODUCTION_LINE = @ID_PRODUCTION_LINE)

INSERT INTO #LINE_RATE SELECT TOP 1 * FROM line_rate
-- Fin de tabla temporal LINE_RATE

-- Tabla temporal que extraera generara las libras extruidas

IF OBJECT_ID('tempdb..#extruded_lbs') IS NOT NULL
    DROP TABLE #extruded_lbs
	CREATE TABLE #extruded_lbs(
	libras_extruidas DECIMAL(13,4),
	ID_PRODUCTION_LINE INT)
INSERT INTO #extruded_lbs(libras_extruidas, ID_PRODUCTION_LINE) SELECT ((LR.LINE_RATE * D.TOTAL_L) /60.00), ID_PRODUCTION_LINE =  LR.ID_PRODUCTION_LINE
 FROM #DESES D
INNER JOIN #LINE_RATE LR ON LR.ID_PRODUCTION_LINE = @ID_PRODUCTION_LINE
-- Fin tabla temporal para generar libras extruidas
-- calculo de las libras producidas
IF OBJECT_ID('tempdb..#PRODUCED_LBS') IS NOT NULL
    DROP TABLE #PRODUCED_LBS
create table #PRODUCED_LBS(
    ID_PALLET INT, 
	ID_WORK_ORDER INT, 
	NO_PALLET INT, 
	ID_QA27 INT, 
	DT_INITIAL_TIME DATETIME, 
	DT_FINAL_OPERATION_TIME DATETIME, 
	KY_STATUS VARCHAR(20),
    MIN_DURATION INT,
    LBS FLOAT,
	ID_PRODUCTION_LINE INT)

;WITH pallet_lbs

AS (SELECT P.ID_PALLET, P.ID_WORK_ORDER, NO_PALLET, ID_QA27, DT_INITIAL_TIME, DT_FINAL_OPERATION_TIME, P.KY_STATUS,
 DATEDIFF(MINUTE, DT_INITIAL_TIME, DT_FINAL_OPERATION_TIME) AS MIN_DURATION,
 W.NO_POUNDS * P.NO_QUANTITY AS lbs, ID_PRODUCTION_LINE ID_PRODUCTION_LINE
 
 FROM PRD.K_PALLET P INNER JOIN 
 PRD.K_WORK_ORDER W ON W.ID_WORK_ORDER = P.ID_WORK_ORDER
 AND W.ID_PRODUCTION_LINE = @ID_PRODUCTION_LINE
 
 WHERE(DT_INITIAL_TIME  BETWEEN @INIT AND @ENDT OR 
	  @INIT BETWEEN DT_INITIAL_TIME AND DT_FINAL_OPERATION_TIME)
	  AND P.KY_STATUS = 'ACCEPTED'
	  AND P.ID_WORK_ORDER = W.ID_WORK_ORDER)

INSERT INTO #PRODUCED_LBS SELECT * FROM pallet_lbs

--SELECT RESULT = SUM(LBS) FROM #LBS_SKIDS WHERE ID_PRODUCTION_LINE = @ID_PRODUCTION_LINE
-- fin de calculo de libras producidas

--SUMATORIA DE LBS
IF OBJECT_ID('tempdb..#TOTAL_LBS') IS NOT NULL
    DROP TABLE #TOTAL_LBS 
	CREATE TABLE #TOTAL_LBS(
	LB_TOTAL FLOAT,
	ID_PRODUCTION_LINE INT)

INSERT INTO #TOTAL_LBS SELECT SUM(LBS), ID_PRODUCTION_LINE = @ID_PRODUCTION_LINE FROM #PRODUCED_LBS

-- Calculo de las libras salvadas (Saving_rate)

IF OBJECT_ID('tempdb..#Saving_rate') IS NOT NULL
    DROP TABLE #Saving_rate
	CREATE TABLE #Saving_rate(
	libras_salvadas DECIMAL(13,4))
	
INSERT INTO #Saving_rate SELECT (TL.LB_TOTAL) / (EL.libras_extruidas)
FROM #extruded_lbs EL
LEFT JOIN #TOTAL_LBS TL ON TL.LB_TOTAL = TL.LB_TOTAL

/*vARIABLE PARA ALMACENAR LOS VALORES Y REALIZAR LOS CALCULOS RESPECTIVOS
PARA LA CONSULTA*/
DECLARE @RUNNING_HRS FLOAT,
		@EVENT INT,
		@TOTAL_RUN FLOAT,
		@LINE_RATE VARCHAR(200),
		@LBS_EXTRUD DECIMAL(13,4),
		@SAVE_RATE DECIMAL(13,4)
SELECT @RUNNING_HRS = MIN_DURATION_HOURS FROM #RUNNING_HRS
SELECT @EVENT = MIN_DURATION FROM #EVENTS
SELECT @LINE_RATE = LINE_RATE FROM #LINE_RATE
SET @LBS_EXTRUD = (@LINE_RATE * @RUNNING_HRS)/ 60 -- LIBRAS EXTRUIDAS
SELECT @SAVE_RATE = (LB_TOTAL / @LBS_EXTRUD) FROM #TOTAL_LBS --SAVING RATE
IF(@EVENT = NULL)
SET @TOTAL_RUN = @RUNNING_HRS
/*FIN DE VARIABLES PARA ALAMCENAR Y REALIZAR CALCULOS.*/

--------------- CONSULTA DE PRUEBA--------------------------------------------
	SELECT 
	QA.ID_WORK_ORDER
	  ,WO.ID_PRODUCTION_LINE
	  ,QA.KY_SHIFT
	  ,QA.NM_LEADMAN
	  ,QA.KY_USER_APP_CREATION
	  ,WO.NM_MATERIAL
	  ,WO.ID_ITEM
	  ,WO.NM_ITEM 
	  ,WO.NO_QTY_SKID
	  ,WO.NO_RUN_QTY
	  ,WO.NO_POUNDS
	  ,WO.NO_WIDTH
	  , WO.NO_BOX_QTY
	  , TLBS.LB_TOTAL AS PRODUCED_LBS
	  ,QA.DT_INITIAL_TIME
	  ,QA.DT_FINAL_TIME
	  ,@RUNNING_HRS AS RUNNING_HOURS -- RUNNING_HOURS
	  ,ISU.DS_EXPLANATION_EVENT_CLOSED
	  ,@LINE_RATE AS LINE_RATE--LINE_RATE
	  ,@LBS_EXTRUD AS EXTRUDED_LBS--EXTRUDED_LBS
	  ,@SAVE_RATE AS SAVING_RATE--  SAVING_RATE
FROM PRD.K_QA27 QA
LEFT JOIN #RUNNING_HRS RN ON RN.ID_QA27 = QA.ID_QA27
	LEFT JOIN PRD.K_WORK_ORDER WO ON WO.ID_WORK_ORDER = QA.ID_WORK_ORDER
	LEFT JOIN #TOTAL_LBS TLBS ON TLBS.LB_TOTAL = TLBS.LB_TOTAL
	LEFT JOIN PRD.K_ISSUE ISU ON ISU.ID_WORK_ORDER = QA.ID_WORK_ORDER
	AND ISU.ID_WORK_ORDER = WO.ID_WORK_ORDER  WHERE 
	DT_QA27 BETWEEN @INIT AND @ENDT
	AND WO.ID_PRODUCTION_LINE = @ID_PRODUCTION_LINE
	AND WO.ID_WORK_ORDER = QA.ID_WORK_ORDER
	ORDER BY WO.ID_PRODUCTION_LINE
	END

-----------------------------------------------------------------------------------------------
------------------[Scrips de pruebas]-------------------
				--SELECT * FROM #EVENTS				--
				--SELECT * FROM #RUNNING_HRS	--SE TIENE QUE SUMAR-- SE DEJO POR DESES
				--SELECT * FROM #real_production_times --FALTA SUMAR--
				--SELECT * FROM #LINE_RATE			--	
				--SELECT * FROM #extruded_lbs --CONVETIR A HORAS--
				--SELECT * FROM #PRODUCED_LBS			--
				--SELECT * FROM #Saving_rate			--
				--SELECT * FROM #TOTAL_LBS			--
				--SELECT *  FROM #DESES				--

