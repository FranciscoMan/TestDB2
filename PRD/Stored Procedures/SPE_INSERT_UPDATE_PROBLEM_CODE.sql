-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Juan De Dios Pérez
-- CRETAE date: 16/03/2017
-- Description: Insert or update a problem code
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_INSERT_UPDATE_PROBLEM_CODE] 
    	    @XML_RESULT XML = '' OUT ,    -- --0 TO ERROR AND 1 TO CORRECT
			@PIN_ID_PROBLEM_CODE AS int = NULL,
			@PIN_KY_PROBLEM_CODE AS nvarchar(50) = NULL,
			@PIN_NM_PROBLEM_CODE AS nvarchar(300) = NULL,
			@PIN_FG_ACTIVE AS BIT = NULL,
			@PIN_ID_BRANCH_PLANT AS int = NULL,
			@PIN_KY_CODE_TYPE AS nvarchar(50) = NULL,
			@PIN_ID_PROBLEM_AREA AS int = NULL,
			@PIN_FG_CAN_SKIP_WO AS BIT = NULL,
			@PIN_XML_AUTORIZED_USER_CODES XML=NULL,
			@PIN_XML_CODE_POSITIONS XML=NULL
		  , @PIN_KY_USER_APP_CREATE AS nvarchar(50)
		  , @PIN_KY_USER_APP_UPDATE AS nvarchar(50)
		  , @PIN_NM_PROGRAM_CREATE AS nvarchar(50)
		  , @PIN_NM_PROGRAM_UPDATE AS nvarchar(50)
		  , @PIN_TYPE_TRANSACTION CHAR(1) --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
	,@DT_SYSTEM DATETIME = GETDATE()

    	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	
		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION='I'
	    	BEGIN
			--WE INSERT THE REGISTER ON THE TABLE  ADM.C_POSITION
			INSERT INTO [PRD].[C_PROBLEM_CODE]
					   ( 
						  [KY_PROBLEM_CODE]
						, [NM_PROBLEM_CODE]
						, [FG_ACTIVE]
						, [ID_BRANCH_PLANT]
						, [KY_CODE_TYPE]
						, [ID_PROBLEM_AREA]
						, FG_CAN_SKIP_WO
						, [DT_CREATION]
						, [KY_USER_APP_CREATION]
						, [NM_PROGAM_CREATE]
					)
			VALUES
					     (@PIN_KY_PROBLEM_CODE
						, @PIN_NM_PROBLEM_CODE
						, @PIN_FG_ACTIVE
						, @PIN_ID_BRANCH_PLANT
						, @PIN_KY_CODE_TYPE
						, @PIN_ID_PROBLEM_AREA
						, @PIN_FG_CAN_SKIP_WO
						, @DT_SYSTEM
						, @PIN_KY_USER_APP_CREATE
						, @PIN_NM_PROGRAM_CREATE
					)	
					

      SET @PIN_ID_PROBLEM_CODE = SCOPE_IDENTITY();


	 INSERT INTO [PRD].[K_POSITION_SCALING]
           ([ID_PROBLEM_CODE]
		   ,[ID_FORM]
           ,[ID_POSITION]
           ,[KY_LEVEL_TYPE]
		   ,[NO_TIME_HOLD_ON]
           ,[DT_CREATION]
           ,[KY_USER_APP_CREATION]
           ,[NM_PROGAM_CREATE]
			)
	SELECT      @PIN_ID_PROBLEM_CODE,
				NULL,
				d.value('@ID_POSITION', 'INT') AS ID_POSITION,
				d.value('@KY_LEVEL_TYPE', 'NVARCHAR(10)') AS KY_LEVEL_TYPE,
				30,
				@DT_SYSTEM,
				@PIN_KY_USER_APP_CREATE,
				@PIN_NM_PROGRAM_CREATE
	FROM @PIN_XML_AUTORIZED_USER_CODES.nodes('CODES/POSITIONS/POSITION') AS T(d)


	INSERT INTO [PRD].[C_CODES_POSITION_ALERT]
           ([ID_PROBLEM_CODE]
		   ,[ID_POSITION]
           ,[DT_CREATION]
           ,[KY_USER_APP_CREATION]
           ,[NM_PROGRAM_CREATE]
			)
	SELECT      @PIN_ID_PROBLEM_CODE,
				d.value('@ID_POSITION', 'INT') AS ID_POSITION,
				@DT_SYSTEM,
				@PIN_KY_USER_APP_CREATE,
				@PIN_NM_PROGRAM_CREATE
	FROM @PIN_XML_CODE_POSITIONS.nodes('POSITIONS_CODES/POSITION_CODE') AS T(d)

							
		END 
		ELSE
		BEGIN
			-- WE UPDATE THE REGISTER ON THE TABLE [PRD].[C_PROBLEM_CODE] 

			UPDATE [PRD].[C_PROBLEM_CODE] 
			SET
   				  [KY_PROBLEM_CODE] =@PIN_KY_PROBLEM_CODE
				, [NM_PROBLEM_CODE]=@PIN_NM_PROBLEM_CODE
				, [FG_ACTIVE]=@PIN_FG_ACTIVE
				, [ID_BRANCH_PLANT]=@PIN_ID_BRANCH_PLANT
				, [KY_CODE_TYPE]=@PIN_KY_CODE_TYPE
				, [ID_PROBLEM_AREA]=@PIN_ID_PROBLEM_AREA
				, FG_CAN_SKIP_WO = @PIN_FG_CAN_SKIP_WO
				, [DT_UPDATE] =@DT_SYSTEM
				, [KY_USER_APP_UPDATE] = @PIN_KY_USER_APP_UPDATE
				, [NM_PROGRAM_UPDATE] = @PIN_NM_PROGRAM_UPDATE
			WHERE [ID_PROBLEM_CODE] = @PIN_ID_PROBLEM_CODE


			MERGE [PRD].[K_POSITION_SCALING] AS target
		USING(
				SELECT DISTINCT ID_POSITION_SCALING,ID_PROBLEM_CODE, ID_POSITION, KY_LEVEL_TYPE
				FROM (
					SELECT 
						d.value('@ID_POSITION_SCALING', 'INT') AS ID_POSITION_SCALING,
						d.value('@ID_PROBLEM_CODE', 'INT') AS ID_PROBLEM_CODE,
						d.value('@ID_POSITION', 'INT') AS ID_POSITION,
						d.value('@KY_LEVEL_TYPE', 'NVARCHAR(20)') AS KY_LEVEL_TYPE
					FROM @PIN_XML_AUTORIZED_USER_CODES.nodes('CODES/POSITIONS/POSITION') AS T(d)
				) AS POSITION_CODES
			) AS source (ID_POSITION_SCALING,ID_PROBLEM_CODE, ID_POSITION, KY_LEVEL_TYPE)
		ON (target.ID_POSITION_SCALING = source.ID_POSITION_SCALING)
		WHEN MATCHED THEN
			UPDATE SET 
					  ID_PROBLEM_CODE=source.ID_PROBLEM_CODE, 
					  ID_POSITION=source.ID_POSITION,
					  KY_LEVEL_TYPE =source.KY_LEVEL_TYPE,
					  [DT_UPDATE] =@DT_SYSTEM
					, [KY_USER_APP_UPDATE] = @PIN_KY_USER_APP_UPDATE
					, [NM_PROGRAM_UPDATE] = @PIN_NM_PROGRAM_UPDATE
		WHEN NOT MATCHED  THEN
		INSERT (ID_PROBLEM_CODE, ID_POSITION, KY_LEVEL_TYPE , [DT_CREATION], [KY_USER_APP_CREATION], [NM_PROGAM_CREATE])
		VALUES (Source.ID_PROBLEM_CODE, Source.ID_POSITION, source.KY_LEVEL_TYPE,@DT_SYSTEM, @PIN_KY_USER_APP_CREATE, @PIN_NM_PROGRAM_CREATE )
		WHEN NOT MATCHED BY SOURCE AND target.ID_PROBLEM_CODE = @PIN_ID_PROBLEM_CODE THEN DELETE;


		---------****************************************
		
			--SELECT 
			--			--d.value('@ID_POSITION_CODE', 'INT') AS ID_POSITION_CODE,
			--			@PIN_ID_PROBLEM_CODE AS ID_PROBLEM_CODE,
			--			d.value('@ID_POSITION', 'INT') AS ID_POSITION
			--		FROM @PIN_XML_CODE_POSITIONS.nodes('POSITIONS/POSITION') AS T(d)

		

		MERGE [PRD].[C_CODES_POSITION_ALERT] AS target
		USING(
				SELECT DISTINCT ID_POSITION_CODE,ID_PROBLEM_CODE,ID_POSITION
				FROM (
					SELECT 
						d.value('@ID_POSITION_CODE', 'INT') AS ID_POSITION_CODE,
						@PIN_ID_PROBLEM_CODE AS ID_PROBLEM_CODE,
						d.value('@ID_POSITION', 'INT') AS ID_POSITION
					FROM @PIN_XML_CODE_POSITIONS.nodes('POSITIONS_CODES/POSITION_CODE') AS T(d)
				) AS POSITION_CODES
			) AS source (ID_POSITION_CODE,ID_PROBLEM_CODE, ID_POSITION)

		ON (target.ID_POSITION_CODE = source.ID_POSITION_CODE)
		WHEN MATCHED THEN
			UPDATE SET 
					  ID_PROBLEM_CODE=source.ID_PROBLEM_CODE, 
					  ID_POSITION=source.ID_POSITION,
					  [DT_UPDATE] =@DT_SYSTEM
					, [KY_USER_APP_UPDATE] = @PIN_KY_USER_APP_UPDATE
					, [NM_PROGRAM_UPDATE] = @PIN_NM_PROGRAM_UPDATE
		WHEN NOT MATCHED  THEN
		INSERT (ID_PROBLEM_CODE, ID_POSITION,  [DT_CREATION], [KY_USER_APP_CREATION], [NM_PROGRAM_CREATE])
		VALUES (Source.ID_PROBLEM_CODE, Source.ID_POSITION, @DT_SYSTEM, @PIN_KY_USER_APP_CREATE, @PIN_NM_PROGRAM_CREATE )
		WHEN NOT MATCHED BY SOURCE AND target.ID_PROBLEM_CODE = @PIN_ID_PROBLEM_CODE THEN DELETE;

									
		END
		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT = ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250) = ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
			
	END CATCH
END

