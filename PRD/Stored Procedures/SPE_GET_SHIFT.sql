	-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Javier Díaz Barrón
-- CREATE date: 02/05/2017
-- Description: get all Shift
-- =============================================
-- MODIFY: 16/06/2018 Change
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_GET_SHIFT] 

	 @PIN_ID_SHIFT		INT = NULL
	,@PIN_KY_SHIFT		NVARCHAR(50) = NULL
	,@PIN_ID_PRODUCTION_LINE	INT = NULL
	,@PIN_ID_BRANCH_PLANT		INT = NULL
	,@PIN_KY_USER				NVARCHAR(50) =NULL
	,@PIN_FG_STATUS				BIT = NULL
AS	
BEGIN

;WITH TB_BE_WO AS (
	SELECT WO_BEFORE.ID_ITEM AS ID_ITEM_LAST_WO, 
		WO_BEFORE.ID_PRODUCTION_LINE, 
		WO_BEFORE.ID_WORK_ORDER,
		LAST_FORM_PROCESS.DT_FORM,
		LAST_FORM_PROCESS.ID_ITEM ID_ITEM_LAST_READING 

	FROM(
		SELECT ROW_NUMBER() OVER (PARTITION BY WO.ID_PRODUCTION_LINE ORDER BY WO.DT_CLOSE_WORK_ORDER DESC) AS  ROW_WO,
		WO.NO_ORDER,
		WO.ID_PRODUCTION_LINE,
		WO.ID_ITEM,
		WO.DT_CLOSE_WORK_ORDER,
		WO.ID_WORK_ORDER
		  FROM PRD.K_WORK_ORDER WO
		 WHERE WO.KY_STATUS = 'COMPLETE'
		) WO_BEFORE
		LEFT JOIN (
			SELECT PROCESS.DT_FORM,
				   PROCESS.ID_PRODUCTION_LINE,
				   PROCESS.ID_ITEM

			FROM
			(		
					SELECT ROW_NUMBER() OVER(PARTITION BY KF.ID_PRODUCTION_LINE ORDER BY KF.DT_FORM DESC) AS ROW_ID,
							KWO.ID_ITEM, 
							KF.ID_PRODUCTION_LINE,
							KF.DT_FORM
						    FROM PRD.K_FORM KF 
							JOIN PRD.K_WORK_ORDER KWO ON KF.ID_WORK_ORDER = KWO.ID_WORK_ORDER
						   WHERE KF.KY_PROCESS_TYPE = 'PROCESS' 
							 --AND KY_STATUS_FORM = 'CAPTURED' 
			)PROCESS
			WHERE PROCESS.ROW_ID = 1
		) LAST_FORM_PROCESS ON  WO_BEFORE.ID_PRODUCTION_LINE = LAST_FORM_PROCESS.ID_PRODUCTION_LINE
		WHERE WO_BEFORE.ROW_WO = 1
		  AND (@PIN_ID_PRODUCTION_LINE IS NULL OR (@PIN_ID_PRODUCTION_LINE IS NOT NULL AND WO_BEFORE.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE))
	)
	--;WITH TB_WO AS 
	,TB_WO AS 
	(
		SELECT * FROM PRD.K_WORK_ORDER WO WHERE WO.KY_STATUS='RUNNING'
	), TB_CURRENT_ISSUE AS 
	(
		SELECT WO.ID_PRODUCTION_LINE ,COUNT(1) NO_ISSUES
		FROM PRD.K_ISSUE KI
		INNER JOIN TB_WO WO ON WO.ID_WORK_ORDER = KI.ID_WORK_ORDER	
		WHERE KI.KY_STATUS ='CREATED'
		GROUP BY  WO.ID_PRODUCTION_LINE		
	), TB_IPS_PRODUCTION_LINE AS 
	(
		SELECT ROW_NUMBER() OVER(PARTITION BY ID_PRODUCTION_LINE ORDER BY ID_PRODUCTION_LINE_IP) ROWNUMBER
	           , CIP.NO_IP
			   , CIP.ID_PRODUCTION_LINE
 	      FROM PRD.C_PRODUCTION_LINE_IP CIP
	)
		
	SELECT
		 ID_SHIFT	 
		,KY_SHIFT
		,KS.ID_PRODUCTION_LINE
		,KS.ID_BRANCH_PLANT	
		,KY_USER
		,FG_STATUS
		,DT_START_SHIFT
		,DT_END_SHIFT   
		,ISNULL(dbo.F_GET_TIME_ELAPSED(NULL,KS.ID_PRODUCTION_LINE,'LINE'),0) TIME_ELAPSED_LAST_FORM
		,CASE WHEN CI.NO_ISSUES IS NULL THEN 'RUNNING' ELSE 'LOST_TIME' END KY_STATUS
		--,ISNULL((SELECT TOP 1 KF.DT_FORM FROM PRD.K_FORM KF WHERE KF.KY_PROCESS_TYPE = 'PROCESS' AND KY_STATUS_FORM = 'CAPTURED' AND KF.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE ORDER BY KF.DT_FORM DESC), GETDATE()) DT_LAST_FORM
		,ISNULL(BWO.DT_FORM, GETDATE()) DT_LAST_FORM  ----CHANGE TYPE GET LAST FORM
		--,CAST(ISNULL(BWO.FG_CHANGE_ITEM,0) AS BIT) FG_CHANGE_ITEM
		, CASE WHEN BWO.ID_ITEM_LAST_WO  IS NOT NULL
					AND WO.ID_ITEM != BWO.ID_ITEM_LAST_WO 
					AND WO.ID_ITEM != BWO.ID_ITEM_LAST_READING
			   THEN CAST(1 AS BIT) 
			   WHEN BWO.ID_ITEM_LAST_WO  IS NOT NULL
					AND WO.ID_ITEM != BWO.ID_ITEM_LAST_WO 
					AND WO.ID_ITEM = BWO.ID_ITEM_LAST_READING
				THEN CAST(0 AS BIT) 
			   ELSE CAST(0 AS BIT) END
			AS FG_CHANGE_ITEM
		, IPS.NO_IP
	FROM PRD.K_SHIFT KS
	JOIN PRD.K_WORK_ORDER WO ON WO.ID_PRODUCTION_LINE = KS.ID_PRODUCTION_LINE AND WO.KY_STATUS = 'RUNNING' AND KS.KY_USER IS NOT NULL
	LEFT JOIN TB_CURRENT_ISSUE CI ON CI.ID_PRODUCTION_LINE = KS.ID_PRODUCTION_LINE
	LEFT JOIN TB_BE_WO BWO ON KS.ID_PRODUCTION_LINE = BWO.ID_PRODUCTION_LINE
	LEFT JOIN TB_IPS_PRODUCTION_LINE IPS ON IPS.ID_PRODUCTION_LINE = KS.ID_PRODUCTION_LINE AND IPS.ROWNUMBER = 1
	WHERE 
		(@PIN_ID_SHIFT IS NULL OR (@PIN_ID_SHIFT IS NOT NULL AND ID_SHIFT = @PIN_ID_SHIFT))  AND 
		(@PIN_KY_SHIFT IS NULL OR (@PIN_KY_SHIFT IS NOT NULL AND KY_SHIFT = @PIN_KY_SHIFT))  AND 
		(@PIN_ID_PRODUCTION_LINE IS NULL OR (@PIN_ID_PRODUCTION_LINE IS NOT NULL AND KS.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE))  AND 
		(@PIN_ID_BRANCH_PLANT IS NULL OR (@PIN_ID_BRANCH_PLANT IS NOT NULL AND KS.ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT))  AND 
		(@PIN_KY_USER IS NULL OR (@PIN_KY_USER IS NOT NULL AND KY_USER = @PIN_KY_USER))  AND 	
		(@PIN_FG_STATUS IS NULL OR (@PIN_FG_STATUS IS NOT NULL AND KS.FG_STATUS = @PIN_FG_STATUS))  --AND 
		--EXISTS(SELECT TOP 1 1 FROM  PRD.C_LINE_METRIC WHERE ID_PRODUCTION_LINE =KS.ID_PRODUCTION_LINE )
		

END

