-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Julio Tavares
-- CRETAE date: 18/07/2018
-- Description: Insert or update k_form
-- =============================================
CREATE PROCEDURE [PRD].[SPE_INSERT_UPDATE_K_FORM_INSPECTION_SKID] 
		  @XML_RESULT XML = '' OUT    -- --0 TO ERROR AND 1 TO CORRECT
		, @PIN_ID_K_FORM INT =NULL
		, @PIN_ID_BRANCH_PLANT INT =NULL
	    , @PIN_ID_FORM INT =NULL
		, @PIN_ID_WORK_ORDER INT =NULL
		, @PIN_ID_PRODUCTION_LINE INT= NULL		
		, @PIN_INSPECTION_SKID INT =NULL	
		, @PIN_KY_STATUS_FORM NVARCHAR(50) = NULL
		, @PIN_KY_PROCESS_TYPE NVARCHAR(50) = NULL
		, @PIN_KY_USER_APP NVARCHAR(50) 
		, @PIN_NM_PROGAM NVARCHAR(50) 
	  	, @PIN_TYPE_TRANSACTION CHAR(1)  --I=INSERT   U=UPDATE

AS 
BEGIN  
   	BEGIN TRY
		----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
		DECLARE @V_EXIST_TRAN BIT = 0			
			, @ID_K_FORM INT
			, @XML_DATA XML
			, @DT_SYSTEM DATETIME = GETDATE()
			, @V_ID_PALLET INT = NULL
			, @V_ID_QA27 INT = NULL
			, @V_ID_WORK_ORDER INT = NULL
			, @V_NO_PALLET INT = NULL
			,@ID_BP INT = NULL

		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION 
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	
		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION = 'I' 
		BEGIN

			SELECT TOP 1 @ID_BP = ID_BRANCH_PLANT 
		FROM PRD.K_WORK_ORDER
		WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER

			SELECT TOP 1 @V_ID_PALLET =KP.ID_PALLET
						,@V_ID_QA27 = KP.ID_QA27
			  FROM PRD.K_PALLET KP
			  JOIN PRD.K_INSPECTION_SKID KIS ON KP.NO_PALLET = KIS.NO_PALLET AND KP.ID_WORK_ORDER = KIS.ID_WORK_ORDER
			 WHERE KIS.ID_INSPECTION_SKID = @PIN_INSPECTION_SKID
				--KP.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
			   --AND KP.NO_PALLET = @PIN_NO_PALLET

			INSERT INTO PRD.K_FORM (
				ID_BRANCH_PLANT
				, ID_FORM
				, ID_WORK_ORDER
				, ID_PALLET
				, ID_QA27
				, ID_PRODUCTION_LINE
				, ID_INSPECTION_SKID--, ID_PALLET
				, DT_FORM
				, KY_STATUS_FORM
				, KY_PROCESS_TYPE
				, DT_CREATION
				, KY_USER_APP_CREATION
				, NM_PROGAM_CREATE
			)
			VALUES (
				@ID_BP
				, @PIN_ID_FORM
				, @PIN_ID_WORK_ORDER
				, @V_ID_PALLET
				, @V_ID_QA27
				, @PIN_ID_PRODUCTION_LINE
				, @PIN_INSPECTION_SKID
				, @DT_SYSTEM
				, 'CREATED'
				, @PIN_KY_PROCESS_TYPE
				, @DT_SYSTEM
				, @PIN_KY_USER_APP
				, @PIN_NM_PROGAM
			)	
					 
			SELECT @ID_K_FORM = SCOPE_IDENTITY()
						
		END 
		ELSE 
			BEGIN
		
			IF EXISTS ( SELECT * FROM PRD.K_FORM WHERE ID_K_FORM = @PIN_ID_K_FORM AND KY_PROCESS_TYPE = 'QUALITY')
			BEGIN
					
				SELECT TOP 1
						@V_ID_WORK_ORDER = KF.ID_WORK_ORDER
					   ,@V_NO_PALLET = KIS.NO_PALLET
						-- KF.ID_WORK_ORDER
						--,KIS.NO_PALLET
				FROM PRD.K_FORM KF
				JOIN PRD.K_INSPECTION_SKID KIS ON KF.ID_INSPECTION_SKID = KIS.ID_INSPECTION_SKID
				WHERE ID_K_FORM = @PIN_ID_K_FORM--2021

				SELECT TOP 1 @V_ID_PALLET = KP.ID_PALLET
					  , @V_ID_QA27 = KP.ID_QA27
				  FROM PRD.K_PALLET KP
				  WHERE KP.NO_PALLET = @V_NO_PALLET
				    AND KP.ID_WORK_ORDER = @V_ID_WORK_ORDER 

--				SELECT @V_ID_PALLET, @V_ID_QA27

				--UPDATE PRD.K_FORM 
				--   SET ID_QA27 = @V_ID_QA27
				--	  ,ID_PALLET = @V_ID_PALLET
				--  WHERE ID_K_FORM = @PIN_ID_K_FORM
					
			END

				UPDATE PRD.K_FORM 
				SET ID_BRANCH_PLANT=CASE WHEN @ID_BP IS NULL THEN ID_BRANCH_PLANT ELSE @ID_BP END
					, ID_FORM = CASE WHEN @PIN_ID_FORM IS NULL THEN ID_FORM ELSE @PIN_ID_FORM END
					, ID_WORK_ORDER = CASE WHEN @PIN_ID_WORK_ORDER IS NULL THEN ID_WORK_ORDER ELSE @PIN_ID_WORK_ORDER END
					, ID_QA27 = CASE WHEN ID_QA27 IS NULL THEN  @V_ID_QA27 ELSE ID_QA27 END
					, ID_PALLET = CASE WHEN ID_PALLET IS NULL THEN  @V_ID_PALLET ELSE ID_PALLET END
					, ID_PRODUCTION_LINE = CASE WHEN @PIN_ID_PRODUCTION_LINE IS NULL THEN ID_PRODUCTION_LINE ELSE @PIN_ID_PRODUCTION_LINE  END
					, ID_INSPECTION_SKID = CASE WHEN @PIN_INSPECTION_SKID IS NULL THEN ID_INSPECTION_SKID ELSE @PIN_INSPECTION_SKID  END
					, KY_STATUS_FORM = CASE WHEN @PIN_KY_STATUS_FORM IS NULL THEN KY_STATUS_FORM ELSE @PIN_KY_STATUS_FORM END
					, DT_CLOSED = CASE WHEN @PIN_KY_STATUS_FORM IS NOT NULL AND @PIN_KY_STATUS_FORM = 'CAPTURED' THEN @DT_SYSTEM ELSE DT_CLOSED END
					, DT_UPDATE = @DT_SYSTEM
					, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
					, NM_PROGRAM_UPDATE = @PIN_NM_PROGAM
				WHERE ID_K_FORM = @PIN_ID_K_FORM
	 		END

		SET @XML_DATA = (SELECT @ID_K_FORM AS '@ID_K_FORM' FOR XML PATH('FORM'))

		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER (@@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES (@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES (@XML_RESULT, 'Successful Process', 'EN')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES (@XML_RESULT, ISNULL(CAST(@ID_K_FORM AS NVARCHAR(10)), ''), 'ID_K_FORM')		
		SET @XML_RESULT = DBO.F_ERROR_INSERT_DATA (@XML_RESULT, @XML_DATA)
		
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	

	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register' + ' - ' + @ERROR_MESSAGE)
		
			
	END CATCH
END

