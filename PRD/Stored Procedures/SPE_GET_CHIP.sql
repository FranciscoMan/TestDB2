-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2018
-- Author: Gabriel Vázquez Torres
-- CREATE date: 11/06/2018
-- Description: get w.o(CHIP). to time table
-- =============================================
-- 09/19/2018 JDR The code block that calculates the pounds saved for work orders has been rewritten
-- 12/05/2018 JDR Change the initial datetime to be 6 hours before the current time when the @PIN_DT_INITIAL_DATE parameter is null
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_GET_CHIP]	
	@PIN_DT_INITIAL_DATE AS DATETIME = NULL,
	@PIN_ID_WORK_ORDER AS INT = NULL

AS   
BEGIN		

	DECLARE @PIN_DT_FINAL_DATE DATETIME
		, @V_DT_RUNNING_CLOSE_DATE DATETIME
		, @V_ID_PRODUCTION_LINE AS INT = null
		, @V_ID_PRODUCTION_LINE_NEXT AS INT = null
		, @V_NO_ASSIGNED_TIME AS INT
		, @V_DT_START_WORK_ORDER AS DATETIME
		, @V_DT_CLOSE_WORK_ORDER AS DATETIME
		, @cnt INT
		, @cnt_total INT
		, @ID_CHARACTERISTIC_WEIGHT INT = (SELECT TOP 1 ID_WEIGHT_METRIC FROM ADM.C_BRANCH_PLANT WHERE ID_BRANCH_PLANT = 1)
		, @XML_PRODUCTION_LINES XML
		, @PIN_DT_INITIAL_SHIFT DATETIME
		, @DT_SIX_HOURS_BEFORE DATETIME
		, @DT_SYSTEM DATETIME = GETDATE()
	
	DECLARE @TB_TIME_TABLE_DATE AS TABLE (
		ID_TIME_TABLE_DATE INT
		, ID_WORK_ORDER INT
		, ID_PRODUCTION_LINE INT
		, DT_WORK_ORDER DATETIME
		, NO_ASSIGNED_TIME INT
		, DT_START_WORK_ORDER DATETIME NULL
		, DT_CLOSE_WORK_ORDER DATETIME NULL
		, KY_STATUS NVARCHAR(50)
	)

	SET @XML_PRODUCTION_LINES = (
		SELECT ID_PRODUCTION_LINE AS "@ID_PRODUCTION_LINE"
		FROM PRD.C_PRODUCTION_LINE
		FOR XML PATH('PRODUCTION_LINE'), ROOT('PRODUCTION_LINES')
	)

	IF @PIN_ID_WORK_ORDER IS NOT NULL BEGIN
		SET @PIN_DT_INITIAL_DATE = (SELECT CASE WHEN DT_START_WORK_ORDER IS NULL THEN DT_WORK_ORDER ELSE DT_START_WORK_ORDER END FROM PRD.K_WORK_ORDER WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER)
		SET @PIN_DT_INITIAL_DATE = (DATEADD(MI, (-1) * DATEPART(MI,@PIN_DT_INITIAL_DATE), @PIN_DT_INITIAL_DATE))
		SET @PIN_DT_INITIAL_DATE = (DATEADD(SS, (-1) * DATEPART(SS,@PIN_DT_INITIAL_DATE), @PIN_DT_INITIAL_DATE))
		SET @PIN_DT_INITIAL_DATE = (DATEADD(MS, (-1) * DATEPART(MS,@PIN_DT_INITIAL_DATE), @PIN_DT_INITIAL_DATE))
	END

	IF @PIN_DT_INITIAL_DATE IS NULL	BEGIN
		SET @DT_SIX_HOURS_BEFORE = DATEADD(HOUR, -6, @DT_SYSTEM)
		SET @PIN_DT_INITIAL_DATE = DATETIMEFROMPARTS(YEAR(@DT_SIX_HOURS_BEFORE), MONTH(@DT_SIX_HOURS_BEFORE), DAY(@DT_SIX_HOURS_BEFORE), DATEPART(HOUR, @DT_SIX_HOURS_BEFORE), 0, 0, 0)
		--SELECT @PIN_DT_INITIAL_DATE = CAST(CAST(GETDATE() AS DATE) AS NVARCHAR(10)) + ' ' + VS.INITIAL_SHIFT_TIME
		--FROM ADM.VW_C_SHIFT VS
		--WHERE (
		--		VS.INITIAL_SHIFT_TIME > VS.FINAL_SHIFT_TIME
		--		AND CAST(GETDATE() AS TIME) BETWEEN VS.INITIAL_SHIFT_TIME AND '23:59:59'
		--	) OR (
		--		VS.INITIAL_SHIFT_TIME > VS.FINAL_SHIFT_TIME 
		--		AND CAST(GETDATE() AS TIME) BETWEEN '00:00:00' AND VS.FINAL_SHIFT_TIME
		--	) OR (
		--		CAST(GETDATE() AS TIME) BETWEEN VS.INITIAL_SHIFT_TIME AND VS.FINAL_SHIFT_TIME
		--	)			
	END
	--* get the final date with the hours of shift
	SELECT TOP 1 @PIN_DT_FINAL_DATE = DATEADD(HOUR, CAST(NO_SHIFT_TIME AS INT), @PIN_DT_INITIAL_DATE) FROM ADM.VW_C_SHIFT 

--*********************************************************************
	DECLARE @XML_SHIFT XML
--*********************************************************************	
	SELECT @XML_SHIFT=(
		SELECT (
				SELECT VS.NM_SHIFT 
				FROM ADM.VW_C_SHIFT VS
				WHERE (VS.INITIAL_SHIFT_TIME > VS.FINAL_SHIFT_TIME AND CAST(@PIN_DT_INITIAL_DATE AS TIME) BETWEEN '00:00:00' AND VS.FINAL_SHIFT_TIME )
					OR (VS.INITIAL_SHIFT_TIME > VS.FINAL_SHIFT_TIME AND CAST(@PIN_DT_INITIAL_DATE AS TIME) BETWEEN VS.INITIAL_SHIFT_TIME AND '23:59:59')
					OR (CAST(@PIN_DT_INITIAL_DATE AS TIME) BETWEEN VS.INITIAL_SHIFT_TIME AND VS.FINAL_SHIFT_TIME)
			) AS "@NM_SHIFT"
			, (
				SELECT CAST(DATEADD(HOUR, CAST(VSH.NO_SHIFT_HOUR -1 AS INT)
					, CAST(@PIN_DT_INITIAL_DATE AS TIME)) AS TIME) AS "@NO_HOUR"
				FROM ADM.VW_C_SHIFT VS, ADM.VW_C_SHIFT_HOURS VSH
				WHERE (VS.INITIAL_SHIFT_TIME > VS.FINAL_SHIFT_TIME AND CAST(@PIN_DT_INITIAL_DATE AS TIME) BETWEEN '00:00:00' AND VS.FINAL_SHIFT_TIME )
					OR (VS.INITIAL_SHIFT_TIME > VS.FINAL_SHIFT_TIME AND CAST(@PIN_DT_INITIAL_DATE AS TIME) BETWEEN VS.INITIAL_SHIFT_TIME AND '23:59:59')
					OR (CAST(@PIN_DT_INITIAL_DATE AS TIME) BETWEEN VS.INITIAL_SHIFT_TIME AND VS.FINAL_SHIFT_TIME)
				FOR XML PATH ('HOUR'),TYPE
			)
		FOR XML PATH('SHIFT') )

--*********************************************************************

	SET @V_DT_RUNNING_CLOSE_DATE = (SELECT CASE WHEN GETDATE() BETWEEN @PIN_DT_INITIAL_DATE AND @PIN_DT_FINAL_DATE THEN GETDATE() ELSE @PIN_DT_FINAL_DATE END)

	; WITH TB_WO_IN_SHIFT AS (
		SELECT 							   
		     WO.ID_WORK_ORDER
		   , WO.ID_PRODUCTION_LINE
		   , WO.NO_ASSIGNED_TIME
		   , WO.DT_WORK_ORDER
		   , WO.DT_START_WORK_ORDER
		   , DATEADD(MI,(WO.NO_ASSIGNED_TIME),WO.DT_START_WORK_ORDER) AS DT_SCHEDULED
		   , CASE WO.KY_STATUS
				WHEN 'RUNNING' THEN @V_DT_RUNNING_CLOSE_DATE
				WHEN 'SKIPPED' THEN KI.DT_ISSUE_CLOSED
				WHEN 'COMPLETE' THEN (CASE WHEN WO.DT_CLOSE_WORK_ORDER > @PIN_DT_FINAL_DATE THEN @PIN_DT_FINAL_DATE ELSE WO.DT_CLOSE_WORK_ORDER END)
				ELSE WO.DT_CLOSE_WORK_ORDER 
			 END AS DT_CLOSE_WORK_ORDER
		   , WO.KY_STATUS
		   , KI.DT_ISSUE_CLOSED
		FROM PRD.K_WORK_ORDER WO 
			LEFT JOIN PRD.K_ISSUE KI 
				ON WO.ID_ISSUE_CAUSE_SKIPPED = KI.ID_ISSUE
		WHERE (
			-- GET WO WITHIN THE SHIFT
			WO.DT_WORK_ORDER BETWEEN @PIN_DT_INITIAL_DATE AND @PIN_DT_FINAL_DATE 
			OR WO.DT_START_WORK_ORDER BETWEEN @PIN_DT_INITIAL_DATE AND @PIN_DT_FINAL_DATE
			-- GET WO CLOSED WITHIN THE SHIFT
			OR WO.DT_CLOSE_WORK_ORDER BETWEEN @PIN_DT_INITIAL_DATE AND @PIN_DT_FINAL_DATE 
			-- GET OPENED WO AND SCHEDULED CLOSED DATETIME WITHIN THE SHIFT
			OR (WO.DT_CLOSE_WORK_ORDER IS NULL AND DATEADD(MINUTE, WO.NO_ASSIGNED_TIME, WO.DT_START_WORK_ORDER) BETWEEN @PIN_DT_INITIAL_DATE AND @PIN_DT_FINAL_DATE) 
			-- GET RUNNING AND SCHEDULED WO
			OR (WO.KY_STATUS IN( 'RUNNING' ,'SCHEDULED') AND WO.DT_CLOSE_WORK_ORDER IS NULL)
			-- GET COMPLETED WO AND RAN THROUGH THE SHIFT
			OR (WO.DT_START_WORK_ORDER < @PIN_DT_INITIAL_DATE AND WO.DT_CLOSE_WORK_ORDER > @PIN_DT_FINAL_DATE AND WO.KY_STATUS = 'COMPLETE' )
			-- GET RUNNING WO
			OR (WO.DT_START_WORK_ORDER < @PIN_DT_INITIAL_DATE AND WO.KY_STATUS = 'RUNNING' )
		)			
	), T_RUNNING_CLOSE_DATE AS(
		SELECT ID_WORK_ORDER
		   , ID_PRODUCTION_LINE
		   , NO_ASSIGNED_TIME
		   , DT_WORK_ORDER
		   , DT_START_WORK_ORDER
		   , DT_CLOSE_WORK_ORDER
		   , KY_STATUS
		   , DT_ISSUE_CLOSED
		   , LAG(DT_CLOSE_WORK_ORDER) OVER(ORDER BY ID_PRODUCTION_LINE,DT_WORK_ORDER) AS DT_RUNNING_CLOSE_DATE
		FROM TB_WO_IN_SHIFT
	), T_SCHEDULED_START_DATE AS (
		SELECT ID_WORK_ORDER
		   , ID_PRODUCTION_LINE
		   , DT_WORK_ORDER
		   , NO_ASSIGNED_TIME
		   , CASE WHEN KY_STATUS = 'SCHEDULED' THEN DT_RUNNING_CLOSE_DATE ELSE DT_START_WORK_ORDER END DT_START_WORK_ORDER
		   , DT_CLOSE_WORK_ORDER
		   , KY_STATUS
		FROM T_RUNNING_CLOSE_DATE
	)
	
	INSERT INTO @TB_TIME_TABLE_DATE
	SELECT 
		ROW_NUMBER() OVER (ORDER BY ID_PRODUCTION_LINE, DT_WORK_ORDER)
		, ID_WORK_ORDER
		, ID_PRODUCTION_LINE
		, DT_WORK_ORDER
		, NO_ASSIGNED_TIME
		, DT_START_WORK_ORDER
		, DT_CLOSE_WORK_ORDER
		, KY_STATUS
	FROM T_SCHEDULED_START_DATE

	SET @cnt = 1
	SET @cnt_total = (SELECT COUNT(1) FROM @TB_TIME_TABLE_DATE T1)


	WHILE @cnt <= @cnt_total BEGIN
   
		SET @V_ID_PRODUCTION_LINE = (SELECT ID_PRODUCTION_LINE FROM @TB_TIME_TABLE_DATE WHERE ID_TIME_TABLE_DATE = @CNT)

		IF @V_ID_PRODUCTION_LINE_NEXT IS NULL
			SET @V_ID_PRODUCTION_LINE_NEXT = (SELECT ID_PRODUCTION_LINE FROM @TB_TIME_TABLE_DATE WHERE ID_TIME_TABLE_DATE = @CNT)

		IF @V_ID_PRODUCTION_LINE != @V_ID_PRODUCTION_LINE_NEXT
			SET  @V_ID_PRODUCTION_LINE_NEXT = @V_ID_PRODUCTION_LINE

		IF EXISTS(SELECT TOP 1 1 FROM @TB_TIME_TABLE_DATE WHERE KY_STATUS = 'SCHEDULED' AND DT_START_WORK_ORDER IS NOT NULL AND ID_PRODUCTION_LINE = @V_ID_PRODUCTION_LINE AND ID_TIME_TABLE_DATE = @CNT) BEGIN
			SET @V_DT_START_WORK_ORDER = (SELECT TOP 1 DT_START_WORK_ORDER FROM @TB_TIME_TABLE_DATE WHERE KY_STATUS = 'SCHEDULED' AND DT_START_WORK_ORDER IS NOT NULL AND DT_CLOSE_WORK_ORDER IS NULL)		
		END

		IF EXISTS(SELECT TOP 1 1 FROM @TB_TIME_TABLE_DATE WHERE KY_STATUS = 'SCHEDULED' AND DT_START_WORK_ORDER IS NOT NULL AND DT_CLOSE_WORK_ORDER IS NULL AND ID_PRODUCTION_LINE = @V_ID_PRODUCTION_LINE AND ID_TIME_TABLE_DATE = @CNT) BEGIN			
			UPDATE @TB_TIME_TABLE_DATE SET DT_CLOSE_WORK_ORDER = DATEADD(MI, NO_ASSIGNED_TIME, DT_START_WORK_ORDER) WHERE ID_TIME_TABLE_DATE = @CNT		
		END

		IF EXISTS(SELECT TOP 1 1 FROM @TB_TIME_TABLE_DATE WHERE KY_STATUS = 'SCHEDULED' AND DT_START_WORK_ORDER IS NULL AND DT_CLOSE_WORK_ORDER IS NULL AND ID_PRODUCTION_LINE = @V_ID_PRODUCTION_LINE AND ID_TIME_TABLE_DATE = @CNT) BEGIN
			SET @V_NO_ASSIGNED_TIME = (SELECT TOP 1 NO_ASSIGNED_TIME FROM @TB_TIME_TABLE_DATE WHERE KY_STATUS = 'SCHEDULED' AND DT_START_WORK_ORDER IS NULL AND DT_CLOSE_WORK_ORDER IS NULL AND ID_PRODUCTION_LINE = @V_ID_PRODUCTION_LINE)
			UPDATE @TB_TIME_TABLE_DATE SET DT_START_WORK_ORDER = @V_DT_START_WORK_ORDER, DT_CLOSE_WORK_ORDER = DATEADD(MI, @V_NO_ASSIGNED_TIME, @V_DT_START_WORK_ORDER) WHERE ID_TIME_TABLE_DATE = @CNT		
		END

		SET @cnt = @cnt + 1
	END


	UPDATE @TB_TIME_TABLE_DATE 
	SET DT_START_WORK_ORDER = @PIN_DT_INITIAL_DATE
		, DT_CLOSE_WORK_ORDER = @PIN_DT_FINAL_DATE 
	WHERE DT_START_WORK_ORDER IS NULL 
		AND DT_CLOSE_WORK_ORDER IS NULL

	DECLARE @T_PRD_LBS TABLE (
		ID_PRODUCTION_LINE INT
		, NO_PRD_LBS DECIMAL(13,2)
		, NO_SVD_LBS DECIMAL(13,2)
	)

	INSERT INTO @T_PRD_LBS (
		ID_PRODUCTION_LINE
		, NO_PRD_LBS
		, NO_SVD_LBS
	)
	SELECT ID_PRODUCTION_LINE
		, NO_PRD_LBS
		, NO_SVD_LBS
	FROM PRD.F_GET_PRODUCED_LBS_PER_LINE (@XML_PRODUCTION_LINES, @PIN_DT_INITIAL_DATE)


	;WITH T_REASIGNACION_FECHAS AS (
	SELECT ID_WORK_ORDER
		, ID_PRODUCTION_LINE
		, DT_WORK_ORDER
		, NO_ASSIGNED_TIME
		, CASE WHEN @PIN_DT_INITIAL_DATE > DT_START_WORK_ORDER THEN @PIN_DT_INITIAL_DATE ELSE DT_START_WORK_ORDER END AS DT_START_WORK_ORDER
		, CASE WHEN DT_CLOSE_WORK_ORDER > @PIN_DT_FINAL_DATE AND KY_STATUS = 'SCHEDULED' THEN @PIN_DT_FINAL_DATE ELSE DT_CLOSE_WORK_ORDER END AS DT_CLOSE_WORK_ORDER
		, @PIN_DT_FINAL_DATE as DT_FINAL_DATE
		, @PIN_DT_INITIAL_DATE  as DT_INITIAL_DATE
		, KY_STATUS
	FROM @TB_TIME_TABLE_DATE
	), T_DATA AS (
		SELECT VWO.ID_WORK_ORDER
			, VWO.ID_PRODUCTION_LINE
			, WO.NO_WORK_ORDER
			, VWO.DT_WORK_ORDER
			, VWO.NO_ASSIGNED_TIME
			, VWO.DT_START_WORK_ORDER
			, VWO.DT_CLOSE_WORK_ORDER
			, VWO.KY_STATUS
			, VWO.DT_FINAL_DATE
			, VWO.DT_INITIAL_DATE
			, ISNULL(dbo.F_GET_SHIFT_MINUTES(GETDATE(),@PIN_DT_INITIAL_DATE,@PIN_DT_FINAL_DATE),0) AS CURRENT_MINUTE
			, DATEDIFF(MI, @PIN_DT_INITIAL_DATE, VWO.DT_START_WORK_ORDER) AS START_WO_MINUTE
			, DATEDIFF(MI, VWO.DT_START_WORK_ORDER, VWO.DT_CLOSE_WORK_ORDER) AS END_WO_MINUTE
			, VS.INITIAL_SHIFT_TIME
			, VS.FINAL_SHIFT_TIME
			, (CAST(VS.NO_SHIFT_TIME AS INT) * 60) SHIFT_MINUTES
			, VS.KY_SHIFT
		FROM T_REASIGNACION_FECHAS VWO
			LEFT JOIN PRD.K_WORK_ORDER WO 
				ON WO.ID_WORK_ORDER = VWO.ID_WORK_ORDER
			LEFT JOIN ADM.VW_C_SHIFT VS 
				ON (VS.INITIAL_SHIFT_TIME > VS.FINAL_SHIFT_TIME AND CAST(@PIN_DT_INITIAL_DATE AS TIME) BETWEEN VS.INITIAL_SHIFT_TIME AND  '23:59:59') 
					OR (VS.INITIAL_SHIFT_TIME > VS.FINAL_SHIFT_TIME AND CAST(@PIN_DT_INITIAL_DATE AS TIME) BETWEEN '00:00:00' AND VS.FINAL_SHIFT_TIME)
					OR (CAST(@PIN_DT_INITIAL_DATE AS TIME) BETWEEN VS.INITIAL_SHIFT_TIME AND VS.FINAL_SHIFT_TIME)
	), TB_DATA2 AS (
		SELECT PL.ID_PRODUCTION_LINE
			, ID_WORK_ORDER		   		   
			, NO_ASSIGNED_TIME
			, NO_WORK_ORDER
			, START_WO_MINUTE
			, CASE WHEN END_WO_MINUTE > SHIFT_MINUTES THEN SHIFT_MINUTES ELSE END_WO_MINUTE END AS END_WO_MINUTE
			, CURRENT_MINUTE
			, KY_STATUS
			, INITIAL_SHIFT_TIME
			, FINAL_SHIFT_TIME
			, SHIFT_MINUTES
			, KY_SHIFT
			, DT_WORK_ORDER		   
			, DT_START_WORK_ORDER
			, DT_CLOSE_WORK_ORDER		   		   		   
			   
		FROM T_DATA PL				
	)
	SELECT PL.ID_PRODUCTION_LINE
		, PL.NM_PRODUCTION_LINE
		, PL.ID_PRODUCTION_LINE_TYPE
		, ID_WORK_ORDER		   		   
		, NO_ASSIGNED_TIME
		, NO_WORK_ORDER
		, START_WO_MINUTE
		, END_WO_MINUTE
		, CURRENT_MINUTE
		, KY_STATUS
		, INITIAL_SHIFT_TIME
		, FINAL_SHIFT_TIME
		, ISNULL(SHIFT_MINUTES, 720) AS SHIFT_MINUTES
		, KY_SHIFT
		, DT_WORK_ORDER		   
		, DT_START_WORK_ORDER
		, DT_CLOSE_WORK_ORDER		   		   		   
		, ISNULL(TPL.NO_SVD_LBS, 0) NO_SAVED_LBS
		, ISNULL(TPL.NO_PRD_LBS, 0) NO_PRODUCED_LBS
		, CASE WHEN ISNULL(TPL.NO_PRD_LBS, 0.0) = 0 THEN 0.0 ELSE CAST(100.0 * ISNULL(TPL.NO_SVD_LBS, 0.0) / ISNULL(TPL.NO_PRD_LBS, 0.0) AS DECIMAL(13,2)) END AS PR_SAVING_RATE
		, @XML_SHIFT XML_SHIFT
		, @PIN_DT_INITIAL_DATE AS DT_INITIAL_PERIOD
		, @PIN_DT_FINAL_DATE AS DT_FINAL_PERIOD
	FROM PRD.C_PRODUCTION_LINE PL
		LEFT JOIN  TB_DATA2 D2 
			ON PL.ID_PRODUCTION_LINE = D2.ID_PRODUCTION_LINE 
				AND D2.END_WO_MINUTE > 0
				AND PL.FG_ACTIVE = 1
		LEFT JOIN @T_PRD_LBS TPL
			ON PL.ID_PRODUCTION_LINE = TPL.ID_PRODUCTION_LINE
	ORDER BY PL.ID_PRODUCTION_LINE_TYPE
		   
END

