-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Javier Diaz Barron
-- CREATE date: 06/04/2017
-- Description: Insert the Notification
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_INSERT_NOTIFICATION] 
	 @XML_RESULT XML = '' OUT --0 TO ERROR AND 1 TO CORRECT
	,@PIN_ID_NOTIFICATION  INT 
	,@PIN_KY_USER NVARCHAR(50)
	,@PIN_KY_PROCESS_TYPE NVARCHAR(10)
	,@PIN_KY_STATUS NVARCHAR(50)
	,@PIN_XML_PROCESS_CONFIGURATION XML
	,@PIN_DT_SENDED DATETIME NULL
	,@PIN_DT_WAITING DATETIME NULL
	,@PIN_DT_CLOSE DATETIME NULL
	,@PIN_ID_BRANCH_PLANT INT= NULL
	,@PIN_ID_NOTIFICATION_REFERENCE INT = NULL
	,@PIN_KY_NOTIFICATION_ORIGIN NVARCHAR(10) = NULL
	,@PIN_KY_CLOSE_TYPE NVARCHAR(10) = NULL
	,@PIN_NO_LEVEL AS INT = NULL
	,@PIN_FG_ATTENDED AS BIT = NULL
	,@PIN_KY_USER_APP_CREATION NVARCHAR(50)
	,@PIN_NM_PROGRAM_CREATION NVARCHAR(50)
	
AS
BEGIN
	--WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0,
			@V_ID_NOTIFICATION INT ,
			@V_FG_INSERT BIT = 1,
			@V_ID_K_FORM INT = NULL
	BEGIN TRY		   			
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	

		
		IF @PIN_KY_PROCESS_TYPE = 'FORM'
			BEGIN
							
				SET @V_ID_K_FORM = (SELECT TOP 1 msgs.msg.value('@KY_VALUE', 'nvarchar(50)') TO_USER FROM @PIN_XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/FORM/PARAMETERS/child::node()') msgs(msg)  WHERE msgs.msg.value('@KY_PARAMETER' , 'nvarchar(max)') = 'idKForm') 

				IF @V_ID_K_FORM IS NOT NULL
				BEGIN
					IF EXISTS(SELECT 1 FROM PRD.K_FORM KF WHERE KF.ID_K_FORM = @V_ID_K_FORM AND KF.KY_STATUS_FORM = 'CREATED' )
						BEGIN
							SET @V_FG_INSERT = 1
						END
					ELSE
						BEGIN
							SET @V_FG_INSERT = 0
						END
				END
			END

		IF @V_FG_INSERT = 1
		BEGIN
			--INSERT THE NOTIFICATION
			INSERT INTO PRD.K_NOTIFICATION_PROCESS (
				KY_USER
				, KY_PROCESS_TYPE
				, KY_STATUS
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, KY_CLOSE_TYPE
				, NO_LEVEL
				, FG_ATTENDED
				, DT_CREATION
				, KY_USER_APP_CREATION
				, NM_PROGAM_CREATE
			)
			SELECT
				 @PIN_KY_USER
				, @PIN_KY_PROCESS_TYPE
				, @PIN_KY_STATUS
				, @PIN_XML_PROCESS_CONFIGURATION
				, 0
				, ''
				, GETDATE()
				, @PIN_DT_SENDED
				, @PIN_DT_WAITING
				, @PIN_DT_CLOSE
				, @PIN_ID_BRANCH_PLANT
				, @PIN_ID_NOTIFICATION_REFERENCE
				, @PIN_KY_NOTIFICATION_ORIGIN
				, @PIN_KY_CLOSE_TYPE
				, @PIN_NO_LEVEL
				, 0
				, GETDATE()			
				, @PIN_KY_USER_APP_CREATION			
				, @PIN_NM_PROGRAM_CREATION			

			SET @V_ID_NOTIFICATION = SCOPE_IDENTITY()

		--IF(@PIN_KY_STATUS = 'CLOSED')
		
				INSERT INTO PRD.K_DOCUMENT_HISTORY (ID_DOCUMENT, NM_DOCUMENT, KY_USER_SENDED, NM_USER_SENDED, DT_SENDED, DT_CONFIRM, ID_BRANCH_PLANT, ID_NOTIFICATION, DT_CREATION, KY_USER_APP_CREATION, NM_PROGAM_CREATE)	
				SELECT 
					 CAST(NOTI.ID_DOCUMENT AS UNIQUEIDENTIFIER) AS ID_DOCUMENT
					,DM.name AS NM_DOCUMENT
					,NOTI.USER_RECIPENT 
					,CU.NM_USER
					,NOTI.DT_SENDED
					,NULL --,ISNULL(NOTI.DT_CLOSE, GETDATE())
					,NOTI.ID_BRANCH_PLANT
					,@V_ID_NOTIFICATION
					,GETDATE()
					,@PIN_KY_USER_APP_CREATION
					,@PIN_NM_PROGRAM_CREATION
				FROM(
					SELECT NP.ID_NOTIFICATION,
							NP.KY_PROCESS_TYPE,
							NP.DT_NOTIFICATION,
							NP.DT_SENDED,
							NP.DT_WAITING,
							NP.DT_CLOSE,
							NP.ID_BRANCH_PLANT,
							(SELECT TOP 1  msgs.msg.value('@KY_VALUE', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/FORM/PARAMETERS/child::node()') msgs(msg) WHERE msgs.msg.value('@KY_PARAMETER' , 'nvarchar(max)') = 'idDocument') 
								AS ID_DOCUMENT,
							(SELECT TOP 1  msgs.msg.value('@TO', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/RECIPIENTS/child::node()') msgs(msg) /*WHERE msgs.msg.value('@TO' , 'nvarchar(max)') = @PIN_KY_USER*/) 
								AS USER_RECIPENT,
							(SELECT TOP 1  msgs.msg.value('@ID_PRODUCTION_LINE', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/RECIPIENTS/child::node()') msgs(msg) /*WHERE msgs.msg.value('@TO' , 'nvarchar(max)') = @PIN_KY_USER*/) 
								AS ID_PRODUCTION_LINE
						FROM PRD.K_NOTIFICATION_PROCESS NP
				   
					)
					NOTI
				JOIN ADM.FS_DOCUMENT_MANAGEMENT DM ON NOTI.ID_DOCUMENT = DM.stream_id
				JOIN ADM.C_USER CU ON NOTI.USER_RECIPENT = CU.KY_USER
				WHERE NOTI.KY_PROCESS_TYPE =  'FORM'
				  AND NOTI.ID_DOCUMENT IS NOT NULL 
				  AND NOTI.ID_NOTIFICATION = @V_ID_NOTIFICATION
		END

		--WE RETURN A VARIABLE THAT INDICATES THAT EVERYTHING WAS PERFORMED OKAY.
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Se Inserto la notificación satisfactoriamente', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'The notification was successfully inserted', 'EN')
		
		--IN THIS BLOCK ALL TRANSACTIONS WILL DELETED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
		
		--SET @XML_RESULT = DBO.F_ERROR_MESSAGES(ERROR_NUMBER(), ERROR_MESSAGE())
		--DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		--DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()			
		--SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		--SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		--SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		--SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, @ERROR_MESSAGE)

		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, @ERROR_MESSAGE)
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, @ERROR_MESSAGE)


		--EXECUTE ADM.SPE_RAISE_ERROR
	END CATCH
END

