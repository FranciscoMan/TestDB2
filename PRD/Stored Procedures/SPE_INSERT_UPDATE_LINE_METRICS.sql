-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Juan De Dios Pérez
-- CRETAE date: 23/03/2017
-- Description: Insert or update the METRICS per production line
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_INSERT_UPDATE_LINE_METRICS] 
    	    @XML_RESULT XML = '' OUT ,    -- --0 TO ERROR AND 1 TO CORRECT
			@PIN_ID_PRODUCTION_LINE AS int = NULL,
			@PIN_XML_CHARACTERISTICS XML=NULL,
		    @PIN_KY_USER_APP AS nvarchar(50)
		  , @PIN_NM_PROGRAM AS nvarchar(50)
		  , @PIN_TYPE_TRANSACTION CHAR(1) --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
	,@DT_SYSTEM DATETIME = GETDATE()

    	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	
		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION='I'
	    	BEGIN

					MERGE [PRD].[C_LINE_METRIC]  AS target
		USING(
				SELECT  ID_LINE_METRIC,ID_PRODUCTION_LINE, ID_METRICS, XML_FIELD_SETTINGS,ID_DEVICE_METRICS
				FROM (
					SELECT 
						d.value('@ID_LINE_METRIC', 'INT') AS ID_LINE_METRIC,
						d.value('@ID_PRODUCTION_LINE', 'INT') AS ID_PRODUCTION_LINE,
						d.value('@ID_METRICS', 'INT')AS ID_METRICS,
						(CAST(d.value('@XML_FIELD_SETTINGS', 'VARCHAR(MAX)') AS XML)) AS XML_FIELD_SETTINGS,
						CASE WHEN d.value('@ID_DEVICE_METRICS', 'INT')  = 0 THEN NULL
						ELSE d.value('@ID_DEVICE_METRICS', 'INT')END AS ID_DEVICE_METRICS
						
					FROM @PIN_XML_CHARACTERISTICS.nodes('/CHARACTERISTICS/CHARACTERISTIC') AS T(d)
				) AS T1
			) AS source (ID_LINE_METRIC,ID_PRODUCTION_LINE, ID_METRICS, XML_FIELD_SETTINGS,ID_DEVICE_METRICS)
		ON (target.ID_LINE_METRIC = source.ID_LINE_METRIC)
		WHEN MATCHED THEN
			UPDATE SET 
					  ID_METRICS=source.ID_METRICS, 
					  XML_FIELD_SETTINGS=source.XML_FIELD_SETTINGS,
					  ID_DEVICE_METRICS = source.ID_DEVICE_METRICS,
					  [DT_UPDATE] =@DT_SYSTEM
					, [KY_USER_APP_UPDATE] = @PIN_KY_USER_APP
					, [NM_PROGRAM_UPDATE] = @PIN_NM_PROGRAM
		WHEN NOT MATCHED  THEN
		INSERT (ID_PRODUCTION_LINE, ID_METRICS, XML_FIELD_SETTINGS , ID_DEVICE_METRICS, [DT_CREATION], [KY_USER_APP_CREATION], [NM_PROGAM_CREATE])
		VALUES (Source.ID_PRODUCTION_LINE, Source.ID_METRICS, source.XML_FIELD_SETTINGS, source.ID_DEVICE_METRICS,@DT_SYSTEM, @PIN_KY_USER_APP, @PIN_NM_PROGRAM )
		WHEN NOT MATCHED BY SOURCE AND target.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE THEN DELETE;
							
		END 
		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
			
	END CATCH
END

