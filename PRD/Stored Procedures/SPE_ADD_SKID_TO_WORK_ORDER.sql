
CREATE PROCEDURE   [PRD].[SPE_ADD_SKID_TO_WORK_ORDER]
	@XML_RESULT XML = '' OUT,
	@PIN_ID_WORK_ORDER INT,
	@PIN_NO_SKIDS_TO_ADD INT,
	@PIN_KY_USER_APP NVARCHAR(50),
	@PIN_NM_PROGRAM NVARCHAR(50),
	@PIN_EXPLANATION NVARCHAR(100)
AS
BEGIN
	BEGIN TRY
		DECLARE @V_EXIST_TRAN BIT = 0
		DECLARE @NO_PCS_PER_SKID INT
		DECLARE @NO_RUN_QTY INT
		DECLARE @NEW_NO INT

		DECLARE @NEW_RUN INT


		IF(@@TRANCOUNT = 0) BEGIN
			-- IN CASE THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			-- IT EDIT THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END
	
		-- SET @NO_PCS_PER_SKID 
		SET @NO_PCS_PER_SKID = (SELECT NO_QTY_SKID FROM [PlaskoliteQA].PRD.K_WORK_ORDER WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER)
		SET @NO_RUN_QTY = (SELECT NO_RUN_QTY FROM [PlaskoliteQA].PRD.K_WORK_ORDER WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER)

		SET @NEW_NO = (@NO_PCS_PER_SKID * @PIN_NO_SKIDS_TO_ADD);
		SET @NEW_RUN = (@NO_RUN_QTY + @NEW_NO)

		UPDATE [PlaskoliteQA].PRD.K_WORK_ORDER SET NO_RUN_QTY = @NEW_RUN, KY_USER_APP_UPDATE = @PIN_KY_USER_APP, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM, DT_UPDATE = GETDATE() WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER
		-- UPDATE [PlaskoliteQA].PRD.K_WORK_ORDER SET NO_QTY_ADDED = @NEW_NO WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER

		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT,'Proceso exitoso','ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT,'Successful process','EN')

		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			COMMIT	
		END
	END TRY
	BEGIN CATCH
	--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			ROLLBACK
		END
			
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES(ERROR_NUMBER(), ERROR_MESSAGE())
			
	END CATCH
END
