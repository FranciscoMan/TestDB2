-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Javier Díaz Barrón
-- CREATE date: 02/03/2017
-- Description: get all work orders with qa27
-- =============================================
-- MODIFY: 03/15/2018 DT_LAST_FORM add filter to subquery to get date last form proces MANUFACTURE and status CAPTURED
-- 11/28/2018 JDR The query is rewritten to show the closing date of the last event, if the event is open (pending readings to capture or lost time present) the current time is shown
-- 02/28/2018 JDR Filter is added to return only to the active users of the system
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_GET_WO_QA27] 
	@PIN_ID_WORK_ORDER AS INT
	, @PIN_ID_QA27 AS INT

AS

BEGIN

	DECLARE @DT_SYSTEM DATETIME = GETDATE()
	DECLARE @T_WORK_ORDER TABLE (
		ID_WORK_ORDER INT NOT NULL
		, ID_PRODUCTION_LINE INT NOT NULL
		, ID_BRANCH_PLANT INT NOT NULL
		, ID_QA27 INT NOT NULL
		, ID_LEADMAN INT NOT NULL
		, KY_STATUS_QA27 NVARCHAR(20)
		, KY_STATUS_WO NVARCHAR(20)
		, DT_QA27_START DATETIME NOT NULL
		, KY_USER NVARCHAR(50)
		, TIME_ELAPSED INT
		, DT_LAST_FORM DATETIME NOT NULL
		, DT_START_COUNTER_ON DATETIME NOT NULL
		, KY_LAST_EVENT_TYPE NVARCHAR(20)
	)

	DECLARE @T_EVENTS TABLE (
		ID_PRODUCTION_LINE INT
		, DT_CLOSED_EVENT DATETIME
		, KY_EVENT_TYPE NVARCHAR(20)
	)

	; WITH T_WORK_ORDER AS (
		SELECT 
			  WO.ID_WORK_ORDER
			, WO.ID_PRODUCTION_LINE
			, WO.ID_BRANCH_PLANT 
			, QA.ID_QA27
			, QA.ID_LEADMAN
			, QA.KY_STATUS KY_STATUS_QA27
			, WO.KY_STATUS KY_STATUS_WO
			, CU.KY_USER
			, QA.DT_INITIAL_TIME
			, DBO.F_GET_TIME_ELAPSED(WO.ID_WORK_ORDER,NULL,'WORK_ORDER') TIME_ELAPSED
			, ISNULL((SELECT TOP 1 DT_FORM FROM PRD.K_FORM WHERE ID_WORK_ORDER = WO.ID_WORK_ORDER AND KY_PROCESS_TYPE = 'MANUFACTURE' AND KY_STATUS_FORM = 'CAPTURED' ORDER BY DT_FORM DESC), @DT_SYSTEM) AS DT_LAST_FORM
			, ROW_NUMBER() OVER (PARTITION BY WO.ID_PRODUCTION_LINE ORDER BY WO.ID_PRODUCTION_LINE ASC, QA.DT_INITIAL_TIME DESC) AS NO_ROW
		FROM PRD.K_WORK_ORDER WO
			INNER JOIN PRD.K_QA27 QA 
				ON QA.ID_WORK_ORDER = WO.ID_WORK_ORDER
			INNER JOIN ADM.C_EMPLOYEE EMP 
				ON EMP.ID_EMPLOYEE = QA.ID_LEADMAN
			INNER JOIN ADM.C_USER CU 
				ON CU.ID_EMPLOYEE = EMP.ID_EMPLOYEE
				AND CU.FG_ACTIVE = 1
		WHERE 
			(@PIN_ID_WORK_ORDER IS NULL OR (@PIN_ID_WORK_ORDER IS NOT NULL AND WO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER))
			AND (@PIN_ID_QA27 IS NULL OR (@PIN_ID_QA27 IS NOT NULL AND QA.ID_QA27 = @PIN_ID_QA27)) 
			AND WO.KY_STATUS NOT IN ('SCHEDULED', 'SKIPPED')
			AND QA.KY_STATUS IN ('RUNNING', 'HOLD_ON')
	) 
	INSERT INTO @T_WORK_ORDER (
		ID_WORK_ORDER
		, ID_PRODUCTION_LINE
		, ID_BRANCH_PLANT
		, ID_QA27
		, ID_LEADMAN
		, KY_STATUS_QA27
		, KY_STATUS_WO
		, KY_USER
		, DT_QA27_START
		, TIME_ELAPSED
		, DT_LAST_FORM
		, DT_START_COUNTER_ON
	)
	SELECT ID_WORK_ORDER
		, ID_PRODUCTION_LINE
		, ID_BRANCH_PLANT
		, ID_QA27
		, ID_LEADMAN
		, KY_STATUS_QA27
		, KY_STATUS_WO
		, KY_USER
		, DT_INITIAL_TIME
		, TIME_ELAPSED
		, DT_LAST_FORM
		, @DT_SYSTEM
	FROM T_WORK_ORDER
	WHERE NO_ROW = 1

	; WITH T_MANUFACTURE_FORMS AS (
		SELECT ROW_NUMBER() OVER (PARTITION BY TWO.ID_PRODUCTION_LINE ORDER BY TWO.ID_PRODUCTION_LINE, ISNULL(KF.DT_CLOSED, @DT_SYSTEM) DESC) AS NO_ROW
			, TWO.ID_PRODUCTION_LINE
			, ISNULL(KF.DT_CLOSED, @DT_SYSTEM) AS DT_CLOSED
		FROM PRD.K_FORM KF
			INNER JOIN @T_WORK_ORDER TWO
				ON KF.ID_WORK_ORDER = TWO.ID_WORK_ORDER
				AND KF.ID_QA27 = TWO.ID_QA27
				AND KF.KY_PROCESS_TYPE = 'MANUFACTURE'
	), T_ISSUES AS (
		SELECT ROW_NUMBER() OVER (PARTITION BY TWO.ID_PRODUCTION_LINE ORDER BY TWO.ID_PRODUCTION_LINE, ISNULL(KI.DT_ISSUE_CLOSED, @DT_SYSTEM) DESC) AS NO_ROW
			, TWO.ID_PRODUCTION_LINE
			, ISNULL(KI.DT_ISSUE_CLOSED, @DT_SYSTEM) AS DT_CLOSED
		FROM PRD.K_ISSUE KI
			INNER JOIN @T_WORK_ORDER TWO
				ON KI.ID_PRODUCTION_LINE = TWO.ID_PRODUCTION_LINE
				AND KI.ID_QA27 = TWO.ID_QA27
	), T_SKIDS AS (
		SELECT ROW_NUMBER() OVER (PARTITION BY TWO.ID_PRODUCTION_LINE ORDER BY TWO.ID_PRODUCTION_LINE, ISNULL(KP.DT_INITIAL_TIME, @DT_SYSTEM) DESC) AS NO_ROW
			, TWO.ID_PRODUCTION_LINE
			, ISNULL(KP.DT_INITIAL_TIME, @DT_SYSTEM) AS DT_OPEN_SKID
		FROM PRD.K_PALLET KP
			INNER JOIN @T_WORK_ORDER TWO
				ON KP.ID_QA27 = TWO.ID_QA27
	), T_EVENTS AS (
		SELECT ID_PRODUCTION_LINE, DT_CLOSED, 'FORMS' AS KY_EVENT_TYPE FROM T_MANUFACTURE_FORMS WHERE NO_ROW = 1 UNION ALL
		SELECT ID_PRODUCTION_LINE, DT_CLOSED, 'ISSUE' AS KY_EVENT_TYPE FROM T_ISSUES WHERE NO_ROW = 1 UNION ALL
		SELECT ID_PRODUCTION_LINE, DT_OPEN_SKID, 'SKID' AS KY_EVENT_TYPE FROM T_SKIDS WHERE NO_ROW = 1
	), T_LAST_EVENT AS (
		SELECT ROW_NUMBER() OVER (PARTITION BY TE.ID_PRODUCTION_LINE ORDER BY TE.ID_PRODUCTION_LINE, TE.DT_CLOSED DESC) AS NO_ROW
			, ID_PRODUCTION_LINE
			, DT_CLOSED AS DT_CLOSED_EVENT
			, KY_EVENT_TYPE
		FROM T_EVENTS TE
	)

	UPDATE TWO
	SET DT_START_COUNTER_ON = TLE.DT_CLOSED_EVENT
		, KY_LAST_EVENT_TYPE = TLE.KY_EVENT_TYPE
	FROM @T_WORK_ORDER TWO
		INNER JOIN T_LAST_EVENT TLE
			ON TLE.ID_PRODUCTION_LINE = TWO.ID_PRODUCTION_LINE
			AND NO_ROW = 1

	SELECT ID_WORK_ORDER
		, ID_PRODUCTION_LINE
		, ID_BRANCH_PLANT
		, ID_QA27
		, ID_LEADMAN
		, KY_STATUS_QA27
		, KY_STATUS_WO
		, KY_USER
		, TIME_ELAPSED
		, DT_LAST_FORM
		, DT_START_COUNTER_ON
		, KY_LAST_EVENT_TYPE
	FROM @T_WORK_ORDER
END

