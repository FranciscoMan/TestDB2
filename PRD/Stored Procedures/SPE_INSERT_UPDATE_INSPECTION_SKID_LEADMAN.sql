-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Vitek - 2020
-- Author: Aideé Alvarez
-- CREATE date: 12/07/2019
-- Description: Insert or update a new form leadman (function on hold in paper copy).
-- =============================================

CREATE PROCEDURE [PRD].[SPE_INSERT_UPDATE_INSPECTION_SKID_LEADMAN]
     @XML_RESULT XML = '' OUT     -- --0 TO ERROR AND 1 TO CORRECT
   --, @PIN_ID_INSPECTION_SKID INT = NULL
   , @PIN_KY_LEADMAN VARCHAR(50) = NULL
   , @PIN_ID_WORK_ORDER INT
   , @PIN_NO_PALLET INT
   , @PIN_NO_SKIDS_OPENED INT
   , @PIN_NO_QUANTITY INT
   , @PIN_KY_STATUS NVARCHAR(50)
   , @PIN_DS_EXPLANATION_AGREEMENT NVARCHAR(MAX) = NULL
   , @PIN_KY_USER_APP NVARCHAR(50)
   , @PIN_NM_PROGRAM NVARCHAR(50)
 --  , @PIN_TYPE_TRANSACTION CHAR(1)  --I=INSERT   U=UPDATE
AS
BEGIN
 	BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
   	BEGIN TRY
		DECLARE 
		      @V_EXIST_TRAN BIT = 0
			, @DT_SYSTEM DATETIME = GETDATE()
			, @ID_INSPECTION_SKID INT

		IF (@@TRANCOUNT = 0) BEGIN
				BEGIN TRANSACTION
					SET @V_EXIST_TRAN = 1
				END	

	--	IF @PIN_TYPE_TRANSACTION = 'I' BEGIN -- INSERT THE SKID FOR INSPECTION
			IF NOT EXISTS (SELECT 1 FROM PRD.K_INSPECTION_SKID WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER AND NO_PALLET = @PIN_NO_PALLET) 
			BEGIN

				SELECT @PIN_NO_QUANTITY = NO_QTY_SKID
				FROM PRD.K_WORK_ORDER
				WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER

				DECLARE @ID_LEADMAN INT, @NM_LEADMAN VARCHAR(80), @XML_DATA XML
						--	, @PIN_KY_LEADMAN VARCHAR(80)
						--SET @PIN_KY_LEADMAN = 'aaguado'
				SELECT
				@ID_LEADMAN = ID_EMPLOYEE,
				@NM_LEADMAN = NM_USER
				FROM ADM.C_USER CU WHERE KY_USER = @PIN_KY_LEADMAN

				INSERT INTO PRD.K_INSPECTION_SKID (
					  ID_WORK_ORDER
					, NO_PALLET
					, NO_QUANTITY
					, KY_STATUS
					, KY_USER_INSPECTOR
					, ID_QUALITY_INSPECTOR
					, NM_QUALITY_INSPECTOR
					, NO_SKIDS_OPENED
					, FG_INSPECTOR_AGREEMENT
					, DT_INSPECTOR_AGREEMENT
					, DT_INSPECTION_CREATED
					, DT_CREATION
					, KY_USER_APP_CREATION
					, NM_PROGRAM_CREATE
					, DT_UPDATE
					, KY_USER_APP_UPDATE 
				    , NM_PROGRAM_UPDATE
					, DS_EXPLANATION_AGREEMENT
				) VALUES (
					  @PIN_ID_WORK_ORDER
					, @PIN_NO_PALLET
					, @PIN_NO_QUANTITY
					, @PIN_KY_STATUS
					, @PIN_KY_LEADMAN
					, @ID_LEADMAN
					, @NM_LEADMAN
					, @PIN_NO_SKIDS_OPENED
					, 0
					, @DT_SYSTEM
					, @DT_SYSTEM
					, @DT_SYSTEM
					, @PIN_KY_USER_APP
					, @PIN_NM_PROGRAM
					, @DT_SYSTEM
				    , @PIN_KY_USER_APP
				    , @PIN_NM_PROGRAM
					, @PIN_DS_EXPLANATION_AGREEMENT
				)		
				
				SELECT @ID_INSPECTION_SKID = SCOPE_IDENTITY();
				--DECLARE @PIN_ID_WORK_ORDER INT, @XML_DATA XML
				--SET @PIN_ID_WORK_ORDER = 5359039

				SET @XML_DATA =( SELECT * FROM(SELECT NM_PRODUCTION_LINE AS '@NM_PRODUCTION_LINE',
											   ID_BRANCH_PLANT AS '@ID_BRANCH_PLANT'
							         	FROM PRD.K_WORK_ORDER WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER) A
				                        FOR XML PATH  ('PRODLINE'))
				--SELECT @XML_DATA
				-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
				SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			    SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_DATA (@XML_RESULT,@XML_DATA)

			END	ELSE BEGIN

					-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
				SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'WARNING')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Este skid ya está creado para el operador de línea', 'ES')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'This skid is already created for the Leadman', 'EN')
			 	
					
			END

			-- UPDATE SKID LEADMAN SIDE (ON INSERT).
			UPDATE KP
			SET   KY_STATUS =  @PIN_KY_STATUS 
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, DT_UPDATE = @DT_SYSTEM
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			FROM PRD.K_PALLET KP
				INNER JOIN PRD.K_INSPECTION_SKID KIS 
					ON KP.NO_PALLET = KIS.NO_PALLET 
					AND KP.ID_WORK_ORDER = KIS.ID_WORK_ORDER
			WHERE KIS.ID_INSPECTION_SKID = @ID_INSPECTION_SKID

			PRINT N'Inspection Skid number :' + ISNULL(CAST(@ID_INSPECTION_SKID AS VARCHAR(20)), '') 


		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			COMMIT	
		END

	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			ROLLBACK
		END
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,@ERROR_MESSAGE)--'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
	END CATCH
  END
END