-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Javier Diaz Barron
-- CRETAE date: 08/06/2017
-- Description: Reschedule work order
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_RESCHEDULE_WO] 
	@XML_RESULT XML = '' OUT,
	@PIN_XML_REORDERED_WORK_ORDERS XML

AS
BEGIN
	
	DECLARE @DT_WORK_ORDER DATETIME
		, @V_EXIST_TRAN BIT = 0

	DECLARE @T_WORK_ORDER_XML TABLE (
		ID_WORK_ORDER INT
		, NO_ORDER INT
	)

	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION 
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1

		END

		INSERT INTO @T_WORK_ORDER_XML (ID_WORK_ORDER, NO_ORDER)
		SELECT c.value('@ID_WORK_ORDER', 'INT')
			, c.value('@NO_ORDER', 'INT')
		FROM @PIN_XML_REORDERED_WORK_ORDERS.nodes('/WORKORDERS/WORKORDER') T(c)
			
		SELECT @DT_WORK_ORDER = MIN(KWO.DT_WORK_ORDER)
		FROM PRD.K_WORK_ORDER KWO
		WHERE EXISTS (SELECT TOP 1 1 FROM @T_WORK_ORDER_XML TWOX WHERE TWOX.ID_WORK_ORDER = KWO.ID_WORK_ORDER)

--		SELECT DT_WORK_ORDER, NO_ASSIGNED_TIME, NO_SEQ, ID_WORK_ORDER FROM PRD.K_WORK_ORDER WHERE ID_PRODUCTION_LINE = @ID_PRODUCTION_LINE ORDER BY DT_WORK_ORDER

		; WITH T_REORDER_WORK_ORDER AS (
			SELECT KWO.ID_WORK_ORDER
				, KWO.NO_ASSIGNED_TIME
				, KWO.DT_WORK_ORDER
				, TWOX.NO_ORDER AS NO_LINE
			FROM PRD.K_WORK_ORDER KWO
				INNER JOIN @T_WORK_ORDER_XML TWOX
					ON KWO.ID_WORK_ORDER = TWOX.ID_WORK_ORDER
		), T_COMPUTE_ASSIGNED_TIME AS (
			SELECT TRWO1.ID_WORK_ORDER, SUM(TRWO2.NO_ASSIGNED_TIME) AS NO_ASSIGNED_TIME
			FROM T_REORDER_WORK_ORDER TRWO1
				INNER JOIN T_REORDER_WORK_ORDER TRWO2
					ON TRWO1.NO_LINE > TRWO2.NO_LINE
			GROUP BY TRWO1.ID_WORK_ORDER
		)
		--SELECT KWO.NO_ASSIGNED_TIME, DT_WORK_ORDER, KWO.ID_WORK_ORDER
		--FROM PRD.K_WORK_ORDER KWO
		--	LEFT JOIN T_COMPUTE_ASSIGNED_TIME TCAT
		--		ON KWO.ID_WORK_ORDER = TCAT.ID_WORK_ORDER
		--WHERE EXISTS (SELECT TOP 1 1 FROM T_PRIORIZE_WORK_ORDERS TPWO WHERE TPWO.ID_WORK_ORDER = KWO.ID_WORK_ORDER)
		--ORDER BY NO_ASSIGNED_TIME

		UPDATE KWO
		SET DT_WORK_ORDER = DATEADD(MINUTE, ISNULL(TCAT.NO_ASSIGNED_TIME, 0), @DT_WORK_ORDER)
		FROM PRD.K_WORK_ORDER KWO
			LEFT JOIN T_COMPUTE_ASSIGNED_TIME TCAT
				ON KWO.ID_WORK_ORDER = TCAT.ID_WORK_ORDER
		WHERE EXISTS (SELECT TOP 1 1 FROM T_REORDER_WORK_ORDER TRWO WHERE TRWO.ID_WORK_ORDER = KWO.ID_WORK_ORDER)
	
		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	

	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED			
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK

		SET @XML_RESULT = DBO.F_ERROR_MESSAGES(ERROR_NUMBER(), ERROR_MESSAGE())
		
			
	END CATCH
END

