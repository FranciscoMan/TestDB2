
-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Gabriel Vázquez Torres
-- CREATE date: 26/07/2018
-- Description: Insert or delete transitions of work order
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_INSERT_DELETE_WORK_ORDER_TRANSITIONS]
	  @XML_RESULT XML = '' OUT --0 TO ERROR AND 1 TO CORRECT
	, @PIN_ID_WORK_ORDER INT
	, @PIN_XML_TRANSITIONS XML
	, @PIN_KY_USER_APP NVARCHAR(50)
	, @PIN_NM_PROGRAM NVARCHAR(50)	
	, @PIN_TYPE_TRANSACTION CHAR(1) ='I'--I=INSERT   D=DELETE
AS
BEGIN
	--WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	BEGIN TRY		   			
		DECLARE @V_EXIST_TRAN BIT = 0	
			, @DT_SYSTEM DATETIME = GETDATE()
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			BEGIN TRANSACTION

			SET @V_EXIST_TRAN = 1
		END	

		CREATE TABLE #T_TRANSITION  (			
			 ID_WORK_ORDER_TRANSITION INT NULL,
			 ID_TRANSITION INT NULL
		)		

		IF @PIN_TYPE_TRANSACTION = 'I' BEGIN


			INSERT INTO #T_TRANSITION (ID_TRANSITION)
			SELECT 
				d.value('@ID_TRANSITION', 'INT') AS ID_TRANSITION
			FROM @PIN_XML_TRANSITIONS.nodes('TRANSITIONS/TRANSITION') AS T(d)

			INSERT INTO [PRD].[K_WORK_ORDER_TRANSITIONS]
					   ([ID_WORK_ORDER]
					   ,[ID_TRANSITION]
					   ,[KY_TRANSITION]
					   ,[NM_TRANSITION]
					   ,[NO_STANDARD_TIME]
					   ,[DT_CREATION]
					   ,[KY_USER_APP_CREATION]
					   ,[NM_PROGAM_CREATE])
				 SELECT
					     @PIN_ID_WORK_ORDER
					   , T1.ID_TRANSITION
					   , T1.KY_TRANSITION
					   , T1.NM_TRANSITION
					   , T1.NO_STANDARD_TIME
					   , @DT_SYSTEM				   
					   , @PIN_KY_USER_APP
					   , @PIN_NM_PROGRAM
				FROM PRD.C_TRANSITION T1
					INNER JOIN #T_TRANSITION T2 ON T1.ID_TRANSITION = T2.ID_TRANSITION
				WHERE
					NOT EXISTS(SELECT TOP 1 1 FROM PRD.K_WORK_ORDER_TRANSITIONS T3 WHERE T3.ID_TRANSITION = T1.ID_TRANSITION AND T3.ID_WORK_ORDER = @PIN_ID_WORK_ORDER)

		END
		ELSE BEGIN

			INSERT INTO #T_TRANSITION (ID_WORK_ORDER_TRANSITION)
			SELECT 
				d.value('@ID_WORK_ORDER_TRANSITION', 'INT') AS ID_TRANSITION
			FROM @PIN_XML_TRANSITIONS.nodes('TRANSITIONS/TRANSITION') AS T(d)

			DELETE T1
			FROM PRD.K_WORK_ORDER_TRANSITIONS T1
				INNER JOIN  #T_TRANSITION T2 ON T1.ID_WORK_ORDER_TRANSITION = T2.ID_WORK_ORDER_TRANSITION

		END

		-- INSERT XML TRANSITIONS DATA ON THE TRANSITIONS TABLE VARIABLE
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		
		--IN THIS BLOCK ALL TRANSACTIONS WILL DELETED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			COMMIT
		END

	END TRY
	BEGIN CATCH			
		
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
		
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register' + ' ' + @ERROR_MESSAGE)
		
	END CATCH
END

