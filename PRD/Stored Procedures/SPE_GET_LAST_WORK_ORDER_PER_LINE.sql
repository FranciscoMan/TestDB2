-- =============================================
-- Proyect: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Julio César Tavares
-- CREATE date: 06/04/2017
-- Description: Get last work order running per line.
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_GET_LAST_WORK_ORDER_PER_LINE] 
	@PIN_ID_WORK_ORDER INT
AS  
BEGIN
	DECLARE	@ID_QA27 AS int = (SELECT TOP 1 ID_QA27 FROM PRD.K_QA27 WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER ORDER BY DT_INITIAL_TIME DESC)

	DECLARE @V_ID_WORK_ORDER INT
		,@V_WORK_ORDER_PROGRESS NVARCHAR(MAX)

	--SELECT TOP 1 @V_ID_WORK_ORDER = WO.ID_WORK_ORDER
	--FROM PRD.K_WORK_ORDER WO
	--WHERE WO.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE
	--	AND WO.KY_STATUS IN('COMPLETE', 'CLOSE')
	--ORDER BY WO.DT_START_WORK_ORDER DESC

	SET @V_WORK_ORDER_PROGRESS = (SELECT PRD.F_GET_PROGRESS_WORK_ORDER(@V_ID_WORK_ORDER))
	
	DECLARE @T_LAST_WORK_ORDER TABLE (
		ID_WORK_ORDER INT
		, DT_INITIAL_TIME DATETIME
	)

	; WITH T_LAST_QA27 AS (
		SELECT ROW_NUMBER() OVER (PARTITION BY KQO.ID_WORK_ORDER ORDER BY KQO.DT_INITIAL_TIME DESC) AS NO_ROW
			, KQO.ID_WORK_ORDER
			, KQO.DT_INITIAL_TIME
		FROM PRD.K_QA27 KQ
			INNER JOIN PRD.K_SHIFT KS
				ON KQ.ID_SHIFT = KS.ID_SHIFT
			INNER JOIN PRD.K_SHIFT KSO
				ON KS.ID_PRODUCTION_LINE = KSO.ID_PRODUCTION_LINE
			INNER JOIN PRD.K_QA27 KQO
				ON KSO.ID_SHIFT = KQO.ID_SHIFT
				AND KQO.ID_WORK_ORDER != KQ.ID_WORK_ORDER
				AND KQO.DT_INITIAL_TIME < KQ.DT_INITIAL_TIME
		WHERE KQ.ID_QA27 = @ID_QA27
	)
	
	INSERT INTO @T_LAST_WORK_ORDER (ID_WORK_ORDER, DT_INITIAL_TIME)
	SELECT TOP 3 ID_WORK_ORDER, DT_INITIAL_TIME
	FROM T_LAST_QA27
	WHERE NO_ROW = 1
	ORDER BY DT_INITIAL_TIME DESC

	SELECT KWO.NO_WORK_ORDER
		, KWO.ID_WORK_ORDER
		, KWO.KY_CUSTOMER
		, KWO.NM_CUSTOMER
		, CI.ID_ITEM
		, CI.KY_ITEM
		, CI.NM_ITEM
		, CPL.ID_PRODUCTION_LINE
		, CPL.KY_PRODUCTION_LINE
		, CPL.NM_PRODUCTION_LINE
		, KWO.NM_MATERIAL
		, KWO.NM_COLOR
		, KWO.NO_RUN_QTY + KWO.NO_QTY_ADDED AS NO_RUN_QTY
		, KWO.NO_LENGHT
		, KWO.NO_WIDTH
		, KWO.NO_THICKNESS
		, KWO.NO_ASSIGNED_TIME + ISNULL(KWO.NO_STANDARD_TIME,0) NO_ASSIGNED_TIME
		, CONVERT(NVARCHAR(10),KWO.DT_WORK_ORDER,101) DT_WORK_ORDER
		, CONVERT(NVARCHAR, KWO.DT_WORK_ORDER, 108) DT_INITIAL_TIME
		, KWO.KY_STATUS
		, (SELECT COUNT(KP.NO_PALLET) FROM PRD.K_PALLET KP WHERE KP.ID_WORK_ORDER = KWO.ID_WORK_ORDER) AS NO_PALLETS
		, @V_WORK_ORDER_PROGRESS AS DS_PROGRESS_WORK_ORDER
		, KWO.NO_ORDER
		, (SELECT NM_TRANSITION AS li
			FROM PRD.K_WORK_ORDER_TRANSITIONS WOT
			WHERE WOT.ID_WORK_ORDER = KWO.ID_WORK_ORDER
			FOR XML RAW (''), ROOT ('ul'), ELEMENTS
		) AS DS_TRANSITIONS
		FROM PRD.K_WORK_ORDER KWO
			INNER JOIN @T_LAST_WORK_ORDER TLWO
				ON KWO.ID_WORK_ORDER = TLWO.ID_WORK_ORDER
			INNER JOIN PRD.C_ITEM CI 
				ON KWO.ID_ITEM = CI.ID_ITEM
			INNER JOIN PRD.C_PRODUCTION_LINE CPL 
				ON KWO.ID_PRODUCTION_LINE = CPL.ID_PRODUCTION_LINE
END

