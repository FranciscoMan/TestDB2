-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Javier Diaz Barron
-- CREATE date: 16/03/2017
-- Description: get all Metrics
--		UPDATE: FRANCISCO JAVIER OÑATE MANRIQUE
--		Ahora busca y compara con respecto al KY_PROCESS,
--		Siempre debe haber valor KY_PROCESS y para las
--		metricas sin relacion se usa UNASSIGNED
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_GET_METRICS]
		@PIN_KY_PROCESS_TYPE NVARCHAR(50) = null
	   ,@PIN_ID_METRICS INT = NULL
	   ,@PIN_KY_METRICS NVARCHAR(50) = NULL
	   ,@PIN_NM_METRICS NVARCHAR(100) = NULL
	   ,@PIN_NM_FIELD_TYPE  NVARCHAR(10) = NULL
	   ,@PIN_FG_ENABLED  BIT =NULL
	   ,@PIN_FG_REQUIRED BIT =NULL
	   ,@PIN_DS_TOOLTIP NVARCHAR(1000)= NULL
	   ,@PIN_ID_BRANCH_PLANT INT = NULL	
	   ,@PIN_XML_METRICS XML=NULL   
AS   


	DECLARE @auxTYPE table (
	[I] int IDENTITY(1,1) ,
	[ID_METRICS] int,
	[KY_PROCESS_TYPE] NVARCHAR(50))
	IF (@PIN_KY_PROCESS_TYPE = 'UNASSIGNED')
		BEGIN
		insert into @auxTYPE
  SELECT  M.[ID_METRICS]
	  ,FF.[KY_PROCESS_TYPE]
  FROM [PlaskoliteQA].[PRD].[C_METRICS] as M
  left JOIN [PlaskoliteQA].[PRD].[K_FORM_METRICS] as F ON M.[ID_METRICS]=F.[ID_METRICS] 
  left JOIN [PlaskoliteQA].[PRD].[K_FORM] as FF ON FF.[ID_K_FORM] = F.[ID_K_FORM]
  where FF.[KY_PROCESS_TYPE] is null
    group by  M.[ID_METRICS],FF.[KY_PROCESS_TYPE]

		END
	ELSE
		BEGIN
		insert into @auxTYPE
  SELECT  M.[ID_METRICS]
	  ,FF.[KY_PROCESS_TYPE]
  FROM [PlaskoliteQA].[PRD].[C_METRICS] as M
  left JOIN [PlaskoliteQA].[PRD].[K_FORM_METRICS] as F ON M.[ID_METRICS]=F.[ID_METRICS] 
  left JOIN [PlaskoliteQA].[PRD].[K_FORM] as FF ON FF.[ID_K_FORM] = F.[ID_K_FORM]
  where FF.[KY_PROCESS_TYPE] = @PIN_KY_PROCESS_TYPE
    group by  M.[ID_METRICS],FF.[KY_PROCESS_TYPE]

		END


		DECLARE  @aux table ( 
		ID_METRICS int
	   ,KY_METRICS NVARCHAR(50)
	   ,NM_METRICS NVARCHAR(1000)
	   ,KY_FIELD_TYPE NVARCHAR(50)
	   ,NM_FIELD_TYPE NVARCHAR(50)
	   ,FG_ENABLED NVARCHAR(50)
	   ,FG_REQUIRED NVARCHAR(50)
	   ,DS_TOOLTIP NVARCHAR(50)
	   ,ID_BRANCH_PLANT int		
	   ,NM_BRANCH_PLANT NVARCHAR(50)
	   ,XML_FIELD_SETTINGS xml
	   ,[KY_PROCESS_TYPE] NVARCHAR(50))


		IF (@PIN_KY_PROCESS_TYPE = 'ALL')
			BEGIN
	   INSERT INTO @aux (
	   ID_METRICS
	   ,KY_METRICS
	   ,NM_METRICS
	   ,KY_FIELD_TYPE
	   ,NM_FIELD_TYPE
	   ,FG_ENABLED
	   ,FG_REQUIRED
	   ,DS_TOOLTIP
	   ,ID_BRANCH_PLANT	
	   ,NM_BRANCH_PLANT
	   ,XML_FIELD_SETTINGS)
		SELECT
	    ME.ID_METRICS
	   ,ME.KY_METRICS
	   ,ME.NM_METRICS
	   ,ME.KY_FIELD_TYPE
	   ,FT.NM_FIELD_TYPE
	   ,CASE WHEN ME.FG_ENABLED =0 THEN 'NO' ELSE 'YES' END FG_ENABLED
	   ,CASE WHEN ME.FG_REQUIRED =0 THEN 'NO' ELSE 'YES' END FG_REQUIRED
	   ,ME.DS_TOOLTIP
	   ,ME.ID_BRANCH_PLANT		
	   ,ISNULL(CC.NM_BRANCH_PLANT,'All') AS NM_BRANCH_PLANT
	   ,ME.XML_FIELD_SETTINGS
	   --,FF.KY_PROCESS_TYPE
	FROM PRD.C_METRICS ME
	left JOIN ADM.VW_C_FIELD_TYPE FT ON FT.KY_FIELD_TYPE= ME.KY_FIELD_TYPE
	LEFT JOIN ADM.C_BRANCH_PLANT CC ON CC.ID_BRANCH_PLANT = ME.ID_BRANCH_PLANT
	--left join @auxTYPE as FF on FF.ID_METRICS = ME.ID_METRICS
	WHERE 
		(@PIN_ID_METRICS IS NULL OR (@PIN_ID_METRICS IS NOT NULL AND ME.ID_METRICS = @PIN_ID_METRICS)) AND 
		(@PIN_KY_METRICS IS NULL OR (@PIN_KY_METRICS IS NOT NULL AND ME.KY_METRICS = @PIN_KY_METRICS)) AND 
		(@PIN_NM_METRICS IS NULL OR (@PIN_NM_METRICS IS NOT NULL AND ME.NM_METRICS = @PIN_NM_METRICS)) AND 
    	(@PIN_NM_FIELD_TYPE IS NULL OR (@PIN_NM_FIELD_TYPE IS NOT NULL AND ME.KY_FIELD_TYPE = @PIN_NM_FIELD_TYPE)) AND 
		(@PIN_FG_ENABLED IS NULL OR (@PIN_FG_ENABLED IS NOT NULL AND ME.FG_ENABLED = @PIN_FG_ENABLED)) AND
		(@PIN_FG_REQUIRED IS NULL OR (@PIN_FG_REQUIRED IS NOT NULL AND ME.FG_REQUIRED = @PIN_FG_REQUIRED)) AND
		(@PIN_DS_TOOLTIP IS NULL OR (@PIN_DS_TOOLTIP IS NOT NULL AND ME.DS_TOOLTIP = @PIN_DS_TOOLTIP)) AND
		(@PIN_ID_BRANCH_PLANT IS NULL OR (@PIN_ID_BRANCH_PLANT IS NOT NULL AND (ME.ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT  OR ME.ID_BRANCH_PLANT IS NULL))) AND	
		(@PIN_XML_METRICS IS NULL OR (@PIN_XML_METRICS IS NOT NULL 
		
		AND  EXISTS
		(
			SELECT    
			d.value('@ID_METRIC', 'INT') AS ID_METRIC
			FROM @PIN_XML_METRICS.nodes('METRICS/METRIC') AS T(d)
			WHERE d.value('@ID_METRIC', 'INT') = ME.ID_METRICS
		)))
		order by ME.NM_METRICS;

		--if (@PIN_KY_PROCESS_TYPE = 'UNASSIGNED')
		--	BEGIN
		--		DECLARE @pi int = 1
		--		DECLARE @top int = (select count([I]) from @auxTYPE)
		--		while(@pi <= @top)
		--			BEGIN
		--				update @aux set [KY_PROCESS_TYPE] = @PIN_KY_PROCESS_TYPE where ID_METRICS = (select top 1 ID_METRICS from @auxTYPE where I = @pi)
		--				set @pi = @pi + 1
		--			END
		--	END
		--select * from @auxTYPE
		select * from @aux 
		--where [KY_PROCESS_TYPE] = @PIN_KY_PROCESS_TYPE

			END
		ELSE
			BEGIN

	   INSERT INTO @aux (
	   ID_METRICS
	   ,KY_METRICS
	   ,NM_METRICS
	   ,KY_FIELD_TYPE
	   ,NM_FIELD_TYPE
	   ,FG_ENABLED
	   ,FG_REQUIRED
	   ,DS_TOOLTIP
	   ,ID_BRANCH_PLANT	
	   ,NM_BRANCH_PLANT
	   ,XML_FIELD_SETTINGS
	   ,[KY_PROCESS_TYPE])
SELECT
	    ME.ID_METRICS
	   ,ME.KY_METRICS
	   ,ME.NM_METRICS
	   ,ME.KY_FIELD_TYPE
	   ,FT.NM_FIELD_TYPE
	   ,CASE WHEN ME.FG_ENABLED =0 THEN 'NO' ELSE 'YES' END FG_ENABLED
	   ,CASE WHEN ME.FG_REQUIRED =0 THEN 'NO' ELSE 'YES' END FG_REQUIRED
	   ,ME.DS_TOOLTIP
	   ,ME.ID_BRANCH_PLANT		
	   ,ISNULL(CC.NM_BRANCH_PLANT,'All') AS NM_BRANCH_PLANT
	   ,ME.XML_FIELD_SETTINGS
	   ,FF.KY_PROCESS_TYPE
	FROM PRD.C_METRICS ME
	left JOIN ADM.VW_C_FIELD_TYPE FT ON FT.KY_FIELD_TYPE= ME.KY_FIELD_TYPE
	LEFT JOIN ADM.C_BRANCH_PLANT CC ON CC.ID_BRANCH_PLANT = ME.ID_BRANCH_PLANT
	left join @auxTYPE as FF on FF.ID_METRICS = ME.ID_METRICS
	WHERE 
		(@PIN_ID_METRICS IS NULL OR (@PIN_ID_METRICS IS NOT NULL AND ME.ID_METRICS = @PIN_ID_METRICS)) AND 
		(@PIN_KY_METRICS IS NULL OR (@PIN_KY_METRICS IS NOT NULL AND ME.KY_METRICS = @PIN_KY_METRICS)) AND 
		(@PIN_NM_METRICS IS NULL OR (@PIN_NM_METRICS IS NOT NULL AND ME.NM_METRICS = @PIN_NM_METRICS)) AND 
    	(@PIN_NM_FIELD_TYPE IS NULL OR (@PIN_NM_FIELD_TYPE IS NOT NULL AND ME.KY_FIELD_TYPE = @PIN_NM_FIELD_TYPE)) AND 
		(@PIN_FG_ENABLED IS NULL OR (@PIN_FG_ENABLED IS NOT NULL AND ME.FG_ENABLED = @PIN_FG_ENABLED)) AND
		(@PIN_FG_REQUIRED IS NULL OR (@PIN_FG_REQUIRED IS NOT NULL AND ME.FG_REQUIRED = @PIN_FG_REQUIRED)) AND
		(@PIN_DS_TOOLTIP IS NULL OR (@PIN_DS_TOOLTIP IS NOT NULL AND ME.DS_TOOLTIP = @PIN_DS_TOOLTIP)) AND
		(@PIN_ID_BRANCH_PLANT IS NULL OR (@PIN_ID_BRANCH_PLANT IS NOT NULL AND (ME.ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT  OR ME.ID_BRANCH_PLANT IS NULL))) AND	
		(@PIN_XML_METRICS IS NULL OR (@PIN_XML_METRICS IS NOT NULL 
		
		AND  EXISTS
		(
			SELECT    
			d.value('@ID_METRIC', 'INT') AS ID_METRIC
			FROM @PIN_XML_METRICS.nodes('METRICS/METRIC') AS T(d)
			WHERE d.value('@ID_METRIC', 'INT') = ME.ID_METRICS
		)))
		order by ME.NM_METRICS;

		if (@PIN_KY_PROCESS_TYPE = 'UNASSIGNED')
			BEGIN
				DECLARE @pi int = 1
				DECLARE @top int = (select count([I]) from @auxTYPE)
				while(@pi <= @top)
					BEGIN
						update @aux set [KY_PROCESS_TYPE] = @PIN_KY_PROCESS_TYPE where ID_METRICS = (select top 1 ID_METRICS from @auxTYPE where I = @pi)
						set @pi = @pi + 1
					END
			END
		--select * from @auxTYPE
		select * from @aux 
		where [KY_PROCESS_TYPE] = @PIN_KY_PROCESS_TYPE

			END