CREATE PROCEDURE    [PRD].[SPE_GET_CLOSED_WORK_ORDER]
  @PIN_ID_BRANCH_PLANT AS int = NULL,
 @PIN_ID_PRODUCTION_LINE AS int = NULL,
 @PIN_ID_LEADMAN AS INT = NULL,
 @PIN_ID_WORK_ORDER AS INT = NULL,
 @PIN_ID_QA27 AS INT = NULL,
 @PIN_DT_INITIAL DATE = NULL, -- solo ejecuts estos
 @PIN_DT_FINAL DATE = NULL -- solo ejecutar estos
AS
BEGIN
DECLARE @DT_SYSTEM DATE
SELECT KWO.DT_CLOSE_WORK_ORDER AS DT_CLOSED 
   , KWO.ID_WORK_ORDER
   , KQA.KY_SHIFT
   , CPL.ID_PRODUCTION_LINE
   , CPL.NM_PRODUCTION_LINE
   , KQA.NM_LEADMAN
   , KWO.NM_ITEM
       , ISNULL(CONVERT(DECIMAL(13,2), NULLIF(CIC.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR(100)'), '')), CI.NO_POUNDS_PER_ITEM) * (NO_RUN_QTY + NO_QTY_ADDED)AS RUN_QTY_LBS
   , KWO.NO_RUN_QTY
   , CPA.NM_PROBLEM_AREA
   , CPC.KY_PROBLEM_CODE
   , CPC.NM_PROBLEM_CODE
   , KI.DS_EXPLANATION_EVENT_CLOSED
   , KQA.DT_FINAL_TIME
   , CWL.[KY_AUTHORIZER_USER] 
   , KWO.KY_STATUS
   FROM PRD.K_WORK_ORDER KWO
 INNER JOIN PRD.C_ITEM CI  ON KWO.ID_ITEM = CI.ID_ITEM
 INNER JOIN PRD.C_PRODUCTION_LINE CPL ON KWO.ID_PRODUCTION_LINE = CPL.ID_PRODUCTION_LINE
 INNER JOIN [PRD].[CLOSED_WORK_ORDER_LOG] CWL ON CWL.ID_WORK_ORDER= KWO.ID_WORK_ORDER 
 LEFT JOIN PRD.K_QA27 KQA ON KWO.ID_WORK_ORDER = KQA.ID_WORK_ORDER
 AND KWO.KY_STATUS = KQA.KY_STATUS

 --AND CAST(KQA.DT_INITIAL_TIME as DATE) BETWEEN  @PIN_DT_INITIAL AND @PIN_DT_FINAL
 --OR @PIN_DT_INITIAL BETWEEN CAST(KQA.DT_INITIAL_TIME AS DATE) AND CAST(ISNULL(@PIN_DT_FINAL, @PIN_DT_INITIAL) AS DATE)
 -- end search by date
 -- LEFT JOIN ADM.C_USER CU ON KQA.ID_LEADMAN = CU.ID_EMPLOYEE  -- 
 LEFT JOIN PRD.K_ISSUE KI  ON KI.ID_WORK_ORDER = KWO.ID_WORK_ORDER AND KI.ID_ISSUE = KWO.ID_ISSUE_CAUSE_SKIPPED
 LEFT JOIN PRD.C_PROBLEM_CODE CPC ON KI.ID_PROBLEM_CODE = CPC.ID_PROBLEM_CODE
 LEFT JOIN PRD.K_SHIFT KS ON KS.ID_SHIFT = KQA.ID_SHIFT

 ---
 INNER JOIN ADM.C_BRANCH_PLANT CBP
 	ON KWO.ID_BRANCH_PLANT = CBP.ID_BRANCH_PLANT
 LEFT JOIN PRD.C_ITEM_CHARACTERISTIC CIC
 	ON CIC.ID_ITEM = CI.ID_ITEM
 	AND CIC.ID_METRICS = CBP.ID_WEIGHT_METRIC

 LEFT JOIN PRD.C_PROBLEM_AREA CPA ON KI.ID_PROBLEM_AREA = CPA.ID_PROBLEM_AREA

WHERE KQA.KY_STATUS='CLOSED' AND (KQA.KY_STATUS <> 'SKIPPED' AND KQA.KY_STATUS <> 'COMPLETED') --
AND (@PIN_DT_INITIAL IS NULL OR (@PIN_DT_INITIAL IS NOT NULL AND CAST(KQA.DT_QA27 AS DATE) BETWEEN CAST(@PIN_DT_INITIAL AS DATE) AND CAST(ISNULL(@PIN_DT_FINAL, @DT_SYSTEM) AS DATE) ))
 AND (@PIN_ID_WORK_ORDER IS NULL OR(@PIN_ID_WORK_ORDER IS NOT NULL AND KWO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER ))
 --AND (@PIN_ID_QA27 IS NULL OR(@PIN_ID_QA27 IS NOT NULL AND KQA.ID_QA27 = @PIN_ID_QA27 )) --
 AND (@PIN_ID_BRANCH_PLANT IS NULL OR(@PIN_ID_BRANCH_PLANT IS NOT NULL AND KWO.ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT ))
 AND (@PIN_ID_PRODUCTION_LINE IS NULL OR (@PIN_ID_PRODUCTION_LINE IS NOT NULL AND KWO.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE ))
 --AND (@PIN_KY_STATUS_QA27 IS NULL OR (@PIN_KY_STATUS_QA27 IS NOT NULL AND KQA.KY_STATUS = @PIN_KY_STATUS_QA27 )) --
 -- AND (@PIN_ID_LEADMAN IS NULL OR (@PIN_ID_LEADMAN IS NOT NULL AND KQA.ID_LEADMAN = @PIN_ID_LEADMAN )) --
ORDER BY KWO.KY_STATUS, KWO.ID_WORK_ORDER
END

