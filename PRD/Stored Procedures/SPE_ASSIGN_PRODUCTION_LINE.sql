-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2018
-- Author: Julio Tavares
-- CRETAE date: 28/08/2018
-- Description: CLOSE SHIFT AND CREATE NEW SHIFT WITHOUT USER ASSIGN
-- =============================================
-- 05/19/2020 : Minor fixes. by AA

CREATE PROCEDURE  [PRD].[SPE_ASSIGN_PRODUCTION_LINE] 
	  @XML_RESULT XML = '' OUT
	, @PIN_ID_BRANCH_PLANT AS int = NULL
	, @PIN_ID_PRODUCTION_LINE AS int = NULL
	, @PIN_ID_SHIFT_TIME AS INT
	, @PIN_ID_C_SHIFT AS INT = NULL
	, @PIN_KY_SHIFT AS NVARCHAR(20) = NULL
	, @PIN_KY_SHIFT_TIME AS NVARCHAR(20)= NULL
	, @PIN_ID_LEADMAN AS INT= NULL
	, @PIN_NM_LEADMAN AS NVARCHAR(250)= NULL
	, @PIN_KY_AUTHORIZER_USER AS NVARCHAR(50)= NULL

	, @PIN_KY_USER AS NVARCHAR(50)= NULL
	, @PIN_NM_PROGRAM AS NVARCHAR(50)= NULL
	, @PIN_TYPE_TRANSACTION CHAR(1)= NULL --I=INSERT   U=UPDATE

AS 
BEGIN	
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
DECLARE @V_EXIST_TRAN BIT = 0
	  , @DT_SYSTEM DATETIME = GETDATE()
	  , @V_ID_ISSUE INT
	  , @V_FG_ISSUE_CONFIRMED BIT = NULL
	  , @V_IPS_CREATE_FORM NVARCHAR(20)
	  , @XML_RECIPIENTS_USERS XML
	  , @XML_FORM XML
	  , @V_ID_BRANCH_PLANT_PRODUCTION_LINE INT = NULL
	  , @V_KY_NOTIFICATION_ORIGIN AS NVARCHAR(20) = 'ISSUE'
	  , @V_ID_SHIFT INT 
	  , @V_ID_QA27 AS INT = NULL 
	  , @V_ID_WORK_ORDER INT
	  , @P_INITIAL_SHIFT_TIME DATETIME
	  , @P_FINAL_SHIFT_TIME DATETIME

	  , @P_NM_FORM NVARCHAR(50) 
	  , @P_KY_URL NVARCHAR(50)
	  , @P_DS_TITLE NVARCHAR(50)
	  , @P_NO_WIDTH NVARCHAR(50)
	  , @P_NO_HEIGHT NVARCHAR(50)
	  , @P_URL_PARAMETERS NVARCHAR(200)
	  , @XML_NOTIFICATION_FORM XML = N'<NOTIFICATIONS><RECIPIENTS></RECIPIENTS></NOTIFICATIONS>'
	  , @XML_NOTIFICATION_FORM_PARAMETERS XML

DECLARE @T_OLD_SHIFTS AS TABLE(
	 ID_SHIFT INT 
	,ID_C_SHIFT INT
	,ID_PRODUCTION_LINE INT 
	,ID_BRANCH_PLANT INT 
	,FG_STATUS BIT
	,DT_START_SHIFT DATETIME
	,DT_END_SHIFT DATETIME
	,DT_SHIFT_HISTORY DATETIME
	,NO_SHIFT_TIME INT
)

DECLARE @T_K_FORM AS TABLE(
	ID_K_FORM INT
)

DECLARE @T_NOTIFICATION_K_FORMS TABLE(
		ID_NOTIFICATION INT
		, ID_K_FORM	INT
	)

DECLARE @T_ISSUES AS TABLE(
	ID_ISSUE INT,
	ID_PRODUCTION_LINE INT,
	ID_WORK_ORDER INT
)

DECLARE @T_NOTIFICATION_ISSUES TABLE(
		ID_NOTIFICATION INT 
	   ,ID_ISSUE INT
	   ,ID_PRODUCTION_LINE INT
	)

BEGIN TRY
	--WE VERIFY THAT EXISTS A WORKING TRANSACTION
	IF (@@TRANCOUNT = 0) BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
		BEGIN TRANSACTION
		--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
		SET @V_EXIST_TRAN = 1
	END			
	--WE VERIFY IF THE STORED PROCEDURE IS GOING TO EXECUTE UPDATE OR INSERT
	IF @PIN_TYPE_TRANSACTION = 'U'
	BEGIN

		SET @V_ID_BRANCH_PLANT_PRODUCTION_LINE = (SELECT ID_BRANCH_PLANT FROM PRD.C_PRODUCTION_LINE WHERE ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE)

		SELECT TOP 1 @V_ID_ISSUE = KI.ID_ISSUE -- GET ISSUE ID IF EXISTS FOR THAT PRODUCTION LINE WHEN CHANGE SHIFT
					,@V_FG_ISSUE_CONFIRMED = FG_CONFIRMED
				FROM PRD.K_ISSUE KI
		INNER JOIN PRD.K_WORK_ORDER WO ON WO.ID_WORK_ORDER = KI.ID_WORK_ORDER
				WHERE KI.KY_ISSUE IS NULL 
				AND WO.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE 
				AND KI.KY_STATUS IN ('CHANGE_SHIFT', 'HOLD_ON', 'CREATED')
				AND WO.KY_STATUS = 'RUNNING'


		IF @V_ID_ISSUE IS NOT NULL 
		BEGIN

		SELECT @V_IPS_CREATE_FORM = IPS.NO_IP
			FROM (
				SELECT ROW_NUMBER() OVER(PARTITION BY ID_PRODUCTION_LINE ORDER BY ID_PRODUCTION_LINE_IP) ROWNUMBER
  						, CIP.NO_IP
						, CIP.ID_PRODUCTION_LINE
					FROM PRD.C_PRODUCTION_LINE_IP CIP
				) IPS
			WHERE IPS.ROWNUMBER = 1
			AND IPS.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE

		SET @XML_RECIPIENTS_USERS = (
			SELECT @PIN_KY_USER  AS "@TO",
				'SEND'  AS "@STATUS",
				'0' AS "@ATTEMPT_NUMBER",
				'' AS "@ERROR",
				@PIN_ID_PRODUCTION_LINE AS "@ID_PRODUCTION_LINE",
				@V_IPS_CREATE_FORM AS "@IP_CREATE_FORM"
			FOR XML PATH ('RECIPIENT')
		)

		IF @V_FG_ISSUE_CONFIRMED = 1
			BEGIN
				PRINT '3'
				SET @P_NM_FORM = 'WorkOrders';
				SET @P_KY_URL = '/PRD/AddEventLostTime.aspx';
				SET @P_DS_TITLE = 'Close unproductive time';
				SET @P_NO_WIDTH ='900';
				SET @P_NO_HEIGHT ='520';
				SET @P_URL_PARAMETERS =CONCAT('?ID_ISSUE=',CAST(@V_ID_ISSUE AS NVARCHAR(10)),'&KY_STATUS=','HOLD_ON');
				SET @XML_NOTIFICATION_FORM_PARAMETERS = (
					SELECT KY_PARAMETER AS '@KY_PARAMETER'
						, KY_VALUE AS '@KY_VALUE'
					FROM (
						SELECT 'ID_ISSUE' AS KY_PARAMETER, CAST(@V_ID_ISSUE AS NVARCHAR(10)) AS KY_VALUE UNION ALL
						SELECT 'KY_STATUS' AS KY_PARAMETER, 'HOLD_ON' AS KY_VALUE
					) AS T
					FOR XML PATH('PARAMETER'), ROOT ('PARAMETERS')
				)
			END 
		ELSE 
			BEGIN
				SET @P_NM_FORM = 'WorkOrders';
				SET @P_KY_URL = '/PRD/ConfirmUserWindow.aspx';
				SET @P_DS_TITLE = 'Confirm User';
				SET @P_NO_WIDTH ='500';
				SET @P_NO_HEIGHT ='310';
				SET @P_URL_PARAMETERS =CONCAT('?ID_ISSUE=',CAST(@V_ID_ISSUE AS NVARCHAR(10)));
				SET @XML_NOTIFICATION_FORM_PARAMETERS = (
					SELECT KY_PARAMETER AS '@KY_PARAMETER'
						, KY_VALUE AS '@KY_VALUE'
					FROM (
						SELECT 'ID_ISSUE' AS KY_PARAMETER, CAST(@V_ID_ISSUE AS NVARCHAR(10)) AS KY_VALUE
					) AS T
					FOR XML PATH('PARAMETER'), ROOT ('PARAMETERS')
				)
			END

			SET @XML_FORM = (
				SELECT 	    
					@P_NM_FORM AS "@NAME",
					@P_KY_URL AS "@URL",
					@P_DS_TITLE AS "@TITLE",
					@P_NO_WIDTH AS "@WIDTH",
					@P_NO_HEIGHT AS "@HEIGHT",
					@P_URL_PARAMETERS AS "@URL_PARAMETERS"
				FOR XML PATH ('FORM')
			)

			SET @XML_FORM.modify('insert sql:variable("@XML_NOTIFICATION_FORM_PARAMETERS") into (/FORM)[1]')

			SET @XML_NOTIFICATION_FORM.modify('insert sql:variable("@XML_RECIPIENTS_USERS") into (/NOTIFICATIONS/RECIPIENTS)[1]')
			SET @XML_NOTIFICATION_FORM.modify('insert sql:variable("@XML_FORM") into (/NOTIFICATIONS)[1]') ;

			EXEC PRD.SPE_INSERT_NOTIFICATION 
				@XML_RESULT = ''
				, @PIN_ID_NOTIFICATION = 1
				, @PIN_KY_USER = @PIN_KY_USER
				, @PIN_KY_PROCESS_TYPE = 'FORM'
				, @PIN_KY_STATUS = 'SEND'
				, @PIN_XML_PROCESS_CONFIGURATION = @XML_NOTIFICATION_FORM
				, @PIN_DT_SENDED = @DT_SYSTEM
				, @PIN_DT_WAITING = NULL
				, @PIN_DT_CLOSE = NULL
				, @PIN_ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT
				, @PIN_ID_NOTIFICATION_REFERENCE = @V_ID_BRANCH_PLANT_PRODUCTION_LINE
--					, @V_ID_ISSUE
				, @PIN_KY_NOTIFICATION_ORIGIN = @V_KY_NOTIFICATION_ORIGIN
				, @PIN_KY_CLOSE_TYPE = NULL
				, @PIN_NO_LEVEL = 1
				, @PIN_FG_ATTENDED = 0
				, @PIN_KY_USER_APP_CREATION = @PIN_KY_USER
				, @PIN_NM_PROGRAM_CREATION = @PIN_NM_PROGRAM
					
	END

		SELECT @V_ID_SHIFT = KS.ID_SHIFT
		FROM PRD.K_SHIFT KS
		WHERE KS.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE 
			AND KS.FG_STATUS = 1
			AND KS.KY_USER IS NULL
			AND GETDATE() < KS.DT_END_SHIFT

		IF @V_ID_SHIFT IS NOT NULL
		BEGIN
			SELECT @V_ID_QA27 = QA.ID_QA27,
				   @V_ID_WORK_ORDER = QA.ID_WORK_ORDER
			  FROM PRD.K_QA27 QA
			 WHERE QA.ID_SHIFT = @V_ID_SHIFT
			   AND QA.KY_STATUS = 'RUNNING'

			--IF @V_ID_ISSUE IS NOT NULL 
			--	BEGIN
			--		UPDATE PRD.K_ISSUE
			--		SET ID_QA27 = @V_ID_QA27
			--		WHERE ID_ISSUE = @V_ID_ISSUE
			--	END

			UPDATE QA
			   SET KY_SHIFT = @PIN_KY_SHIFT
				  ,ID_LEADMAN = @PIN_ID_LEADMAN
  				  ,NM_LEADMAN = @PIN_NM_LEADMAN
				  ,DT_QA27 = @DT_SYSTEM
				  ,DT_UPDATE = @DT_SYSTEM
				  ,KY_USER_APP_UPDATE = @PIN_KY_USER
				  ,NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			  FROM PRD.K_QA27 QA
			 WHERE ID_QA27 = @V_ID_QA27
				
			UPDATE PRD.K_SHIFT
			   SET ID_C_SHIFT = @PIN_ID_C_SHIFT
				  ,KY_SHIFT = @PIN_KY_SHIFT
				  ,ID_SHIFT_TIME = @PIN_ID_SHIFT_TIME
				  ,KY_SHIFT_TIME = @PIN_KY_SHIFT_TIME
				  ,KY_USER = @PIN_KY_USER
				  ,KY_AUTHORIZER_USER = @PIN_KY_AUTHORIZER_USER
				  ,DT_SHIFT_HISTORY = @DT_SYSTEM
				  ,DT_UPDATE = @DT_SYSTEM
				  ,KY_USER_APP_UPDATE = @PIN_KY_USER
				  ,NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
				WHERE ID_SHIFT = @V_ID_SHIFT
				

			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

			IF @V_ID_WORK_ORDER IS NOT NULL BEGIN
				DECLARE @XML_DATA XML = (SELECT @V_ID_WORK_ORDER AS "@ID_WORK_ORDER" FOR XML PATH('WORK_ORDER'))
				SET @XML_RESULT = DBO.F_ERROR_INSERT_DATA(@XML_RESULT, @XML_DATA)
			END
		END

		ELSE
		BEGIN
			--CLOSE SHIFT AND QA27 RUNNING
			SELECT @V_ID_SHIFT = KS.ID_SHIFT
			FROM PRD.K_SHIFT KS
			WHERE KS.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE 
				AND KS.FG_STATUS = 1
				--AND KS.KY_USER IS NULL
				AND GETDATE() > KS.DT_END_SHIFT

			--	SELECT  KS.ID_SHIFT
			--FROM PRD.K_SHIFT KS
			--WHERE KS.ID_PRODUCTION_LINE = 2211001 --@PIN_ID_PRODUCTION_LINE 
			--	AND KS.FG_STATUS = 1
			--	--AND KS.KY_USER IS NULL
			--	AND GETDATE() > KS.DT_END_SHIFT
			
			-- SI EL SHIFT NO ES VACÍO...  DEBERÍA ENCONTRAR EL ID_SHIFT
			IF @V_ID_SHIFT IS NOT NULL
			BEGIN
				UPDATE PRD.K_SHIFT 
				SET FG_STATUS = 0,
					DT_UPDATE = @DT_SYSTEM,
					NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM,
					KY_USER_APP_UPDATE = @PIN_KY_USER
				WHERE ID_SHIFT = @V_ID_SHIFT

				UPDATE PRD.K_QA27
				   SET KY_STATUS = 'COMPLETE',
					   DT_UPDATE = @DT_SYSTEM,
					   NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM,
					   KY_USER_APP_UPDATE = @PIN_KY_USER
				 WHERE ID_SHIFT = @V_ID_SHIFT
				   AND KY_STATUS = 'RUNNING'

			END
	

	   SELECT TOP 1 
				  @P_INITIAL_SHIFT_TIME =  DT_INITIAL_SHIFT_TIME
				, @P_FINAL_SHIFT_TIME = DT_FINAL_SHIFT_TIME
				--,  NO_SHIFT_TIME
				--, ID_BRANCH_PLANT
			FROM (
					SELECT NO_SHIFT_TIME
						  ,ID_BRANCH_PLANT
						  ,GETDATE() AS DT_NOW
						  ,CONVERT(DATETIME,((CONVERT(VARCHAR(10),GETDATE(),101)) +' '+ 
						  CAST(CONVERT(VARCHAR, ST.INITIAL_SHIFT_TIME, 108) AS VARCHAR)),101)   AS DT_INITIAL_SHIFT_TIME
						  ,DATEADD(HOUR, CAST(ST.NO_SHIFT_TIME AS INT),
						  CONVERT(DATETIME,((CONVERT(VARCHAR(10),GETDATE(),101)) +' '+
						  CAST(CONVERT(VARCHAR, ST.INITIAL_SHIFT_TIME, 108) AS VARCHAR)),101)) AS DT_FINAL_SHIFT_TIME
					FROM ADM.VW_C_SHIFT_TIME ST
					--WHERE ID_SHIFT_TIME = @PIN_ID_C_SHIFT
				) CS
			WHERE CS.DT_NOW BETWEEN CS.DT_INITIAL_SHIFT_TIME AND CS.DT_FINAL_SHIFT_TIME
					AND CS.ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT
			GROUP BY ID_BRANCH_PLANT
					,DT_INITIAL_SHIFT_TIME
					,DT_FINAL_SHIFT_TIME
					,NO_SHIFT_TIME



		INSERT INTO PRD.K_SHIFT (
					ID_C_SHIFT
				, KY_SHIFT
				, ID_SHIFT_TIME
				, KY_SHIFT_TIME
				, ID_PRODUCTION_LINE
				, ID_BRANCH_PLANT
				, KY_USER
				, KY_AUTHORIZER_USER
				, FG_STATUS
				, DT_START_SHIFT
				, DT_END_SHIFT
				, DT_SHIFT_HISTORY
				, DT_CREATION
				, KY_USER_APP_CREATION
				, NM_PROGAM_CREATE
			)
			SELECT @PIN_ID_C_SHIFT
				, @PIN_KY_SHIFT
				, @PIN_ID_SHIFT_TIME
				, @PIN_KY_SHIFT_TIME
				, @PIN_ID_PRODUCTION_LINE
				, @PIN_ID_BRANCH_PLANT --, @V_ID_BRANCH_PLANT_PRODUCTION_LINE
				, @PIN_KY_USER
				, @PIN_KY_AUTHORIZER_USER
				, 1 --@PIN_FG_STATUS
				, @P_INITIAL_SHIFT_TIME --, CONVERT(DATETIME,((CONVERT(VARCHAR(10),GETDATE(),101)) +' '+ @P_INITIAL_SHIFT_TIME),101)
				, @P_FINAL_SHIFT_TIME --, DATEADD(HOUR, CAST(@P_NO_SHIFT_TIME AS INT) ,CONVERT(DATETIME,((CONVERT(VARCHAR(10),GETDATE(),101)) +' '+ @P_INITIAL_SHIFT_TIME),101))
				, @DT_SYSTEM
				, @DT_SYSTEM
				, @PIN_KY_USER
				, @PIN_NM_PROGRAM
		SET @V_ID_SHIFT = SCOPE_IDENTITY()

		

		IF EXISTS (SELECT 1 FROM PRD.K_WORK_ORDER WHERE ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE AND KY_STATUS = 'RUNNING')
		BEGIN

			--SELECT @V_ID_WORK_ORDER = ID_WORK_ORDER FROM PRD.K_WORK_ORDER WHERE ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE AND KY_STATUS = 'RUNNING'

			DECLARE @QA_FINAL_SHIFT_TIME DATETIME
			
			--CAMBIAMOS LA FECHA AQUÍ... NO DEBE ESTAR EN NULO YA QUE ES UN ESTADO COMPLETO...
				SELECT TOP 1  @V_ID_WORK_ORDER = WO.ID_WORK_ORDER,
			              --@P_INITIAL_SHIFT_TIME = QA.DT_INITIAL_TIME,
				          @QA_FINAL_SHIFT_TIME   = QA.DT_FINAL_TIME 
					FROM PRD.K_QA27 QA INNER JOIN PRD.K_WORK_ORDER WO ON QA.ID_WORK_ORDER = WO.ID_WORK_ORDER 
					WHERE WO.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE AND WO.KY_STATUS = 'COMPLETE' AND DT_FINAL_TIME IS NOT NULL
					ORDER BY ID_QA27 DESC


			INSERT INTO PRD.K_QA27 (
					ID_WORK_ORDER
				,ID_SHIFT
				,KY_SHIFT
				,NO_ORDER
				,DT_INITIAL_TIME
				,KY_STATUS
				,DT_QA27
				,ID_LEADMAN
				,NM_LEADMAN
				,DT_CREATION
				,KY_USER_APP_CREATION
				,NM_PROGAM_CREATE
			)
			SELECT @V_ID_WORK_ORDER
				,@V_ID_SHIFT
				,@PIN_KY_SHIFT
				,0
				,@QA_FINAL_SHIFT_TIME -- EL FINAL DEL ANTERIOR DEBERÍA SER EL SHIFT DEL SIGUIENTE.
				,'RUNNING'
				,@DT_SYSTEM
 				,@PIN_ID_LEADMAN
				,@PIN_NM_LEADMAN
				,@DT_SYSTEM
				,@PIN_KY_USER
				,@PIN_NM_PROGRAM

				SET @V_ID_QA27 = SCOPE_IDENTITY()

				IF @V_ID_QA27 IS NOT NULL 
				BEGIN
					UPDATE PRD.K_ISSUE
					SET ID_QA27 = @V_ID_QA27
					WHERE ID_ISSUE = @V_ID_ISSUE
				END

			END
				
				-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

			END
		END

		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
	IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
		COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES(ERROR_NUMBER(), ERROR_MESSAGE())
		EXECUTE ADM.SPE_RAISE_ERROR

	END CATCH
END

