-- ================================================================
-- Proyecto: Plaskolite v2
-- Copyright (c) - Vitek - 2020
-- Author: Cynthia Aideé Alvarez.
-- CREATE date: 06/25/2020
-- Description: INSERT AND UPDATE CALIBRATION FOR BP 10.
-- =================================================================
CREATE PROCEDURE [PRD].[INSERT_UPDATE_K_CALIBRATION]
	@XML_RESULT XML = '' OUT,
	@PIN_ID_CALIBRATION AS INT= NULL, 
	@PIN_ID_WORK_ORDER AS INT = NULL,
	@PIN_ID_QA27 AS INT = NULL,
	@PIN_ID_BRANCH_PLANT AS INT = NULL,
	@PIN_MICROMETER INT = NULL,
	@PIN_FIRST_VALUE AS DECIMAL(10,5) = NULL,
	@PIN_SECOND_VALUE AS DECIMAL(10,5) = NULL,
	@PIN_THIRD_VALUE AS DECIMAL(10,5) = NULL,
	@PIN_TAPE_NUMBER AS INT = NULL,
	@PIN_TAPE_VALUE AS DECIMAL(10,5) = NULL,
	@PIN_FG_OPERATOR AS NVARCHAR(80) = NULL,
	@PIN_DT_CREATION AS DATETIME = NULL,
	@PIN_DT_UPDATE AS DATETIME = NULL,
	@PIN_KY_USER_APP_CREATION AS VARCHAR(80) = NULL,
	@PIN_KY_USER_APP_UPDATE AS VARCHAR(80) = NULL,
	@PIN_NM_PROGRAM_CREATE AS VARCHAR(80) = NULL,
	@PIN_NM_PROGRAM_UPDATE AS VARCHAR(80) = NULL,
	@PIN_TYPE_TRANSACTION AS CHAR(1) = NULL -- I o U 
AS
	BEGIN
		-- WE DECLARE A VARIABLE TO MANAGE  THE TRANSACTION IF EXIST OR NOT, AN OTHER DECLARATIONS.
				DECLARE @V_EXIST_TRAN     AS BIT = 0
				BEGIN TRY
				-- VERIFY EXIST TRANSACTION.
				IF (@@TRANCOUNT = 0)
					BEGIN
					-- IN CASE THAT THE TRANSACTION DOESN'T INIT, WE INITIALIZE THE VARIABLE.
						BEGIN TRANSACTION 
							SET @V_EXIST_TRAN = 1
					END
			   IF @PIN_TYPE_TRANSACTION = 'I' -- FIRST, CREATE YOUR ID_CALIBRATION. THAT IS, IT'S THE FIRST TIME THAT A LEADMAN OPENS THE QA27 WINDOW.
				BEGIN
					INSERT INTO PRD.K_CALIBRATION(
					ID_WORK_ORDER,
					ID_QA27,
					ID_BRANCH_PLANT,
					MICROMETER,
					FIRST_VALUE,
					SECOND_VALUE,
					THIRD_VALUE,
					TAPE_NUMBER,
					TAPE_VALUE,
					FG_OPERATOR,
					DT_CREATION,
					KY_USER_APP_CREATION,
					NM_PROGRAM_CREATE
					) VALUES(
					@PIN_ID_WORK_ORDER,
					@PIN_ID_QA27,
					@PIN_ID_BRANCH_PLANT,
					@PIN_MICROMETER, 
					@PIN_FIRST_VALUE,
					@PIN_SECOND_VALUE,
					@PIN_THIRD_VALUE,
					@PIN_TAPE_NUMBER,
					@PIN_TAPE_VALUE,
					@PIN_FG_OPERATOR,
					ISNULL(@PIN_DT_CREATION,GETDATE()),
					--GETDATE(),
					@PIN_KY_USER_APP_CREATION,
					--@PIN_KY_USER_APP_UPDATE,
					@PIN_NM_PROGRAM_CREATE
					--@PIN_NM_PROGRAM_UPDATE
					)
				END
			ELSE 
				BEGIN

				UPDATE PRD.K_CALIBRATION SET FIRST_VALUE            = @PIN_FIRST_VALUE,
											SECOND_VALUE            = @PIN_SECOND_VALUE,
											THIRD_VALUE             = @PIN_THIRD_VALUE,
											TAPE_VALUE              = @PIN_TAPE_VALUE,
											KY_USER_APP_UPDATE      = @PIN_KY_USER_APP_CREATION,
											DT_UPDATE               = @PIN_DT_CREATION,
											NM_PROGRAM_UPDATE       = 'PRD/UpdateValidation'
				WHERE ID_CALIBRATION = @PIN_ID_CALIBRATION

				END
					SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
					SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
					SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
					IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
						COMMIT	
					END TRY
						BEGIN CATCH		
						--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTION GET CANCELED
						IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
							ROLLBACK

							DECLARE @KY_ERROR INT				  = ERROR_NUMBER()
							DECLARE @ERROR_MESSAGE NVARCHAR(250)  = ERROR_MESSAGE()
	
							SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
							SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
							SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')	
						END CATCH
		END