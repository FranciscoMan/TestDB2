-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Julio Tavares
-- CRETAE date: 04/04/2017
-- Description: Insert or update a shift leadman
-- =============================================
-- 21/08/2017 JDR PIN_KY_AUTHORIZER_USER parameter is added to insert the user key who let an operator to lead a production line
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_INSERT_UPDATE_SHIFT_LEADMAN] 
	@XML_RESULT XML = '' OUT
	, @PIN_ID_PRODUCTION AS int = NULL
	, @PIN_ID_BRANCH_PLANT AS int = NULL
	, @PIN_KY_USER AS NVARCHAR(50) = NULL
	, @PIN_FG_STATUS AS BIT = NULL
	, @PIN_ID_QA27 AS INT = NULL
	, @PIN_KY_AUTHORIZER_USER AS NVARCHAR(50)
	, @PIN_KY_USER_APP AS NVARCHAR(50)
	, @PIN_NM_PROGRAM AS NVARCHAR(50)
	, @PIN_ID_SHIFT AS INT
	, @PIN_KY_SHIFT AS NVARCHAR(50)
	, @PIN_ID_SHIFT_TIME AS INT
	, @PIN_KY_SHIFT_TIME AS NVARCHAR(50)
	, @PIN_TYPE_TRANSACTION CHAR(1) --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
		, @DT_SYSTEM DATETIME = GETDATE()
		, @V_ID_WORK_ORDER INT 
		, @V_ID_ID_SHIFT INT 
		, @V_ID_QA27 INT 
		, @V_ID_SHIFT INT 
		, @V_NO_ASSIGNED_TIME INT
		, @V_ID_ISSUE INT
		, @V_ID_PRODUCTION_LINE INT
		, @V_IPS_CREATE_FORM NVARCHAR(20)
		, @XML_NOTIFICATION_FORM XML = N'<NOTIFICATIONS><RECIPIENTS></RECIPIENTS></NOTIFICATIONS>'
		, @XML_NOTIFICATION_FORM_PARAMETERS XML
		, @XML_FORM XML
		, @XML_RECIPIENTS_USERS XML
		, @V_KY_NOTIFICATION_ORIGIN AS NVARCHAR(20) = 'ISSUE'
		, @V_FG_ISSUE_CONFIRMED BIT = NULL
		, @V_ID_BRANCH_PLANT_PRODUCTION_LINE INT = NULL
 		, @V_DT_START_WORK_ORDER DATETIME = (SELECT TOP 1 KWO.DT_START_WORK_ORDER FROM PRD.K_WORK_ORDER KWO WHERE KWO.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION AND KWO.KY_STATUS = 'RUNNING' ORDER BY KWO.DT_WORK_ORDER DESC)

		 ----PARAMETERS OF FORMS
		, @P_NM_FORM NVARCHAR(50) 
		, @P_KY_URL NVARCHAR(50)
		, @P_DS_TITLE NVARCHAR(50)
		, @P_NO_WIDTH NVARCHAR(50)
		, @P_NO_HEIGHT NVARCHAR(50)
		, @P_URL_PARAMETERS NVARCHAR(200)

		, @P_INITIAL_SHIFT_TIME VARCHAR(8)
		, @P_NO_SHIFT_TIME VARCHAR(2)
		, @P_FINAL_SHIFT_TIME VARCHAR(8)

	CREATE TABLE #T_K_FORM  (
		ID_K_FORM INT
	)

	CREATE TABLE #T_NOTIFICATION_K_FORMS (
		ID_NOTIFICATION INT
		, ID_K_FORM	INT
	)
	 
	CREATE TABLE #T_NOTIFICATION_ISSUES (
		ID_NOTIFICATION INT 
	   ,ID_ISSUE INT
	   ,ID_PRODUCTION_LINE INT
	)
	 ----
	
	BEGIN TRY
			--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
				--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END			

		--WE VERIFY IF THE STORED PROCEDURE IS GOING TO EXECUTE UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION = 'I' BEGIN

			SET @V_ID_BRANCH_PLANT_PRODUCTION_LINE = (SELECT ID_BRANCH_PLANT FROM PRD.C_PRODUCTION_LINE WHERE ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION)

			SELECT @P_INITIAL_SHIFT_TIME = ST.INITIAL_SHIFT_TIME
				, @P_NO_SHIFT_TIME = ST.NO_SHIFT_TIME
				, @P_FINAL_SHIFT_TIME = ST.FINAL_SHIFT_TIME
			FROM ADM.VW_C_SHIFT_TIME ST
			WHERE ID_SHIFT_TIME = @PIN_ID_SHIFT_TIME
			------------------------------------------------------------------------------------------
			-------------------------------------ISSUE VALIDATION BEGIN----------------------------------------------------

			SELECT TOP 1 @V_ID_ISSUE = KI.ID_ISSUE -- GET ISSUE ID IF EXISTS FOR THAT PRODUCTION LINE WHEN CHANGE SHIFT
				  ,@V_ID_PRODUCTION_LINE = KI.ID_PRODUCTION_LINE
			FROM PRD.K_ISSUE KI
				INNER JOIN PRD.K_WORK_ORDER WO 
					ON WO.ID_WORK_ORDER = KI.ID_WORK_ORDER
			WHERE KI.KY_ISSUE IS NULL 
				AND WO.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION 
				AND KI.KY_STATUS IN ('CHANGE_SHIFT', 'HOLD_ON', 'CREATED')
				AND WO.KY_STATUS = 'RUNNING'

			----*******CANCEL NOTIFICATION ISSUES 

			INSERT INTO #T_NOTIFICATION_ISSUES 
			SELECT NOTI.ID_NOTIFICATION
				, CAST(NOTI.ID_ISSUE AS INT) AS ID_ISSUE
				, CAST(NOTI.ID_PRODUCTION_LINE AS INT) AS ID_PRODUCTION_LINE
			FROM(
				SELECT NP.ID_NOTIFICATION
					, NP.KY_PROCESS_TYPE
					, (SELECT TOP 1  msgs.msg.value('@KY_VALUE', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/FORM/PARAMETERS/child::node()') msgs(msg) WHERE msgs.msg.value('@KY_PARAMETER' , 'nvarchar(max)') = 'ID_ISSUE') AS ID_ISSUE
					, (SELECT TOP 1  msgs.msg.value('@TO', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/RECIPIENTS/child::node()') msgs(msg)) AS USER_RECIPENT
					, (SELECT TOP 1  msgs.msg.value('@ID_PRODUCTION_LINE', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/RECIPIENTS/child::node()') msgs(msg)) AS ID_PRODUCTION_LINE
				FROM PRD.K_NOTIFICATION_PROCESS NP
			) AS NOTI
			WHERE NOTI.KY_PROCESS_TYPE =  'FORM'
				AND NOTI.ID_ISSUE IS NOT NULL 
			

			----**** DELETE NOTIFICATION PROCESS ISSUES AND INSERT NOTIFICATIONS SENDED FROM FORMS CANCELLED

			INSERT INTO PRD.K_NOTIFICATIONS_SENDED (
				KY_USER
				, KY_PROCESS_TYPE
				, KY_STATUS
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, NO_LEVEL
				, FG_ATTENDED
				, DT_CREATION
				, DT_UPDATE
				, KY_USER_APP_CREATION
				, KY_USER_APP_UPDATE
				, NM_PROGAM_CREATE
				, NM_PROGRAM_UPDATE
			)
			SELECT NP.KY_USER
				, NP.KY_PROCESS_TYPE
				, 'CANCELLED' --, KY_STATUS
				, NP.XML_PROCESS_CONFIGURATION
				, NP.NO_ATTEMPT_NUMBER
				, NP.DS_ERROR
				, NP.DT_NOTIFICATION
				, NP.DT_SENDED
				, NP.DT_WAITING
				, NP.DT_CLOSE
				, NP.ID_BRANCH_PLANT
				, NP.ID_NOTIFICATION_REFERENCE
				, NP.KY_NOTIFICATION_ORIGIN
				, NP.NO_LEVEL
				, NP.FG_ATTENDED
				, GETDATE()
				, NULL
				, @PIN_KY_USER
				, NULL
				, @PIN_NM_PROGRAM
				, NULL
			FROM PRD.K_NOTIFICATION_PROCESS NP 
				INNER JOIN #T_NOTIFICATION_ISSUES KNI 
					ON NP.ID_NOTIFICATION = KNI.ID_NOTIFICATION
			WHERE KNI.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION
		
			DELETE NP
			FROM PRD.K_NOTIFICATION_PROCESS NP
				INNER JOIN #T_NOTIFICATION_ISSUES KNI
					ON NP.ID_NOTIFICATION = KNI.ID_NOTIFICATION
			WHERE KNI.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION

			IF @V_ID_ISSUE IS NOT NULL BEGIN 
			-- INSERT A NEW ISSUE IF THERE ARE AN ISSUE WHEN CHANGE SHIFT

			------GET IP ASOCIATED TO PRODUCTION LINE, GET THE FIRST
				SELECT @V_IPS_CREATE_FORM = IPS.NO_IP
				FROM(
					SELECT ROW_NUMBER() OVER(PARTITION BY ID_PRODUCTION_LINE ORDER BY ID_PRODUCTION_LINE_IP) ROWNUMBER
						, CIP.NO_IP
						, CIP.ID_PRODUCTION_LINE
					FROM PRD.C_PRODUCTION_LINE_IP CIP
				) IPS
				WHERE IPS.ROWNUMBER = 1
					AND IPS.ID_PRODUCTION_LINE = @V_ID_PRODUCTION_LINE

				SELECT @V_FG_ISSUE_CONFIRMED = FG_CONFIRMED 
				FROM PRD.K_ISSUE
				WHERE ID_ISSUE = @V_ID_ISSUE

				SET @XML_RECIPIENTS_USERS = (
					SELECT @PIN_KY_USER_APP  AS "@TO",
						'SEND'  AS "@STATUS",
						'0' AS "@ATTEMPT_NUMBER",
						'' AS "@ERROR",
						@V_ID_PRODUCTION_LINE AS "@ID_PRODUCTION_LINE",
						@V_IPS_CREATE_FORM AS "@IP_CREATE_FORM"
					FOR XML PATH ('RECIPIENT')
				)

				IF @V_FG_ISSUE_CONFIRMED = 1 BEGIN
					SET @P_NM_FORM = 'WorkOrders';
					SET @P_KY_URL = '/PRD/AddEventLostTime.aspx';
					SET @P_DS_TITLE = 'Close unproductive time';
					SET @P_NO_WIDTH ='900';
					SET @P_NO_HEIGHT ='520';
					SET @P_URL_PARAMETERS =CONCAT('?ID_ISSUE=',CAST(@V_ID_ISSUE AS NVARCHAR(10)),'&KY_STATUS=','HOLD_ON');
					SET @XML_NOTIFICATION_FORM_PARAMETERS = (
						SELECT KY_PARAMETER AS '@KY_PARAMETER'
							, KY_VALUE AS '@KY_VALUE'
						FROM (
							SELECT 'ID_ISSUE' AS KY_PARAMETER, CAST(@V_ID_ISSUE AS NVARCHAR(10)) AS KY_VALUE UNION ALL
							SELECT 'KY_STATUS' AS KY_PARAMETER, 'HOLD_ON' AS KY_VALUE
						) AS T
						FOR XML PATH('PARAMETER'), ROOT ('PARAMETERS')
					)
				END ELSE BEGIN
					SET @P_NM_FORM = 'WorkOrders';
					SET @P_KY_URL = '/PRD/ConfirmUserWindow.aspx';
					SET @P_DS_TITLE = 'Confirm User';
					SET @P_NO_WIDTH ='500';
					SET @P_NO_HEIGHT ='310';
					SET @P_URL_PARAMETERS =CONCAT('?ID_ISSUE=',CAST(@V_ID_ISSUE AS NVARCHAR(10)));
					SET @XML_NOTIFICATION_FORM_PARAMETERS = (
						SELECT KY_PARAMETER AS '@KY_PARAMETER'
							, KY_VALUE AS '@KY_VALUE'
						FROM (
							SELECT 'ID_ISSUE' AS KY_PARAMETER, CAST(@V_ID_ISSUE AS NVARCHAR(10)) AS KY_VALUE
						) AS T
						FOR XML PATH('PARAMETER'), ROOT ('PARAMETERS')
					)
				END

				SET @XML_FORM = (
					SELECT 	    
						@P_NM_FORM AS "@NAME",
						@P_KY_URL AS "@URL",
						@P_DS_TITLE AS "@TITLE",
						@P_NO_WIDTH AS "@WIDTH",
						@P_NO_HEIGHT AS "@HEIGHT",
						@P_URL_PARAMETERS AS "@URL_PARAMETERS"
					FOR XML PATH ('FORM')
				)

				SET @XML_FORM.modify('insert sql:variable("@XML_NOTIFICATION_FORM_PARAMETERS") into (/FORM)[1]')

				SET @XML_NOTIFICATION_FORM.modify('insert sql:variable("@XML_RECIPIENTS_USERS") into (/NOTIFICATIONS/RECIPIENTS)[1]')
				SET @XML_NOTIFICATION_FORM.modify('insert sql:variable("@XML_FORM") into (/NOTIFICATIONS)[1]') ;

				EXEC PRD.SPE_INSERT_NOTIFICATION 
					@XML_RESULT = ''
					, @PIN_ID_NOTIFICATION = 1
					, @PIN_KY_USER = @PIN_KY_USER_APP
					, @PIN_KY_PROCESS_TYPE = 'FORM'
					, @PIN_KY_STATUS = 'SEND'
					, @PIN_XML_PROCESS_CONFIGURATION = @XML_NOTIFICATION_FORM
					, @PIN_DT_SENDED = @DT_SYSTEM
					, @PIN_DT_WAITING = NULL
					, @PIN_DT_CLOSE = NULL
					, @PIN_ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT
					, @PIN_ID_NOTIFICATION_REFERENCE = @V_ID_BRANCH_PLANT_PRODUCTION_LINE
--					, @V_ID_ISSUE
					, @PIN_KY_NOTIFICATION_ORIGIN = @V_KY_NOTIFICATION_ORIGIN
					, @PIN_KY_CLOSE_TYPE = NULL
					, @PIN_NO_LEVEL = 1
					, @PIN_FG_ATTENDED = 0
					, @PIN_KY_USER_APP_CREATION = @PIN_KY_USER_APP
					, @PIN_NM_PROGRAM_CREATION = @PIN_NM_PROGRAM

			END


			-------------------------------------ISSUE VALIDATION END-----------------------------------------------------
			SET @V_ID_WORK_ORDER = (
				SELECT KWO.ID_WORK_ORDER 
				FROM PRD.K_WORK_ORDER KWO
				WHERE KWO.KY_STATUS ='RUNNING' 
					AND KWO.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION 
					AND KWO.ID_BRANCH_PLANT = @V_ID_BRANCH_PLANT_PRODUCTION_LINE
			)

			SET @V_ID_SHIFT = (
				SELECT KS.ID_SHIFT
				FROM PRD.K_SHIFT KS
				WHERE KS.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION 
					AND KS.FG_STATUS = 1
					AND @DT_SYSTEM BETWEEN KS.DT_START_SHIFT AND KS.DT_END_SHIFT
			)
		
			IF @V_ID_SHIFT IS NULL BEGIN
				SET @V_ID_SHIFT = (
					SELECT KS.ID_SHIFT
					FROM PRD.K_SHIFT KS 
					WHERE KS.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION
						AND KS.FG_STATUS = 1
				)

				IF @V_ID_SHIFT IS NOT NULL BEGIN
					--GET MANUFACTURE AND PROCCES FORM CREATED TO THIS MOMENT FOR THIS PRODUCTION LINE

					IF @V_DT_START_WORK_ORDER IS NOT NULL BEGIN

						INSERT INTO #T_K_FORM 
						SELECT KF.ID_K_FORM
						FROM PRD.K_FORM KF
							LEFT JOIN PRD.K_WORK_ORDER WO
								ON WO.ID_WORK_ORDER = KF.ID_WORK_ORDER
						WHERE KF.DT_FORM <= @DT_SYSTEM
							AND ISNULL(WO.ID_PRODUCTION_LINE, KF.ID_PRODUCTION_LINE) = @PIN_ID_PRODUCTION
							AND KF.KY_STATUS_FORM = 'CREATED'
							AND (KF.KY_PROCESS_TYPE = 'MANUFACTURE' OR KF.KY_PROCESS_TYPE = 'PROCESS')
					END

					; WITH T_NOTIFICATION AS (
						SELECT NP.ID_NOTIFICATION,
							(SELECT TOP 1 msgs.msg.value('@KY_VALUE', 'nvarchar(50)') TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/FORM/PARAMETERS/child::node()') msgs(msg)  WHERE msgs.msg.value('@KY_PARAMETER' , 'nvarchar(max)') = 'idKForm') AS ID_K_FORM,
							NP.XML_PROCESS_CONFIGURATION
						FROM PRD.K_NOTIFICATION_PROCESS NP
					)

					INSERT INTO #T_NOTIFICATION_K_FORMS
					SELECT TN.ID_NOTIFICATION
						, CAST(TN.ID_K_FORM AS INT) ID_K_FORM
					FROM T_NOTIFICATION TN
						INNER JOIN #T_K_FORM KF 
							ON TN.ID_K_FORM = KF.ID_K_FORM
					WHERE TN.ID_K_FORM IS NOT NULL
					ORDER BY 1 DESC

					UPDATE PRD.K_SHIFT
					SET FG_STATUS = 0,
						DT_UPDATE = @DT_SYSTEM,
						KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
						NM_PROGAM_CREATE = @PIN_NM_PROGRAM
					WHERE ID_SHIFT = @V_ID_SHIFT

					----PENDING FORMS ARE CANDELED
					UPDATE KF
					SET KY_STATUS_FORM = 'CANCELLED', 
						KY_USER_AUTHORIZED_CANCEL = 'System',
						NM_USER_AUTHORIZED_CANCEL = 'System' ,
						DS_EXPLANATION_CANCEL = 'Insert or update shift',
						DT_CLOSED = @DT_SYSTEM,
						DT_UPDATE = @DT_SYSTEM,
						KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
						NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM 
					FROM PRD.K_FORM KF
						INNER JOIN  #T_K_FORM FC 
							ON KF.ID_K_FORM = FC.ID_K_FORM
						
					UPDATE KFM
					SET XML_METRICS_VALUE = '<METRICS />',
						DT_UPDATE = @DT_SYSTEM, 
						KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
						NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
					FROM PRD.K_FORM_METRICS KFM 
						INNER JOIN #T_K_FORM FC 
							ON KFM.ID_K_FORM = FC.ID_K_FORM

					----**** DELETE NOTIFICATION PROCESS AND INSERT NOTIFICATIONS SENDED FROM FORMS CANCELLED

					INSERT INTO PRD.K_NOTIFICATIONS_SENDED (
						KY_USER
						,KY_PROCESS_TYPE
						,KY_STATUS
						,XML_PROCESS_CONFIGURATION
						,NO_ATTEMPT_NUMBER
						,DS_ERROR
						,DT_NOTIFICATION
						,DT_SENDED
						,DT_WAITING
						,DT_CLOSE
						,ID_BRANCH_PLANT
						,ID_NOTIFICATION_REFERENCE
						,KY_NOTIFICATION_ORIGIN
						,NO_LEVEL
						,FG_ATTENDED
						,DT_CREATION
						,DT_UPDATE
						,KY_USER_APP_CREATION
						,KY_USER_APP_UPDATE
						,NM_PROGAM_CREATE
						,NM_PROGRAM_UPDATE
					)
					SELECT KY_USER
						, KY_PROCESS_TYPE
						, 'CANCELLED' --, KY_STATUS
						, XML_PROCESS_CONFIGURATION
						, NO_ATTEMPT_NUMBER
						, DS_ERROR
						, DT_NOTIFICATION
						, DT_SENDED
						, DT_WAITING
						, DT_CLOSE
						, ID_BRANCH_PLANT
						, ID_NOTIFICATION_REFERENCE
						, KY_NOTIFICATION_ORIGIN
						, NO_LEVEL
						, FG_ATTENDED
						, GETDATE()
						, NULL
						, @PIN_KY_USER
						, NULL
						, @PIN_NM_PROGRAM
						, NULL
					FROM PRD.K_NOTIFICATION_PROCESS NP 
						INNER JOIN #T_NOTIFICATION_K_FORMS KN 
							ON NP.ID_NOTIFICATION = KN.ID_NOTIFICATION
							--JOIN @T_K_FORM KF ON KN.ID_K_FORM = KF.ID_K_FORM
		
					DELETE NP
					FROM PRD.K_NOTIFICATION_PROCESS NP
						INNER JOIN #T_NOTIFICATION_K_FORMS KN 
							ON NP.ID_NOTIFICATION = KN.ID_NOTIFICATION
						--JOIN @T_K_FORM KF ON KN.ID_K_FORM = KF.ID_K_FORM

				END
				
				SET @V_ID_SHIFT = NULL

				SET @V_ID_SHIFT = (
					SELECT KS.ID_SHIFT
					FROM PRD.K_SHIFT KS 
					WHERE KS.KY_USER = @PIN_KY_USER 
						AND KS.FG_STATUS = 1
						AND KS.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION
				)

				IF @V_ID_SHIFT IS NOT NULL BEGIN
					UPDATE PRD.K_SHIFT
					SET FG_STATUS = 0,
						DT_UPDATE = @DT_SYSTEM,
						KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
						NM_PROGAM_CREATE = @PIN_NM_PROGRAM
					WHERE ID_SHIFT = @V_ID_SHIFT
				END
			
				IF @V_ID_WORK_ORDER IS NOT NULL BEGIN
					SET @V_ID_QA27 = (
						SELECT KQA.ID_QA27
						FROM PRD.K_QA27 KQA 
						WHERE KQA.ID_WORK_ORDER = @V_ID_WORK_ORDER
							AND KQA.KY_STATUS = 'RUNNING'
					)

					IF @V_ID_QA27 IS NOT NULL BEGIN
						UPDATE PRD.K_QA27
						SET KY_STATUS = 'COMPLETE'
							,DT_FINAL_TIME = @DT_SYSTEM
							,DT_UPDATE = @DT_SYSTEM
							,KY_USER_APP_UPDATE = @PIN_KY_USER_APP
							,NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
						WHERE ID_QA27 = @V_ID_QA27
					END

					INSERT INTO PRD.K_QA27 (
						ID_WORK_ORDER
						,KY_SHIFT
						,NO_ORDER
						,DT_INITIAL_TIME
						,KY_STATUS
						,DT_QA27
						,ID_LEADMAN
						,NM_LEADMAN
						,DT_CREATION
						,KY_USER_APP_CREATION
						,NM_PROGAM_CREATE
					)
					SELECT @V_ID_WORK_ORDER
						--,VS.KY_SHIFT
						,@PIN_KY_SHIFT
						,0
						,@DT_SYSTEM
						,'RUNNING'
						,@DT_SYSTEM
						,CU.ID_EMPLOYEE
						,CU.NM_USER
						,@DT_SYSTEM
						,@PIN_KY_USER_APP
						,@PIN_NM_PROGRAM
					FROM ADM.C_USER CU
						--JOIN ADM.VW_C_SHIFT VS ON (GETDATE() BETWEEN  CONVERT(DATETIME,((CONVERT(VARCHAR(10),GETDATE(),101)) +' '+ VS.INITIAL_SHIFT_TIME),101) AND DATEADD(HOUR, CAST(VS.NO_SHIFT_TIME AS INT) ,CONVERT(DATETIME,((CONVERT(VARCHAR(10),GETDATE(),101)) +' '+ VS.INITIAL_SHIFT_TIME),101))) 
					WHERE CU.KY_USER = @PIN_KY_USER

					SET @PIN_ID_QA27 = SCOPE_IDENTITY();

					IF @V_ID_ISSUE IS NOT NULL BEGIN
						UPDATE PRD.K_ISSUE
						SET ID_QA27 = @PIN_ID_QA27
						WHERE ID_ISSUE = @V_ID_ISSUE
					END
				END

				INSERT INTO PRD.K_SHIFT (
					  ID_C_SHIFT
					, KY_SHIFT
					, ID_SHIFT_TIME
					, KY_SHIFT_TIME
					, ID_PRODUCTION_LINE
					, ID_BRANCH_PLANT
					, KY_USER
					, KY_AUTHORIZER_USER
					, FG_STATUS
					, DT_START_SHIFT
					, DT_END_SHIFT
					, DT_SHIFT_HISTORY
					, DT_CREATION
					, KY_USER_APP_CREATION
					, NM_PROGAM_CREATE
				)
				SELECT 
					  @PIN_ID_SHIFT
				    , @PIN_KY_SHIFT --VS.KY_SHIFT
					, @PIN_ID_SHIFT_TIME
					, @PIN_KY_SHIFT_TIME
					, @PIN_ID_PRODUCTION
					, @V_ID_BRANCH_PLANT_PRODUCTION_LINE
					, @PIN_KY_USER
					, @PIN_KY_AUTHORIZER_USER
					, @PIN_FG_STATUS
					, CONVERT(DATETIME,((CONVERT(VARCHAR(10),GETDATE(),101)) +' '+ @P_INITIAL_SHIFT_TIME),101)
					, DATEADD(HOUR, CAST(@P_NO_SHIFT_TIME AS INT) ,CONVERT(DATETIME,((CONVERT(VARCHAR(10),GETDATE(),101)) +' '+ @P_INITIAL_SHIFT_TIME),101))
					, @DT_SYSTEM
					, @DT_SYSTEM
					, @PIN_KY_USER_APP
					, @PIN_NM_PROGRAM

				SET @V_ID_SHIFT = SCOPE_IDENTITY()

				UPDATE PRD.K_QA27
				SET ID_SHIFT = @V_ID_SHIFT
					, DT_UPDATE = @DT_SYSTEM
					, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
					, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
				WHERE ID_QA27 = @PIN_ID_QA27

				SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

				IF @V_ID_WORK_ORDER IS NOT NULL BEGIN
					DECLARE @XML_DATA XML = (SELECT @V_ID_WORK_ORDER AS "@ID_WORK_ORDER" FOR XML PATH('WORK_ORDER'))
					SET @XML_RESULT = DBO.F_ERROR_INSERT_DATA(@XML_RESULT, @XML_DATA)
				END

			END	ELSE BEGIN
			
				SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'ERROR')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Ya existe un operador trabajando esta linea de produccion el dia de hoy.', 'ES')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'There is already an operator working this production line today.', 'EN')
			END
		END ELSE BEGIN

			-- WE UPDATE THE REGISTER ON THE TABLE
			SELECT @V_ID_SHIFT = KS.ID_SHIFT
			FROM PRD.K_SHIFT KS
			WHERE KS.FG_STATUS = 1 
				AND KS.KY_USER = @PIN_KY_USER 
				AND KS.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION 

			UPDATE PRD.K_QA27
			SET KY_STATUS = CASE WHEN @PIN_FG_STATUS = 0 THEN 'COMPLETE' ELSE KY_STATUS END,
				DT_FINAL_TIME = CASE WHEN @PIN_FG_STATUS = 0 THEN @DT_SYSTEM ELSE DT_FINAL_TIME END,
				DT_UPDATE = @DT_SYSTEM ,
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE ID_QA27 = @PIN_ID_QA27

			UPDATE KS
			SET	FG_STATUS = @PIN_FG_STATUS,
				DT_UPDATE = @DT_SYSTEM ,
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			FROM PRD.K_SHIFT KS
			WHERE KS.FG_STATUS = 1 
				AND KS.KY_USER = @PIN_KY_USER 
				AND KS.ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION 
				

				--GET MANUFACTURE AND PROCCCES FORM CREATED TO THIS MOMMENT FOR THIS PRODUCTION LINE
			IF @V_DT_START_WORK_ORDER IS NOT NULL BEGIN

				INSERT INTO #T_K_FORM 
				SELECT KF.ID_K_FORM
				FROM PRD.K_WORK_ORDER WO
					JOIN PRD.K_FORM KF ON WO.ID_WORK_ORDER = KF.ID_WORK_ORDER
				WHERE KF.DT_FORM <= @DT_SYSTEM
					AND ISNULL(WO.ID_PRODUCTION_LINE, KF.ID_PRODUCTION_LINE) = @PIN_ID_PRODUCTION
					AND KF.KY_STATUS_FORM = 'CREATED'
					AND (KF.KY_PROCESS_TYPE = 'MANUFACTURE' OR KF.KY_PROCESS_TYPE = 'PROCESS')

			END
				
			INSERT INTO #T_NOTIFICATION_K_FORMS
			SELECT NOTI.ID_NOTIFICATION
				, CAST(NOTI.ID_K_FORM AS INT) ID_K_FORM
			FROM(
				SELECT NP.ID_NOTIFICATION
					, (SELECT TOP 1 msgs.msg.value('@KY_VALUE', 'nvarchar(50)') TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/FORM/PARAMETERS/child::node()') msgs(msg)  WHERE msgs.msg.value('@KY_PARAMETER' , 'nvarchar(max)') = 'idKForm') AS ID_K_FORM
					, NP.XML_PROCESS_CONFIGURATION
				FROM PRD.K_NOTIFICATION_PROCESS NP
			) AS NOTI
				INNER JOIN #T_K_FORM KF 
					ON NOTI.ID_K_FORM = KF.ID_K_FORM
			WHERE NOTI.ID_K_FORM IS NOT NULL
			ORDER BY 1 DESC

				----PENDING FORMS ARE CANDELED
			UPDATE KF
			SET KY_STATUS_FORM = 'CANCELLED', 
				KY_USER_AUTHORIZED_CANCEL = 'System',
				NM_USER_AUTHORIZED_CANCEL = 'System' ,
				DS_EXPLANATION_CANCEL = 'Insert or update shift',
				DT_CLOSED = @DT_SYSTEM,
				DT_UPDATE = @DT_SYSTEM,
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM 
			FROM PRD.K_FORM KF
				INNER JOIN #T_K_FORM FC 
					ON KF.ID_K_FORM = FC.ID_K_FORM

			UPDATE KFM
			SET XML_METRICS_VALUE = '<METRICS />',
				DT_UPDATE = @DT_SYSTEM, 
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			FROM PRD.K_FORM_METRICS KFM 
				INNER JOIN #T_K_FORM FC 
					ON KFM.ID_K_FORM = FC.ID_K_FORM

				----**** DELETE NOTIFICATION PROCESS AND INSERT NOTIFICATIONS SENDED FROM FORMS CANCELLED
			INSERT INTO PRD.K_NOTIFICATIONS_SENDED (KY_USER
				, KY_PROCESS_TYPE
				, KY_STATUS
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, NO_LEVEL
				, FG_ATTENDED
				, DT_CREATION
				, DT_UPDATE
				, KY_USER_APP_CREATION
				, KY_USER_APP_UPDATE
				, NM_PROGAM_CREATE
				, NM_PROGRAM_UPDATE
			)
			SELECT KY_USER
				, KY_PROCESS_TYPE
				, 'CANCELLED' --, KY_STATUS
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, NO_LEVEL
				, FG_ATTENDED
				, GETDATE()
				, NULL
				, @PIN_KY_USER
				, NULL
				, @PIN_NM_PROGRAM
				, NULL
			FROM PRD.K_NOTIFICATION_PROCESS NP 
				INNER JOIN #T_NOTIFICATION_K_FORMS KN 
					ON NP.ID_NOTIFICATION = KN.ID_NOTIFICATION
		
			DELETE NP
			FROM PRD.K_NOTIFICATION_PROCESS NP
				INNER JOIN #T_NOTIFICATION_K_FORMS KN 
					ON NP.ID_NOTIFICATION = KN.ID_NOTIFICATION

			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')			

		END
		
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT

	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES(ERROR_NUMBER(), ERROR_MESSAGE())
		EXECUTE ADM.SPE_RAISE_ERROR
			
	END CATCH
END

