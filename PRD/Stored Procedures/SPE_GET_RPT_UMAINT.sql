-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - VITEK - 2020
-- Author: DELLC
-- CREATE date: 29/06/2020
-- Description: “EXTRUSION POSTING EDITS BY DATE AND SHIFT” (R55483001_PLAS0001)
-- =============================================
CREATE PROCEDURE   [PRD].[SPE_GET_RPT_UMAINT] 
	  @PIN_DT_INITIAL DATE
	, @PIN_DT_FINAL DATE
	, @PIN_ID_BRANCH_PLANT INT	
AS   
BEGIN

	IF @PIN_ID_BRANCH_PLANT IS NULL
		SET @PIN_ID_BRANCH_PLANT = 1


	CREATE TABLE #T_QA27 (
		  ID_QA27 INT
		, ID_WORK_ORDER INT
		, ID_ITEM INT
		, NM_ITEM NVARCHAR(100)
		, KY_ITEM NVARCHAR(100) -- ADDED
		, ID_PRODUCTION_LINE INT
		, DT_INITIAL_DATE DATETIME
		, DT_FINAL_DATE DATETIME
		, KY_QA27_STATUS NVARCHAR(10)
		, KY_SHIFT NVARCHAR(2)
		, KY_SHIFT_TIME NVARCHAR(2)
		, KY_WORK_ORDER_STATUS NVARCHAR(10)
		, NO_SUM_MINUTES_PROD DECIMAL(13,5)
		, NO_SUM_MINUTES_DEV DECIMAL(13,5)
		, NO_SUM_MINUTES_DCHG DECIMAL(13,5)
		, NO_SUM_MINUTES_OTHER DECIMAL(13,5)
		, NO_SUM_MINUTES_RCHG DECIMAL(13,5)
		, NO_SUM_MINUTES_SMNT DECIMAL(13,5)
		, NO_SUM_MINUTES_UMNT DECIMAL(13,5)
		, NO_SUM_MINUTES_IDLE DECIMAL(13,5)
		, NO_SUM_MINUTES_LOST_TIME DECIMAL(13,5)
		, NO_SUM_MINUTES_DOWN_TIME DECIMAL(13,5)
		, CAUSE NVARCHAR(1000)
		
	)

	CREATE TABLE #T_SKID(
		ID_SKID INT
		, ID_QA27 INT
		, NO_COMPLETED_QTY INT
	)

	CREATE TABLE #T_ISSUE (
		ID_ISSUE INT
		, ID_QA27 INT
		, ID_WORK_ORDER INT
		, ID_PRODUCTION_LINE INT
		, ID_PROBLEM_AREA INT
		, ID_PROBLEM_CODE INT
		, KY_CODE_TYPE NVARCHAR(10)
		, DT_ISSUE DATETIME
		, FG_CONFIRMED BIT
		, DT_CONFIRMED DATETIME
		, DT_ISSUE_CLOSED DATETIME
		, KY_STATUS NVARCHAR(50)
		, NO_TIME_BEFORE_HELP INT
		, FG_LINE_DOWN BIT
		, DS_CAUSE NVARCHAR(1000)
	)

	IF OBJECT_ID('TEMPDB..#T_MINUTES') IS NULL BEGIN
		CREATE TABLE #T_MINUTES (
			ID_QA27 INT
			, ID_PRODUCTION_LINE INT
			, DT_INITIAL_DATE DATETIME
			, DT_FINAL_DATE DATETIME
			, NO_LINE_RATE DECIMAL(13,5)
			, KY_STATUS NVARCHAR(10)
			, FG_LINE_DOWN BIT
			, ID_PROBLEM_AREA INT
			, ID_PROBLEM_CODE INT
			, KY_CODE_TYPE NVARCHAR(10)
			, NO_MINUTES INT

		)
		CREATE NONCLUSTERED INDEX [IX_T_MINUTES_C] ON #T_MINUTES ([ID_QA27],ID_PRODUCTION_LINE,[DT_INITIAL_DATE]) INCLUDE ([NO_LINE_RATE])
	END ELSE BEGIN
		TRUNCATE TABLE #T_MINUTES
	END

	INSERT INTO #T_QA27 (ID_QA27, ID_WORK_ORDER, ID_PRODUCTION_LINE, DT_INITIAL_DATE, DT_FINAL_DATE, KY_QA27_STATUS, KY_SHIFT, KY_SHIFT_TIME, KY_WORK_ORDER_STATUS, ID_ITEM, NM_ITEM, KY_ITEM)
	SELECT KQ.ID_QA27
		, KQ.ID_WORK_ORDER
		, KWO.ID_PRODUCTION_LINE
		, KQ.DT_INITIAL_TIME
		, --KQ.DT_FINAL_TIME -- 
		ISNULL(KQ.DT_FINAL_TIME, GETDATE()) --, KQ.DT_FINAL_TIME ----change made by jctc
		, KQ.KY_STATUS
		, REPLACE(KS.KY_SHIFT, 'SF-', '') AS KY_SHIFT
		, ISNULL(REPLACE(KS.KY_SHIFT_TIME, 'SF-', ''), (SELECT TOP 1 SHIFT_WORD FROM ADM.C_CALENDAR  C WHERE    KQ.DT_INITIAL_TIME   BETWEEN  C.CALENDAR_DATE AND DATEADD(HOUR, 12,C.CALENDAR_DATE )))  AS KY_SHIFT_TIME
		, KWO.KY_STATUS
		, KWO.ID_ITEM
		, KWO.NM_ITEM
		, CI.KY_ITEM
	FROM PRD.K_QA27 KQ
		INNER JOIN PRD.K_SHIFT KS ON KQ.ID_SHIFT = KS.ID_SHIFT AND KS.ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT
		INNER JOIN PRD.K_WORK_ORDER KWO ON KQ.ID_WORK_ORDER = KWO.ID_WORK_ORDER
		INNER JOIN PRD.C_ITEM CI ON CI.ID_ITEM = KWO.ID_ITEM
	WHERE CAST(DT_INITIAL_TIME AS DATE) BETWEEN @PIN_DT_INITIAL AND @PIN_DT_FINAL

	INSERT INTO #T_SKID (ID_SKID, ID_QA27, NO_COMPLETED_QTY)
	SELECT KP.ID_PALLET, KP.ID_QA27, KP.NO_QUANTITY
	FROM PRD.K_PALLET KP
		INNER JOIN ADM.VW_C_PALLET_STATUS VCPS
			ON KP.KY_STATUS = VCPS.KY_PALLET_STATUS
			AND VCPS.FG_FOR_SAVE = 1
	WHERE EXISTS (SELECT TOP 1 1 FROM #T_QA27 TQ WHERE KP.ID_QA27 = TQ.ID_QA27)
	 
	
	INSERT INTO #T_ISSUE (
		ID_ISSUE
		, ID_QA27
		, ID_WORK_ORDER
		, ID_PRODUCTION_LINE
		, ID_PROBLEM_AREA
		, ID_PROBLEM_CODE
		, KY_CODE_TYPE
		, DT_ISSUE
		, FG_CONFIRMED
		, DT_CONFIRMED
		, DT_ISSUE_CLOSED
		, KY_STATUS
		, NO_TIME_BEFORE_HELP
		, FG_LINE_DOWN
		, DS_CAUSE
	)
	SELECT KI.ID_ISSUE
		, KI.ID_QA27
		, KI.ID_WORK_ORDER
		, KI.ID_PRODUCTION_LINE
		, KI.ID_PROBLEM_AREA
		, KI.ID_PROBLEM_CODE
		, CPC.KY_CODE_TYPE
		, KI.DT_ISSUE
		, KI.FG_CONFIRMED
		, KI.DT_CONFIRMED
		, ISNULL(KI.DT_ISSUE_CLOSED, GETDATE())
		, KI.KY_STATUS
		, KI.NO_TIME_BEFORE_HELP
		, KI.FG_LINE_DOWN
		, KI.DS_EXPLANATION_EVENT_CLOSED
	FROM PRD.K_ISSUE KI
		INNER JOIN PRD.C_PROBLEM_CODE CPC
			ON KI.ID_PROBLEM_CODE = CPC.ID_PROBLEM_CODE
	WHERE EXISTS (SELECT TOP 1 1 FROM #T_QA27 TQ WHERE TQ.ID_QA27 = KI.ID_QA27)


	; WITH T_MINUTES AS (
		SELECT ID_QA27, ID_PRODUCTION_LINE, DT_INITIAL_DATE, DT_FINAL_DATE, DATEDIFF(MINUTE,DT_INITIAL_DATE, DT_FINAL_DATE) AS MINUTX
		FROM #T_QA27
		
		
		
	)

	INSERT INTO #T_MINUTES (ID_QA27, ID_PRODUCTION_LINE, DT_INITIAL_DATE, DT_FINAL_DATE,NO_MINUTES)
	SELECT ID_QA27, ID_PRODUCTION_LINE, DT_INITIAL_DATE, DT_FINAL_DATE, MINUTX FROM T_MINUTES



CREATE TABLE #TEST (
ID_QA27 INT,
KY_CODE_TYPE VARCHAR(100),
KY_STATUS VARCHAR(100),
MIN_DURATION INT,
MIN_DURATION_DOWN INT


)

; WITH TEST AS (
	SELECT Q.ID_QA27, I.KY_CODE_TYPE, I.KY_STATUS,
	CASE WHEN (DT_ISSUE >= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED <= Q.DT_FINAL_DATE) THEN DATEDIFF(MINUTE, I.DT_ISSUE, I.DT_ISSUE_CLOSED) -- ENTRE EL TURNO, TODO BIEN.
	  WHEN (DT_ISSUE <= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED <= Q.DT_FINAL_DATE) THEN DATEDIFF(MINUTE, Q.DT_INITIAL_DATE, I.DT_ISSUE_CLOSED) -- EMPIEZA EN EL TURNO ANTERIOR Y TERMINÓ EN PARTE DEL TURNO ACTUAL.
      WHEN (DT_ISSUE <= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED >= Q.DT_FINAL_DATE) THEN DATEDIFF(MINUTE, Q.DT_INITIAL_DATE, Q.DT_FINAL_DATE) -- GRAVEDAD, PORQUE FUE DURANTE TODO EL TURNO ACTUAL.

WHEN (DT_ISSUE >= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED >= Q.DT_FINAL_DATE) THEN  DATEDIFF(MINUTE, I.DT_ISSUE, Q.DT_FINAL_DATE)
 ELSE 0 -- DESDE TURNOS TODAVÍA MÁS ATRÁS HASTA EL CIERRE DEL TURNO ACTUAL.
 END AS MIN_DURATION, CASE WHEN (DT_ISSUE >= Q.DT_INITIAL_DATE) AND I.FG_LINE_DOWN = 1 AND (I.DT_ISSUE_CLOSED <= Q.DT_FINAL_DATE) THEN DATEDIFF(MINUTE, I.DT_ISSUE, I.DT_ISSUE_CLOSED) -- ENTRE EL TURNO, TODO BIEN.
	  WHEN (DT_ISSUE <= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED <= Q.DT_FINAL_DATE) AND I.FG_LINE_DOWN = 1  THEN DATEDIFF(MINUTE, Q.DT_INITIAL_DATE, I.DT_ISSUE_CLOSED) -- EMPIEZA EN EL TURNO ANTERIOR Y TERMINÓ EN PARTE DEL TURNO ACTUAL.
      WHEN (DT_ISSUE <= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED >= Q.DT_FINAL_DATE) AND I.FG_LINE_DOWN = 1 THEN DATEDIFF(MINUTE, Q.DT_INITIAL_DATE, Q.DT_FINAL_DATE) -- GRAVEDAD, PORQUE FUE DURANTE TODO EL TURNO ACTUAL.
 WHEN I.FG_LINE_DOWN = 1 AND (DT_ISSUE >= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED > Q.DT_FINAL_DATE)  THEN DATEDIFF(MINUTE, I.DT_ISSUE, Q.DT_FINAL_DATE) ELSE 0 -- DESDE TURNOS TODAVÍA MÁS ATRÁS HASTA EL CIERRE DEL TURNO ACTUAL.
 END AS MIN_DURATION_DOWN FROM #T_QA27 Q INNER JOIN  #T_ISSUE I 
 ON I.ID_PRODUCTION_LINE = Q.ID_PRODUCTION_LINE
 AND (
I.DT_ISSUE  BETWEEN Q.DT_INITIAL_DATE AND Q.DT_FINAL_DATE OR
I.DT_ISSUE_CLOSED  BETWEEN Q.DT_INITIAL_DATE AND Q.DT_FINAL_DATE OR
Q.DT_INITIAL_DATE BETWEEN I.DT_ISSUE AND I.DT_ISSUE_CLOSED OR
Q.DT_FINAL_DATE BETWEEN I.DT_ISSUE AND I.DT_ISSUE_CLOSED
)

  )
   

  INSERT INTO #TEST  SELECT * FROM TEST

 -- SELECT * FROM #TEST


--		--- #################################################	SELECT * FROM #T_MINUTES
--		--   SELECT * FROM #T_MINUTES
	; WITH T_ISSUE_TIME AS (
		SELECT ID_QA27
			, COUNT(1) AS NO_TOTAL
			, SUM(CASE WHEN MIN_DURATION_DOWN = 0 AND MIN_DURATION > 0  THEN MIN_DURATION ELSE 0 END) AS NO_LINE_UP
			, SUM(CASE WHEN MIN_DURATION_DOWN <> 0 THEN MIN_DURATION_DOWN ELSE 0 END) AS NO_LINE_DOWN
		--	, SUM(CASE WHEN ISNULL(FG_LINE_DOWN, 0) = 0 THEN 1 ELSE 0 END) AS NO_PROD
			, SUM(CASE WHEN KY_CODE_TYPE = 'DEV' THEN MIN_DURATION ELSE 0 END) NO_DEV
			, SUM(CASE WHEN KY_CODE_TYPE = 'DCHG' THEN MIN_DURATION  ELSE 0 END) NO_DCHG
			, SUM(CASE WHEN KY_CODE_TYPE = 'OTHER' THEN MIN_DURATION ELSE 0 END) NO_OTHER
			, SUM(CASE WHEN KY_CODE_TYPE = 'RCHG' THEN MIN_DURATION ELSE 0 END) NO_RCHG
			, SUM(CASE WHEN KY_CODE_TYPE = 'SMNT' THEN MIN_DURATION ELSE 0 END) NO_SMNT
			, SUM(CASE WHEN KY_CODE_TYPE = 'UMNT' THEN MIN_DURATION ELSE 0 END) NO_UMNT
			, SUM(CASE WHEN KY_CODE_TYPE = 'IDLE' THEN MIN_DURATION ELSE 0 END) NO_IDLE
		FROM #TEST
		GROUP BY ID_QA27
	)


--	SELECT * FROM T_ISSUE_TIME

	UPDATE QA
	SET 
	      NO_SUM_MINUTES_LOST_TIME = CONVERT (DECIMAL(13,2), NO_LINE_UP  / 60.00)
		 ,NO_SUM_MINUTES_DOWN_TIME = CONVERT (DECIMAL(13,2),NO_LINE_DOWN  / 60.00)
	--	, NO_SUM_MINUTES_PROD = NO_PROD  / 60.00 --NO_PROD / 60.0
		, NO_SUM_MINUTES_DCHG = CONVERT (DECIMAL(13,2),NO_DCHG  / 60.00) --NO_DCHG / 60.0
		, NO_SUM_MINUTES_DEV = CONVERT (DECIMAL(13,2),NO_DEV   / 60.00) --NO_DEV / 60.0
		, NO_SUM_MINUTES_IDLE = CONVERT (DECIMAL(13,2),NO_IDLE / 60.00) --NO_IDLE / 60.0
		, NO_SUM_MINUTES_OTHER = CONVERT (DECIMAL(13,2),NO_OTHER / 60.00) --NO_IDLE / 60.0
		, NO_SUM_MINUTES_RCHG = CONVERT (DECIMAL(13,2),NO_RCHG   / 60.00) --NO_RCHG / 60.0
		, NO_SUM_MINUTES_SMNT = CONVERT (DECIMAL(13,2),NO_SMNT / 60.00) --NO_SMNT / 60.0
		, NO_SUM_MINUTES_UMNT = CONVERT (DECIMAL(13,2),NO_UMNT  / 60.00) --NO_UMNT / 60.0
	FROM #T_QA27 QA
		INNER JOIN T_ISSUE_TIME TIT
			ON QA.ID_QA27 = TIT.ID_QA27

UPDATE QA SET NO_SUM_MINUTES_PROD = CONVERT(DECIMAL(13,2),((T.NO_MINUTES - ISNULL( NO_SUM_MINUTES_DOWN_TIME*60,0)) / 60)) 
FROM #T_QA27 QA
		INNER JOIN #T_MINUTES T
			ON QA.ID_QA27 = T.ID_QA27


UPDATE QA SET CAUSE =  I.DS_CAUSE
FROM #T_QA27 QA INNER JOIN #T_ISSUE  I ON QA.ID_QA27 = I.ID_QA27 WHERE I.KY_CODE_TYPE = 'UMNT'



	SELECT ID_QA27
		, ID_WORK_ORDER
		, ID_ITEM
		, NM_ITEM
		, KY_ITEM
		, ID_PRODUCTION_LINE
		, DT_INITIAL_DATE
		, DT_FINAL_DATE
		--, KY_QA27_STATUS
		, KY_SHIFT
		, KY_SHIFT_TIME
		,CASE WHEN (ISNULL(CAST( NO_SUM_MINUTES_PROD   AS DECIMAL(13,2)) ,0.00) = 0) THEN 0 ELSE 
		(ISNULL(CAST(NO_SUM_MINUTES_PROD AS DECIMAL(13,2)) ,0.00) -
		ISNULL(CAST(  NO_SUM_MINUTES_LOST_TIME  AS DECIMAL(13,2)),0.00)
		) END AS NO_SUM_MINUTES_PROD 
		, ISNULL(CAST( NO_SUM_MINUTES_DEV  AS DECIMAL(13,2) ) ,0.00)   AS NO_SUM_MINUTES_DEV  
		, ISNULL(CAST(  NO_SUM_MINUTES_DCHG  AS DECIMAL(13,2)) ,0.00)  AS NO_SUM_MINUTES_DCHG 
		, ISNULL(CAST( NO_SUM_MINUTES_OTHER  AS DECIMAL(13,2)),0.00) AS NO_SUM_MINUTES_OTHER
		, ISNULL(CAST(  NO_SUM_MINUTES_RCHG  AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_RCHG 
		, ISNULL(CAST(  NO_SUM_MINUTES_SMNT AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_SMNT 
		, ISNULL(CAST( NO_SUM_MINUTES_UMNT AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_UMNT 
		, ISNULL(CAST(  NO_SUM_MINUTES_IDLE AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_IDLE 
		, ISNULL(CAST(  NO_SUM_MINUTES_LOST_TIME AS DECIMAL(13,2)),0.00) AS NO_SUM_MINUTES_LOST_TIME
		, ISNULL(CAST( NO_SUM_MINUTES_DOWN_TIME  AS DECIMAL(13,2)),0.00)  AS NO_SUM_MINUTES_DOWN_TIME, 
		CAUSE
		
	FROM #T_QA27
	ORDER BY  DT_INITIAL_DATE DESC

END

