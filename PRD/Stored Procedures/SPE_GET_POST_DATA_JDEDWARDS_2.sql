-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Julio Díaz
-- CREATE date: 24/06/2018
-- Description: JD Edwards post data report
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_GET_POST_DATA_JDEDWARDS_2]
	@PIN_DT_INITIAL DATE
	, @PIN_DT_FINAL DATE
	, @PIN_ID_BRANCH_PLANT INT	
AS   
BEGIN

	IF @PIN_ID_BRANCH_PLANT IS NULL
		SET @PIN_ID_BRANCH_PLANT = 1

	DECLARE @ID_WEIGHT_METRIC INT
		  , @ID_LINE_RATE_METRIC INT
		  , @ID_WEB_WIDTH_METRIC INT
		  , @ID_DIE_PUMP_METRIC INT
		  , @ID_LENGTH_METRIC INT
		  , @ID_WIDTH_METRIC INT

	SELECT TOP 1  @ID_WEIGHT_METRIC = ID_WEIGHT_METRIC
				, @ID_LINE_RATE_METRIC = ID_LBS_PER_HOUR_METRIC
				, @ID_WEB_WIDTH_METRIC = ID_WEB_WIDTH_METRIC
				, @ID_DIE_PUMP_METRIC = ID_DIE_PUMP_METRIC
				, @ID_LENGTH_METRIC = ID_LENGTH_METRIC
				, @ID_WIDTH_METRIC = ID_WIDTH_METRIC
	FROM ADM.C_BRANCH_PLANT 
	WHERE ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT

	CREATE TABLE #T_QA27 (
		ID_QA27 INT
		, ID_WORK_ORDER INT
		, ID_ITEM INT
		, NM_ITEM NVARCHAR(100)
		, KY_ITEM NVARCHAR(100) -- ADDED
		, ID_PRODUCTION_LINE INT
		, DT_INITIAL_DATE DATETIME
		, DT_FINAL_DATE DATETIME
		, KY_QA27_STATUS NVARCHAR(10)
		, KY_SHIFT NVARCHAR(2)
		, KY_SHIFT_TIME NVARCHAR(2)
		, NO_COMPLETED_QTY INT
		, KY_WORK_ORDER_STATUS NVARCHAR(10)
		, NO_SUM_MINUTES_PROD DECIMAL(13,5)
		, NO_SUM_MINUTES_DEV DECIMAL(13,5)
		, NO_SUM_MINUTES_DCHG DECIMAL(13,5)
		, NO_SUM_MINUTES_OTHER DECIMAL(13,5)
		, NO_SUM_MINUTES_RCHG DECIMAL(13,5)
		, NO_SUM_MINUTES_SMNT DECIMAL(13,5)
		, NO_SUM_MINUTES_UMNT DECIMAL(13,5)
		, NO_SUM_MINUTES_IDLE DECIMAL(13,5)
		, NO_SUM_MINUTES_LOST_TIME DECIMAL(13,5)
		, NO_SUM_MINUTES_DOWN_TIME DECIMAL(13,5)
		, NO_SUM_TOTAL DECIMAL(13,5)
		, NO_PCS_WEIGHT DECIMAL(13,5)
		, NO_EXTRUDED_LBS DECIMAL(13,5)
		, NO_RATE_LINE DECIMAL(13,5) NULL
		, NO_WEB_WIDTH DECIMAL(13,5) NULL
		, NO_DIE_PUMP DECIMAL(13,5) NULL
		, NO_WIDTH DECIMAL(13,5) NULL
		, NO_LENGTH DECIMAL(13,5) NULL
		, NO_REPORT_WIDTH DECIMAL(13,5) NULL
		, NO_REPORT_PCS INT NULL
		, NO_YIELD DECIMAL(13,5) NULL
		, NO_LOST_LBS DECIMAL(13,5) NULL
		, NO_SAVING_RATE DECIMAL(13,2) NULL
	)

	--supplying a data contract for Entity Framework
	--IF 1 = 2 BEGIN
	--	SELECT * FROM #T_QA27 WHERE 1 = 2  
	--END

	CREATE TABLE #T_SKID(
		ID_SKID INT
		, ID_QA27 INT
		, NO_COMPLETED_QTY INT
	)

	CREATE TABLE #T_ISSUE (
		ID_ISSUE INT
		, ID_QA27 INT
		, ID_WORK_ORDER INT
		, ID_PRODUCTION_LINE INT
		, ID_PROBLEM_AREA INT
		, ID_PROBLEM_CODE INT
		, KY_CODE_TYPE NVARCHAR(10)
		, DT_ISSUE DATETIME
		, FG_CONFIRMED BIT
		, DT_CONFIRMED DATETIME
		, DT_ISSUE_CLOSED DATETIME
		, KY_STATUS NVARCHAR(50)
		, NO_TIME_BEFORE_HELP INT
		, FG_LINE_DOWN BIT
	)

	IF OBJECT_ID('TEMPDB..#T_MINUTES') IS NULL BEGIN
		CREATE TABLE #T_MINUTES (
			ID_QA27 INT
			, ID_PRODUCTION_LINE INT
			, DT_INITIAL_DATE DATETIME
			, DT_FINAL_DATE DATETIME
			, NO_LINE_RATE DECIMAL(13,5)
			, KY_STATUS NVARCHAR(10)
			, FG_LINE_DOWN BIT
			, ID_PROBLEM_AREA INT
			, ID_PROBLEM_CODE INT
			, KY_CODE_TYPE NVARCHAR(10)
			, NO_MINUTES INT

		)
		CREATE NONCLUSTERED INDEX [IX_T_MINUTES_C] ON #T_MINUTES ([ID_QA27],ID_PRODUCTION_LINE,[DT_INITIAL_DATE]) INCLUDE ([NO_LINE_RATE])
	END ELSE BEGIN
		TRUNCATE TABLE #T_MINUTES
	END

	INSERT INTO #T_QA27 (ID_QA27, ID_WORK_ORDER, ID_PRODUCTION_LINE, DT_INITIAL_DATE, DT_FINAL_DATE, KY_QA27_STATUS, KY_SHIFT, KY_SHIFT_TIME, KY_WORK_ORDER_STATUS, ID_ITEM, NM_ITEM, KY_ITEM, NO_WIDTH, NO_LENGTH)
	SELECT KQ.ID_QA27
		, KQ.ID_WORK_ORDER
		, KS.ID_PRODUCTION_LINE
		, KQ.DT_INITIAL_TIME
		, --KQ.DT_FINAL_TIME -- 
		ISNULL(KQ.DT_FINAL_TIME, GETDATE()) --, KQ.DT_FINAL_TIME ----change made by jctc
		, KQ.KY_STATUS
		, REPLACE(KS.KY_SHIFT, 'SF-', '') AS KY_SHIFT
		, REPLACE(KS.KY_SHIFT_TIME, 'SF-', '') AS KY_SHIFT_TIME
		, KWO.KY_STATUS
		, KWO.ID_ITEM
		, KWO.NM_ITEM
		, CI.KY_ITEM
		, (SELECT XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'DECIMAL(13,5)') NO_WIDTH FROM [PRD].[C_ITEM_CHARACTERISTIC] CIC WHERE XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)') = 'NUMERICBOX' AND CIC.ID_METRICS = @ID_WIDTH_METRIC AND CIC.ID_ITEM = KWO.ID_ITEM )
		, (SELECT XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'DECIMAL(13,5)') NO_LENGTH FROM [PRD].[C_ITEM_CHARACTERISTIC] CIC WHERE XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)') = 'NUMERICBOX' AND CIC.ID_METRICS = @ID_LENGTH_METRIC AND CIC.ID_ITEM  = KWO.ID_ITEM)
	FROM PRD.K_QA27 KQ
		INNER JOIN PRD.K_SHIFT KS ON KQ.ID_SHIFT = KS.ID_SHIFT AND KS.ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT
		INNER JOIN PRD.K_WORK_ORDER KWO ON KQ.ID_WORK_ORDER = KWO.ID_WORK_ORDER
		INNER JOIN PRD.C_ITEM CI ON CI.ID_ITEM = KWO.ID_ITEM
	WHERE CAST(DT_INITIAL_TIME AS DATE) BETWEEN @PIN_DT_INITIAL AND @PIN_DT_FINAL

	INSERT INTO #T_SKID (ID_SKID, ID_QA27, NO_COMPLETED_QTY)
	SELECT KP.ID_PALLET, KP.ID_QA27, KP.NO_QUANTITY
	FROM PRD.K_PALLET KP
		INNER JOIN ADM.VW_C_PALLET_STATUS VCPS
			ON KP.KY_STATUS = VCPS.KY_PALLET_STATUS
			AND VCPS.FG_FOR_SAVE = 1
	WHERE EXISTS (SELECT TOP 1 1 FROM #T_QA27 TQ WHERE KP.ID_QA27 = TQ.ID_QA27)
	 
	
	INSERT INTO #T_ISSUE (
		ID_ISSUE
		, ID_QA27
		, ID_WORK_ORDER
		, ID_PRODUCTION_LINE
		, ID_PROBLEM_AREA
		, ID_PROBLEM_CODE
		, KY_CODE_TYPE
		, DT_ISSUE
		, FG_CONFIRMED
		, DT_CONFIRMED
		, DT_ISSUE_CLOSED
		, KY_STATUS
		, NO_TIME_BEFORE_HELP
		, FG_LINE_DOWN
	)
	SELECT KI.ID_ISSUE
		, KI.ID_QA27
		, KI.ID_WORK_ORDER
		, KI.ID_PRODUCTION_LINE
		, KI.ID_PROBLEM_AREA
		, KI.ID_PROBLEM_CODE
		, CPC.KY_CODE_TYPE
		, KI.DT_ISSUE
		, KI.FG_CONFIRMED
		, KI.DT_CONFIRMED
		, ISNULL(KI.DT_ISSUE_CLOSED, GETDATE())
		, KI.KY_STATUS
		, KI.NO_TIME_BEFORE_HELP
		, KI.FG_LINE_DOWN
	FROM PRD.K_ISSUE KI
		INNER JOIN PRD.C_PROBLEM_CODE CPC
			ON KI.ID_PROBLEM_CODE = CPC.ID_PROBLEM_CODE
	WHERE CAST(KI.DT_ISSUE AS DATE) BETWEEN @PIN_DT_INITIAL AND @PIN_DT_FINAL  OR 
			KI.DT_ISSUE_CLOSED BETWEEN @PIN_DT_INITIAL AND @PIN_DT_FINAL OR
			 @PIN_DT_INITIAL BETWEEN CAST(KI.DT_ISSUE AS DATE) AND CAST(KI.DT_ISSUE_CLOSED AS DATE) OR
			 @PIN_DT_FINAL BETWEEN CAST(KI.DT_ISSUE AS DATE) AND CAST(KI.DT_ISSUE_CLOSED AS DATE) 

	--SELECT * FROM  #T_ISSUE

	; WITH T_COMPLETED_QTY AS (
		SELECT ID_QA27, SUM(NO_COMPLETED_QTY) AS NO_COMPLETED_QTY
		FROM #T_SKID
		GROUP BY ID_QA27
	)

	UPDATE TQ
	SET NO_COMPLETED_QTY = ISNULL(TCQ.NO_COMPLETED_QTY, 0)
	FROM #T_QA27 TQ
		INNER JOIN T_COMPLETED_QTY TCQ
			ON TQ.ID_QA27 = TCQ.ID_QA27

	; WITH T_MINUTES AS (
		SELECT ID_QA27, ID_PRODUCTION_LINE, DT_INITIAL_DATE, DT_FINAL_DATE, DATEDIFF(MINUTE,DT_INITIAL_DATE, DT_FINAL_DATE) AS MINUTX
		FROM #T_QA27
		
		
		
	)

	INSERT INTO #T_MINUTES (ID_QA27, ID_PRODUCTION_LINE, DT_INITIAL_DATE, DT_FINAL_DATE,NO_MINUTES)
	SELECT ID_QA27, ID_PRODUCTION_LINE, DT_INITIAL_DATE, DT_FINAL_DATE, MINUTX FROM T_MINUTES
	--OPTION (MAXRECURSION 32767)

--SELECT * FROM  #T_MINUTES

--000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	CREATE TABLE #T_LINE_RATES (
		NO_LINE INT
		, ID_PRODUCTION_LINE INT
		, ID_WORK_ORDER INT
		, ID_QA27 INT
		, ID_ITEM INT
		, DT_QA27_INITIAL_TIME DATETIME
		, DT_QA27_FINAL_TIME DATETIME
		, DT_FORM_CREATION DATETIME
		, DT_NEXT_CHANGE DATETIME
		, DT_FINAL_LINE_RATE_READING DATETIME
		, NO_MINUTES_QA27 INT
		, NO_MINUTES_BETWEEN_QA27_START INT
		, NO_MINUTES_BETWEEN_READINGS INT
		, NO_LAST_VALUE DECIMAL(13,5)
		, NO_LINE_RATE_READING DECIMAL(13,5)
		, ID_K_FORM INT
	)

	INSERT INTO #T_LINE_RATES (
		NO_LINE
		, ID_PRODUCTION_LINE
		, ID_WORK_ORDER
		, ID_QA27
		, ID_ITEM
		, DT_QA27_INITIAL_TIME
		, DT_QA27_FINAL_TIME
		, DT_FORM_CREATION
		, DT_NEXT_CHANGE
		, NO_LAST_VALUE
		, NO_LINE_RATE_READING
		, ID_K_FORM

	)
	SELECT ROW_NUMBER() OVER (PARTITION BY KWO.ID_PRODUCTION_LINE, KQ.ID_QA27 ORDER BY KWO.ID_PRODUCTION_LINE, KF.DT_CREATION) AS NO_LINE
		, KWO.ID_PRODUCTION_LINE
		, KWO.ID_WORK_ORDER
		, TS.ID_QA27
		, KWO.ID_ITEM
		, KQ.DT_INITIAL_TIME AS DT_QA27_INITIAL_TIME
		, ISNULL(KQ.DT_FINAL_TIME,GETDATE()) AS DT_QA27_FINAL_TIME
		, KF.DT_CREATION AS DT_FORM_CREATION
		, LEAD (KF.DT_CREATION) OVER (PARTITION BY KWO.ID_PRODUCTION_LINE ORDER BY KWO.ID_PRODUCTION_LINE, KF.DT_CREATION) AS DT_NEXT_CHANGE
		, ISNULL(LAG (XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,5)')) OVER (PARTITION BY KWO.ID_PRODUCTION_LINE ORDER BY KWO.ID_PRODUCTION_LINE, KF.DT_CREATION), (SELECT TOP 1 KFM1.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,5)') FROM PRD.K_FORM KF1 INNER JOIN PRD.K_FORM_METRICS KFM1 ON KF1.ID_K_FORM = KFM1.ID_K_FORM AND KFM1.ID_METRICS = @ID_LINE_RATE_METRIC AND KF1.KY_PROCESS_TYPE = 'PROCESS' AND KF1.KY_STATUS_FORM = 'CAPTURED' AND KF1.DT_CREATION < KF.DT_CREATION ORDER BY KF1.DT_CREATION DESC)) AS NO_LAST_VALUE
		, XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,5)') AS NO_LINE_RATE_READING
		, KF.ID_K_FORM
	FROM PRD.K_FORM KF
		INNER JOIN #T_SKID TS
			ON KF.ID_PALLET = TS.ID_SKID
			AND KF.KY_STATUS_FORM = 'CAPTURED'
			AND KF.KY_PROCESS_TYPE = 'PROCESS'
		INNER JOIN PRD.K_QA27 KQ
			ON KQ.ID_QA27 = TS.ID_QA27
		INNER JOIN PRD.K_WORK_ORDER KWO
			ON KQ.ID_WORK_ORDER = KWO.ID_WORK_ORDER
		INNER JOIN PRD.K_FORM_METRICS KFM
			ON KF.ID_K_FORM = KFM.ID_K_FORM
			AND KFM.ID_METRICS = @ID_LINE_RATE_METRIC
			AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)') = 'NUMERICBOX'

			

	UPDATE #T_LINE_RATES
	SET NO_MINUTES_QA27 = DATEDIFF(MINUTE, DT_QA27_INITIAL_TIME, DT_QA27_FINAL_TIME)
		, NO_MINUTES_BETWEEN_QA27_START = CASE WHEN NO_LINE = 1 THEN DATEDIFF(MINUTE, DT_QA27_INITIAL_TIME, DT_FORM_CREATION) ELSE 0 END
		, NO_MINUTES_BETWEEN_READINGS = CASE WHEN DT_NEXT_CHANGE > DT_QA27_FINAL_TIME THEN DATEDIFF(MINUTE, DT_FORM_CREATION, DT_QA27_FINAL_TIME) ELSE DATEDIFF(MINUTE, DT_FORM_CREATION, DT_NEXT_CHANGE) END
		, DT_FINAL_LINE_RATE_READING = CASE WHEN DT_NEXT_CHANGE > DT_QA27_FINAL_TIME THEN DT_QA27_FINAL_TIME ELSE DT_NEXT_CHANGE END

	INSERT INTO #T_LINE_RATES (ID_PRODUCTION_LINE, ID_WORK_ORDER, ID_QA27, DT_QA27_INITIAL_TIME, DT_QA27_FINAL_TIME, NO_MINUTES_QA27, ID_ITEM)
	SELECT TQ.ID_PRODUCTION_LINE, TQ.ID_WORK_ORDER, TQ.ID_QA27, TQ.DT_INITIAL_DATE, ISNULL(TQ.DT_FINAL_DATE, GETDATE()), DATEDIFF(MINUTE, TQ.DT_INITIAL_DATE, ISNULL(TQ.DT_FINAL_DATE,GETDATE())), (SELECT ID_ITEM FROM PRD.K_WORK_ORDER WHERE ID_WORK_ORDER = TQ.ID_WORK_ORDER)
	FROM #T_QA27 TQ
	WHERE NOT EXISTS (SELECT TOP 1 1 FROM #T_LINE_RATES TLR WHERE TLR.ID_QA27 = TQ.ID_QA27)

	

	--UPDATE TLR
	--SET NO_LINE_RATE_READING = (CASE WHEN TLR.NO_LINE_RATE_READING IS NULL THEN (SELECT TOP 1 NO_LINE_RATE_READING FROM #T_LINE_RATES TLR1 WHERE TLR1.NO_LINE_RATE_READING IS NOT NULL AND TLR1.ID_PRODUCTION_LINE = TLR.ID_PRODUCTION_LINE AND TLR1.DT_QA27_INITIAL_TIME < TLR.DT_QA27_INITIAL_TIME ORDER BY TLR1.DT_QA27_INITIAL_TIME DESC) ELSE NULL END)
	--FROM #T_LINE_RATES TLR
	--WHERE TLR.NO_LINE IS NULL

	

	UPDATE TLR SET NO_LINE_RATE_READING = (SELECT TOP 1 XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,2)') FROM PRD.K_FORM_METRICS KFM INNER JOIN PRD.K_FORM KF ON KF.ID_K_FORM = KFM.ID_K_FORM AND KFM.ID_METRICS = @ID_LINE_RATE_METRIC AND KF.KY_STATUS_FORM = 'CAPTURED' AND KF.KY_PROCESS_TYPE = 'PROCESS' AND KF.ID_PRODUCTION_LINE = TLR2 .ID_PRODUCTION_LINE INNER JOIN PRD.K_WORK_ORDER WO ON WO.ID_WORK_ORDER=KF.ID_WORK_ORDER WHERE  KF.DT_CREATION <= TLR.DT_QA27_FINAL_TIME  ORDER BY KF.DT_CREATION DESC)

--	SET NO_LINE_RATE_READING = (SELECT TOP 1 XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,2)') FROM PRD.K_FORM_METRICS KFM INNER JOIN PRD.K_FORM KF ON KF.ID_K_FORM = KFM.ID_K_FORM AND KFM.ID_METRICS = @ID_LINE_RATE_METRIC AND KF.KY_STATUS_FORM = 'CAPTURED' AND KF.KY_PROCESS_TYPE = 'PROCESS' AND KF.ID_PRODUCTION_LINE = TLR2 .ID_PRODUCTION_LINE INNER JOIN PRD.K_WORK_ORDER WO ON WO.ID_WORK_ORDER=KF.ID_WORK_ORDER WHERE WO.ID_ITEM=TLR2 .ID_ITEM AND KF.DT_CREATION <= TLR.DT_QA27_FINAL_TIME  ORDER BY KF.DT_CREATION DESC)

--SET NO_LINE_RATE_READING = (SELECT TOP(1) KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,2)') AS LINE_RATE FROM #T_LINE_RATES TLR  INNER JOIN PRD.K_WORK_ORDER WO ON TLR.ID_WORK_ORDER =WO.ID_WORK_ORDER  INNER JOIN PRD.K_FORM KF ON KF.ID_QA27= TLR.ID_QA27 INNER JOIN PRD.K_FORM_METRICS KFM ON KFM.ID_K_FORM = KF.ID_K_FORM WHERE  
--KFM.ID_METRICS=66 AND ID_FORM = 3 AND WO.ID_ITEM = TLR.ID_ITEM  AND WO.ID_PRODUCTION_LINE = TLR.ID_PRODUCTION_LINE
--AND KF.KY_STATUS_FORM ='CAPTURED'  ORDER BY KF.DT_CREATION DESC)
	FROM #T_LINE_RATES TLR INNER JOIN #T_LINE_RATES TLR2 ON TLR2.ID_QA27 = TLR.ID_QA27
	--WHERE TLR.NO_LINE_RATE_READING IS NULL


 --SELECT * FROM 	#T_LINE_RATES
	
--	SELECT KF.ID_QA27, KFM.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,2)') AS LINE_RATE FROM #T_LINE_RATES TLR  INNER JOIN PRD.K_WORK_ORDER WO ON TLR.ID_WORK_ORDER =WO.ID_WORK_ORDER  INNER JOIN PRD.K_FORM KF ON KF.ID_QA27= TLR.ID_QA27 INNER JOIN PRD.K_FORM_METRICS KFM ON KFM.ID_K_FORM = KF.ID_K_FORM WHERE  
--KFM.ID_METRICS=66 AND ID_FORM = 3 AND WO.ID_ITEM = TLR.ID_ITEM  AND WO.ID_PRODUCTION_LINE = TLR.ID_PRODUCTION_LINE
--AND KF.KY_STATUS_FORM ='CAPTURED'  ORDER BY KF.DT_CREATION DESC


	UPDATE T1
	SET NO_RATE_LINE = T2.NO_LINE_RATE_READING
	FROM #T_QA27 T1
		INNER JOIN #T_LINE_RATES T2 ON T1.ID_PRODUCTION_LINE = T2.ID_PRODUCTION_LINE AND T1.ID_WORK_ORDER = T2.ID_WORK_ORDER 
	WHERE 	 T1.ID_QA27 = T2.ID_QA27

	/********** CÓDIGO AGREGADO POR GABRIEL VÁZQUEZ ***************/

	--UPDATE T1
	--SET NO_RATE_LINE = T2.NO_LINE_RATE_READING
	--FROM #T_QA27 T1
	--	INNER JOIN #T_LINE_RATES T2 ON T1.ID_PRODUCTION_LINE = T2.ID_PRODUCTION_LINE AND T1.ID_WORK_ORDER = T2.ID_WORK_ORDER AND T1.ID_QA27 = T2.ID_QA27
	--WHERE T2.NO_LINE = 1	

	--UPDATE T1
	--SET NO_RATE_LINE = T2.NO_LINE_RATE_READING
	--FROM #T_QA27 T1
	--	INNER JOIN #T_LINE_RATES T2 ON T1.ID_PRODUCTION_LINE = T2.ID_PRODUCTION_LINE AND T1.ID_WORK_ORDER = T2.ID_WORK_ORDER AND T1.ID_QA27 = T2.ID_QA27
	--WHERE T2.NO_LINE IS NULL



	--UPDATE T1 SET NO_RATE_LINE =T2.NO_POUNDS_PER_HOUR FROM  #T_QA27 T1 INNER JOIN PRD.C_PRODUCTION_LINE T2 ON  T1.ID_PRODUCTION_LINE = T2.ID_PRODUCTION_LINE
	--WHERE T1.NO_RATE_LINE IS NULL 


	/********** TERMINA CÓDIGO AGREGADO POR GABRIEL VÁZQUEZ ***************/


	--UPDATE TM
	--SET NO_LINE_RATE = TLR.NO_LINE_RATE_READING
	--	, KY_STATUS = 'READING'
	--FROM #T_MINUTES TM
	--	INNER JOIN #T_LINE_RATES TLR
	--		ON TM.ID_QA27 = TLR.ID_QA27
	--		AND TM.DT_INITIAL_DATE BETWEEN TLR.DT_FORM_CREATION AND TLR.DT_FINAL_LINE_RATE_READING

	--UPDATE TM
	--SET NO_LINE_RATE = TLR.NO_LAST_VALUE
	--	, KY_STATUS = 'FIRST'
	--FROM #T_MINUTES TM
	--	INNER JOIN #T_LINE_RATES TLR
	--		ON TM.ID_QA27 = TLR.ID_QA27	
	--		AND TLR.NO_LINE = 1
	--		AND TM.DT_INITIAL_DATE BETWEEN TLR.DT_QA27_INITIAL_TIME AND TLR.DT_FORM_CREATION

	--UPDATE TM
	--SET NO_LINE_RATE = TLR.NO_LINE_RATE_READING
	--	, KY_STATUS = 'NO READING'
	--FROM #T_MINUTES TM
	--	INNER JOIN #T_LINE_RATES TLR
	--		ON TM.ID_QA27 = TLR.ID_QA27
	--		AND TM.DT_INITIAL_DATE BETWEEN TLR.DT_QA27_INITIAL_TIME AND TLR.DT_QA27_FINAL_TIME
	--WHERE NO_LINE_RATE IS NULL


	-- validate date issue
	--SELECT * FROM #T_ISSUE

CREATE TABLE #TEST (
ID_QA27 INT,
KY_CODE_TYPE VARCHAR(100),
KY_STATUS VARCHAR(100),
MIN_DURATION INT,
MIN_DURATION_DOWN INT


)

; WITH TEST AS (
	SELECT Q.ID_QA27, I.KY_CODE_TYPE, I.KY_STATUS,
	CASE WHEN (DT_ISSUE >= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED <= Q.DT_FINAL_DATE) THEN DATEDIFF(MINUTE, I.DT_ISSUE, I.DT_ISSUE_CLOSED) -- ENTRE EL TURNO, TODO BIEN.
	  WHEN (DT_ISSUE <= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED <= Q.DT_FINAL_DATE) THEN DATEDIFF(MINUTE, Q.DT_INITIAL_DATE, I.DT_ISSUE_CLOSED) -- EMPIEZA EN EL TURNO ANTERIOR Y TERMINÓ EN PARTE DEL TURNO ACTUAL.
      WHEN (DT_ISSUE <= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED >= Q.DT_FINAL_DATE) THEN DATEDIFF(MINUTE, Q.DT_INITIAL_DATE, Q.DT_FINAL_DATE) -- GRAVEDAD, PORQUE FUE DURANTE TODO EL TURNO ACTUAL.

WHEN (DT_ISSUE >= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED >= Q.DT_FINAL_DATE) THEN  DATEDIFF(MINUTE, I.DT_ISSUE, Q.DT_FINAL_DATE)
 ELSE 0 -- DESDE TURNOS TODAVÍA MÁS ATRÁS HASTA EL CIERRE DEL TURNO ACTUAL.
 END AS MIN_DURATION, CASE WHEN (DT_ISSUE >= Q.DT_INITIAL_DATE) AND I.FG_LINE_DOWN = 1 AND (I.DT_ISSUE_CLOSED <= Q.DT_FINAL_DATE) THEN DATEDIFF(MINUTE, I.DT_ISSUE, I.DT_ISSUE_CLOSED) -- ENTRE EL TURNO, TODO BIEN.
	  WHEN (DT_ISSUE <= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED <= Q.DT_FINAL_DATE) AND I.FG_LINE_DOWN = 1  THEN DATEDIFF(MINUTE, Q.DT_INITIAL_DATE, I.DT_ISSUE_CLOSED) -- EMPIEZA EN EL TURNO ANTERIOR Y TERMINÓ EN PARTE DEL TURNO ACTUAL.
      WHEN (DT_ISSUE <= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED >= Q.DT_FINAL_DATE) AND I.FG_LINE_DOWN = 1 THEN DATEDIFF(MINUTE, Q.DT_INITIAL_DATE, Q.DT_FINAL_DATE) -- GRAVEDAD, PORQUE FUE DURANTE TODO EL TURNO ACTUAL.
 WHEN I.FG_LINE_DOWN = 1 AND (DT_ISSUE >= Q.DT_INITIAL_DATE) AND (I.DT_ISSUE_CLOSED > Q.DT_FINAL_DATE)  THEN DATEDIFF(MINUTE, I.DT_ISSUE, Q.DT_FINAL_DATE) ELSE 0 -- DESDE TURNOS TODAVÍA MÁS ATRÁS HASTA EL CIERRE DEL TURNO ACTUAL.
 END AS MIN_DURATION_DOWN FROM #T_QA27 Q INNER JOIN  #T_ISSUE I 
 ON I.ID_PRODUCTION_LINE = Q.ID_PRODUCTION_LINE
 AND (
I.DT_ISSUE  BETWEEN Q.DT_INITIAL_DATE AND Q.DT_FINAL_DATE OR
I.DT_ISSUE_CLOSED  BETWEEN Q.DT_INITIAL_DATE AND Q.DT_FINAL_DATE OR
Q.DT_INITIAL_DATE BETWEEN I.DT_ISSUE AND I.DT_ISSUE_CLOSED OR
Q.DT_FINAL_DATE BETWEEN I.DT_ISSUE AND I.DT_ISSUE_CLOSED
)


-- SELECT Q.ID_QA27, Q.DT_INITIAL_DATE, Q.DT_FINAL_DATE,
-- Q.ID_PRODUCTION_LINE, I.DT_ISSUE, I.DT_ISSUE_CLOSED FROM #T_QA27 Q INNER JOIN #T_ISSUE I ON Q.ID_PRODUCTION_LINE = I.ID_PRODUCTION_LINE
--WHERE  
-- I.DT_ISSUE  BETWEEN Q.DT_INITIAL_DATE AND Q.DT_FINAL_DATE OR (Q.DT_FINAL_DATE BETWEEN I.DT_ISSUE AND I.DT_ISSUE_CLOSED)


  )
   

  INSERT INTO #TEST  SELECT * FROM TEST

 -- SELECT * FROM #TEST


	--UPDATE TM
	--SET NO_LINE_RATE = CASE WHEN TI.FG_LINE_DOWN = 1 THEN 0 ELSE TM.NO_LINE_RATE END
	--	, FG_LINE_DOWN = ISNULL(TI.FG_LINE_DOWN, 0)
	--	--, ID_PROBLEM_AREA = TI.ID_PROBLEM_AREA
	--	--, ID_PROBLEM_CODE = TI.ID_PROBLEM_CODE
	--	, KY_CODE_TYPE = TI.KY_CODE_TYPE
	--FROM #T_MINUTES TM
	--	INNER JOIN #T_ISSUE TI
	--		ON TM.ID_PRODUCTION_LINE = TI.ID_PRODUCTION_LINE 
	--		--AND TI.ID_QA27 = TM.ID_QA27   --- debug
	--		AND TM.DT_INITIAL_DATE BETWEEN  DATEADD(MINUTE,1, TI.DT_ISSUE) AND   
	--		CASE WHEN DATEPART(HOUR,TI.DT_ISSUE) = 0 THEN DATEADD(MINUTE,-1, TI.DT_ISSUE_CLOSED) ELSE 
	--		    TI.DT_ISSUE_CLOSED END -- DEBUG 
	--		-- DATEADD(MINUTE, ISNULL(TI.NO_TIME_BEFORE_HELP, 0) * -1, TI.DT_ISSUE)


--  SELECT * FROM #T_MINUTES

	--; WITH T_LINE_RATES AS (
	--	SELECT TM.ID_PRODUCTION_LINE, TM.ID_QA27, TM.NO_LINE_RATE, COUNT(1) AS NO_SUM_MINUTES
	--	FROM #T_MINUTES TM 
	--	GROUP BY TM.ID_PRODUCTION_LINE, TM.ID_QA27, TM.NO_LINE_RATE
	--), T_EXTRUDED_LBS AS (
	--	SELECT ID_PRODUCTION_LINE, ID_QA27, SUM(ISNULL(NO_SUM_MINUTES, 0) * ISNULL(NO_LINE_RATE, 0) / 60.0) AS NO_EXTRUDED_LBS
	--	FROM T_LINE_RATES
	--	GROUP BY ID_PRODUCTION_LINE, ID_QA27
	--)

	UPDATE TQ
	SET NO_EXTRUDED_LBS = TEL.NO_LINE_RATE
	FROM #T_QA27 TQ
		INNER JOIN #T_MINUTES TEL
			ON TEL.ID_QA27 = TQ.ID_QA27


--		--- #################################################	SELECT * FROM #T_MINUTES
--		--   SELECT * FROM #T_MINUTES
	; WITH T_ISSUE_TIME AS (
		SELECT ID_QA27
			, COUNT(1) AS NO_TOTAL
			, SUM(CASE WHEN MIN_DURATION_DOWN = 0 AND MIN_DURATION > 0  THEN MIN_DURATION ELSE 0 END) AS NO_LINE_UP
			, SUM(CASE WHEN MIN_DURATION_DOWN <> 0 THEN MIN_DURATION_DOWN ELSE 0 END) AS NO_LINE_DOWN
		--	, SUM(CASE WHEN ISNULL(FG_LINE_DOWN, 0) = 0 THEN 1 ELSE 0 END) AS NO_PROD
			, SUM(CASE WHEN KY_CODE_TYPE = 'DEV' THEN MIN_DURATION ELSE 0 END) NO_DEV
			, SUM(CASE WHEN KY_CODE_TYPE = 'DCHG' THEN MIN_DURATION  ELSE 0 END) NO_DCHG
			, SUM(CASE WHEN KY_CODE_TYPE = 'OTHER' THEN MIN_DURATION ELSE 0 END) NO_OTHER
			, SUM(CASE WHEN KY_CODE_TYPE = 'RCHG' THEN MIN_DURATION ELSE 0 END) NO_RCHG
			, SUM(CASE WHEN KY_CODE_TYPE = 'SMNT' THEN MIN_DURATION ELSE 0 END) NO_SMNT
			, SUM(CASE WHEN KY_CODE_TYPE = 'UMNT' THEN MIN_DURATION ELSE 0 END) NO_UMNT
			, SUM(CASE WHEN KY_CODE_TYPE = 'IDLE' THEN MIN_DURATION ELSE 0 END) NO_IDLE
		FROM #TEST
		GROUP BY ID_QA27
	)


--	SELECT * FROM T_ISSUE_TIME

	UPDATE QA
	SET 
	      NO_SUM_MINUTES_LOST_TIME = CONVERT (DECIMAL(13,2), NO_LINE_UP  / 60.00)
		 ,NO_SUM_MINUTES_DOWN_TIME = CONVERT (DECIMAL(13,2),NO_LINE_DOWN  / 60.00)
	--	, NO_SUM_MINUTES_PROD = NO_PROD  / 60.00 --NO_PROD / 60.0
		, NO_SUM_MINUTES_DCHG = CONVERT (DECIMAL(13,2),NO_DCHG  / 60.00) --NO_DCHG / 60.0
		, NO_SUM_MINUTES_DEV = CONVERT (DECIMAL(13,2),NO_DEV   / 60.00) --NO_DEV / 60.0
		, NO_SUM_MINUTES_IDLE = CONVERT (DECIMAL(13,2),NO_IDLE / 60.00) --NO_IDLE / 60.0
		, NO_SUM_MINUTES_OTHER = CONVERT (DECIMAL(13,2),NO_OTHER / 60.00) --NO_IDLE / 60.0
		, NO_SUM_MINUTES_RCHG = CONVERT (DECIMAL(13,2),NO_RCHG   / 60.00) --NO_RCHG / 60.0
		, NO_SUM_MINUTES_SMNT = CONVERT (DECIMAL(13,2),NO_SMNT / 60.00) --NO_SMNT / 60.0
		, NO_SUM_MINUTES_UMNT = CONVERT (DECIMAL(13,2),NO_UMNT  / 60.00) --NO_UMNT / 60.0
	FROM #T_QA27 QA
		INNER JOIN T_ISSUE_TIME TIT
			ON QA.ID_QA27 = TIT.ID_QA27

-- SELECT * FROM #T_QA27


UPDATE QA SET NO_SUM_MINUTES_PROD = CONVERT(DECIMAL(13,2),((T.NO_MINUTES - ISNULL( NO_SUM_MINUTES_DOWN_TIME*60,0)) / 60)) 
FROM #T_QA27 QA
		INNER JOIN #T_MINUTES T
			ON QA.ID_QA27 = T.ID_QA27


 	CREATE TABLE #WEIGHT_QA27
    (  
       ID_QA27   INT   NOT NULL ,  
        [WEIGHT]   NVARCHAR(18)  
    )
; WITH T_PCS_WEIGHT_QA27 AS (
		SELECT TS.ID_QA27 AS ID_QA27
			, XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR(18)') AS [WEIGHT]
		FROM PRD.K_FORM KF
			INNER JOIN #T_QA27 TS
				ON KF.ID_QA27 = TS.ID_QA27
				AND KF.KY_STATUS_FORM = 'CAPTURED'
				AND KF.KY_PROCESS_TYPE IN ('MANUFACTURE')
	--			INNER JOIN PRD.K_PALLET KP ON KP.ID_PALLET = KF.ID_PALLET 
	--INNER JOIN ADM.VW_C_PALLET_STATUS VCPS
	--		ON KP.KY_STATUS = VCPS.KY_PALLET_STATUS
	--		AND VCPS.FG_FOR_SAVE = 1
			INNER JOIN PRD.K_FORM_METRICS KFM
				ON KF.ID_K_FORM = KFM.ID_K_FORM
				AND KFM.ID_METRICS = @ID_WEIGHT_METRIC
				AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)') = 'NUMERICBOX'
				AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'VARCHAR(10)') NOT IN ('','null','undefined')
				
		
	)

	--SELECT * FROM T_PCS_WEIGHT_QA27
	  INSERT INTO #WEIGHT_QA27  SELECT * FROM T_PCS_WEIGHT_QA27

	; WITH T_PCS_WEIGHT AS (
		SELECT ID_QA27
			, AVG(CAST([WEIGHT] AS DECIMAL(13,5))) AS NO_AVG_WEIGHT
		FROM #WEIGHT_QA27
		GROUP BY ID_QA27
	)
	UPDATE TQ
	
	SET NO_PCS_WEIGHT =  TPW.NO_AVG_WEIGHT  
	FROM #T_QA27 TQ
		INNER JOIN T_PCS_WEIGHT TPW
			ON TQ.ID_QA27 = TPW.ID_QA27


	UPDATE TQ SET NO_PCS_WEIGHT = (SELECT WO.NO_POUNDS  FROM PRD.K_WORK_ORDER  WO WHERE ID_WORK_ORDER = TQ.ID_WORK_ORDER) FROM #T_QA27 TQ WHERE NO_PCS_WEIGHT IS NULL
  
/******************					CONSULTA PARA OBTENER EL WEB WIDTH				**********************/

 --	; WITH T_WEB_WIDTH AS (
	--	SELECT TS.ID_QA27
	--		, AVG(XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,5)')) AS NO_AVG_WEB_WIDTH
	--	FROM PRD.K_FORM KF
	--		INNER JOIN #T_SKID TS
	--			ON KF.ID_PALLET = TS.ID_SKID
	--			AND KF.KY_STATUS_FORM = 'CAPTURED'
	--			AND KF.KY_PROCESS_TYPE = 'PROCESS'
	--		INNER JOIN PRD.K_FORM_METRICS KFM
	--			ON KF.ID_K_FORM = KFM.ID_K_FORM
	--			AND KFM.ID_METRICS = @ID_WEB_WIDTH_METRIC
	--			AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)') = 'NUMERICBOX'
	--	GROUP BY TS.ID_QA27
	--)

	
	--UPDATE TQ
	--SET NO_WEB_WIDTH = TPW.NO_AVG_WEB_WIDTH
	--FROM #T_QA27 TQ
	--	INNER JOIN T_WEB_WIDTH TPW
	--		ON TQ.ID_QA27 = TPW.ID_QA27
	
	-- SELECT * FROM #T_QA27
	--UPDATE TQ
	--	SET NO_WEB_WIDTH = (SELECT TOP 1 CASE WHEN 1 = ISNUMERIC( XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,5)')) THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,5)') ELSE 0 END  FROM PRD.K_FORM_METRICS KFM INNER JOIN PRD.K_FORM KF ON KF.ID_K_FORM = KFM.ID_K_FORM AND KFM.ID_METRICS = @ID_WEB_WIDTH_METRIC AND KF.KY_STATUS_FORM = 'CAPTURED' AND KF.KY_PROCESS_TYPE = 'PROCESS' AND KF.ID_PRODUCTION_LINE = TQ.ID_PRODUCTION_LINE ORDER BY KF.DT_FORM DESC)
	--FROM #T_QA27 TQ
	--WHERE TQ.NO_WEB_WIDTH IS NULL



 --SELECT * FROM #T_QA27

/******************					TERMINAR CONSULTA PARA OBTENER EL WEB WIDTH      	**********************/



--000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
--						
--							CÓDIGO PARA DETERMINAR EL DIE PUMP
--
--000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

--	CREATE TABLE  #T_DIE_PUMPS (
--		  NO_LINE INT
--		, ID_PRODUCTION_LINE INT
--		, ID_WORK_ORDER INT
--		, ID_QA27 INT
--		, DT_QA27_INITIAL_TIME DATETIME
--		, DT_QA27_FINAL_TIME DATETIME
--		, DT_FORM_CREATION DATETIME
--		, DT_NEXT_CHANGE DATETIME
--		, DT_FINAL_DIE_PUMP_READING DATETIME
--		, NO_MINUTES_QA27 INT
--		, NO_MINUTES_BETWEEN_QA27_START INT
--		, NO_MINUTES_BETWEEN_READINGS INT
--		, NO_LAST_VALUE DECIMAL(13,5)
--		, NO_DIE_PUMP_READING DECIMAL(13,5)
--		, ID_K_FORM INT
--	)

--	-- OBTIENE LOS VALORES DE LINE RATE CAPTURADO EN LOS FORMULARIOS DE PROCESO, 
--	INSERT INTO #T_DIE_PUMPS (
--		NO_LINE
--		, ID_PRODUCTION_LINE
--		, ID_WORK_ORDER
--		, ID_QA27
--		, DT_QA27_INITIAL_TIME
--		, DT_QA27_FINAL_TIME
--		, DT_FORM_CREATION
--		, DT_NEXT_CHANGE
--		, NO_LAST_VALUE
--		, NO_DIE_PUMP_READING
--		, ID_K_FORM

--	)
--	SELECT ROW_NUMBER() OVER (PARTITION BY KWO.ID_PRODUCTION_LINE, KQ.ID_QA27 ORDER BY KWO.ID_PRODUCTION_LINE, KF.DT_CREATION) AS NO_LINE
--		, KWO.ID_PRODUCTION_LINE
--		, KWO.ID_WORK_ORDER
--		, TS.ID_QA27
--		, KQ.DT_INITIAL_TIME AS DT_QA27_INITIAL_TIME
--		, KQ.DT_FINAL_TIME AS DT_QA27_FINAL_TIME
--		, KF.DT_CREATION AS DT_FORM_CREATION
--		, LEAD (KF.DT_CREATION) OVER (PARTITION BY KWO.ID_PRODUCTION_LINE ORDER BY KWO.ID_PRODUCTION_LINE, KF.DT_CREATION) AS DT_NEXT_CHANGE
--		, ISNULL(LAG (XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,5)')) OVER (PARTITION BY KWO.ID_PRODUCTION_LINE ORDER BY KWO.ID_PRODUCTION_LINE, KF.DT_CREATION), (SELECT TOP 1 KFM1.XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,5)') FROM PRD.K_FORM KF1 INNER JOIN PRD.K_FORM_METRICS KFM1 ON KF1.ID_K_FORM = KFM1.ID_K_FORM AND KFM1.ID_METRICS = @ID_LINE_RATE_METRIC AND KF1.KY_PROCESS_TYPE = 'PROCESS' AND KF1.KY_STATUS_FORM = 'CAPTURED' AND KF1.DT_CREATION < KF.DT_CREATION ORDER BY KF1.DT_CREATION DESC)) AS NO_LAST_VALUE
--		, XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,5)') AS NO_LINE_RATE_READING
--		, KF.ID_K_FORM
--	FROM PRD.K_FORM KF
--		INNER JOIN #T_SKID TS
--			ON KF.ID_PALLET = TS.ID_SKID
--			AND KF.KY_STATUS_FORM = 'CAPTURED'
--			AND KF.KY_PROCESS_TYPE = 'PROCESS'
--		INNER JOIN PRD.K_QA27 KQ
--			ON KQ.ID_QA27 = TS.ID_QA27
--		INNER JOIN PRD.K_WORK_ORDER KWO
--			ON KQ.ID_WORK_ORDER = KWO.ID_WORK_ORDER
--		INNER JOIN PRD.K_FORM_METRICS KFM
--			ON KF.ID_K_FORM = KFM.ID_K_FORM
--			AND KFM.ID_METRICS = @ID_DIE_PUMP_METRIC
--			AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)') = 'NUMERICBOX'


--	UPDATE #T_DIE_PUMPS
--	SET NO_MINUTES_QA27 = DATEDIFF(MINUTE, DT_QA27_INITIAL_TIME, DT_QA27_FINAL_TIME)
--		, NO_MINUTES_BETWEEN_QA27_START = CASE WHEN NO_LINE = 1 THEN DATEDIFF(MINUTE, DT_QA27_INITIAL_TIME, DT_FORM_CREATION) ELSE 0 END
--		, NO_MINUTES_BETWEEN_READINGS = CASE WHEN DT_NEXT_CHANGE > DT_QA27_FINAL_TIME THEN DATEDIFF(MINUTE, DT_FORM_CREATION, DT_QA27_FINAL_TIME) ELSE DATEDIFF(MINUTE, DT_FORM_CREATION, DT_NEXT_CHANGE) END
--		, DT_FINAL_DIE_PUMP_READING = CASE WHEN DT_NEXT_CHANGE > DT_QA27_FINAL_TIME THEN DT_QA27_FINAL_TIME ELSE DT_NEXT_CHANGE END


--	--INSERTA LOS QA27 QUE NO TIENEN FORMULARIO DE PROCESO
--	INSERT INTO #T_DIE_PUMPS (ID_PRODUCTION_LINE, ID_WORK_ORDER, ID_QA27, DT_QA27_INITIAL_TIME, DT_QA27_FINAL_TIME, NO_MINUTES_QA27)
--	SELECT TQ.ID_PRODUCTION_LINE, TQ.ID_WORK_ORDER, TQ.ID_QA27, TQ.DT_INITIAL_DATE, TQ.DT_FINAL_DATE, DATEDIFF(MINUTE, TQ.DT_INITIAL_DATE, TQ.DT_FINAL_DATE)
--	FROM #T_QA27 TQ
--	WHERE NOT EXISTS (SELECT TOP 1 1 FROM #T_DIE_PUMPS TLR WHERE TLR.ID_QA27 = TQ.ID_QA27)

--	UPDATE TLR
--	SET NO_DIE_PUMP_READING = (CASE WHEN TLR.NO_DIE_PUMP_READING IS NULL THEN (SELECT TOP 1 NO_DIE_PUMP_READING FROM #T_DIE_PUMPS TLR1 WHERE TLR1.NO_DIE_PUMP_READING IS NOT NULL AND TLR1.ID_PRODUCTION_LINE = TLR.ID_PRODUCTION_LINE AND TLR1.DT_QA27_INITIAL_TIME < TLR.DT_QA27_INITIAL_TIME ORDER BY TLR1.DT_QA27_INITIAL_TIME DESC) ELSE NULL END)
--	FROM #T_DIE_PUMPS TLR
--	WHERE TLR.NO_LINE IS NULL


--	UPDATE TLR
--	SET NO_DIE_PUMP_READING = (SELECT TOP 1 XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'DECIMAL(13,5)') FROM PRD.K_FORM_METRICS KFM INNER JOIN PRD.K_FORM KF ON KF.ID_K_FORM = KFM.ID_K_FORM AND KFM.ID_METRICS = @ID_DIE_PUMP_METRIC AND KF.KY_STATUS_FORM = 'CAPTURED' AND KF.KY_PROCESS_TYPE = 'PROCESS' AND KF.ID_PRODUCTION_LINE = TLR.ID_PRODUCTION_LINE ORDER BY KF.DT_FORM DESC)
--	FROM #T_DIE_PUMPS TLR
--	WHERE NO_DIE_PUMP_READING IS NULL

	
--	UPDATE T1
--	SET NO_DIE_PUMP = T2.NO_DIE_PUMP_READING
--	FROM #T_QA27 T1
--		INNER JOIN #T_DIE_PUMPS T2 ON T1.ID_PRODUCTION_LINE = T2.ID_PRODUCTION_LINE AND T1.ID_WORK_ORDER = T2.ID_WORK_ORDER AND T1.ID_QA27 = T2.ID_QA27
--	WHERE T2.NO_LINE = 1	

--	UPDATE T1
--	SET NO_DIE_PUMP = T2.NO_DIE_PUMP_READING
--	FROM #T_QA27 T1
--		INNER JOIN #T_DIE_PUMPS T2 ON T1.ID_PRODUCTION_LINE = T2.ID_PRODUCTION_LINE AND T1.ID_WORK_ORDER = T2.ID_WORK_ORDER AND T1.ID_QA27 = T2.ID_QA27
--	WHERE T2.NO_LINE IS NULL

--	--000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
--	--						
--	--							TERMINA CÓDIGO PARA DETERMINAR EL DIE PUMP
--	--
--	--000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


	UPDATE #T_QA27
		SET
			  NO_REPORT_WIDTH = CASE WHEN NO_WEB_WIDTH IS NOT NULL AND NO_WEB_WIDTH > 0 THEN PRD.GET_WIDTH_REPORT_ALT(NO_WEB_WIDTH, NO_LENGTH, NO_WIDTH) ELSE 0 END --AS NO_REPORT_WIDTH
			, NO_REPORT_PCS = CASE WHEN NO_WEB_WIDTH IS NOT NULL AND NO_WEB_WIDTH > 0  THEN PRD.GET_PCS_REPORT(NO_WEB_WIDTH, NO_LENGTH, NO_WIDTH) ELSE 0 END --AS NO_REPORT_PCS

	UPDATE #T_QA27
		SET
			NO_YIELD = CASE WHEN NO_WEB_WIDTH IS NOT NULL AND NO_WEB_WIDTH > 0 THEN ((NO_REPORT_WIDTH * NO_REPORT_PCS) / NO_WEB_WIDTH) ELSE 0 END

	UPDATE #T_QA27
		SET
			NO_YIELD = 1
	WHERE NO_YIELD > 1
	
	UPDATE #T_QA27
		SET
			NO_LOST_LBS = CASE WHEN NO_YIELD > 0 THEN ((NO_YIELD / NO_YIELD) + (NO_EXTRUDED_LBS / NO_YIELD)) - NO_EXTRUDED_LBS ELSE 0 END
-- verificar esta formula








--UPDATE TX SET  NO_RATE_LINE = L.NO_LINE_RATE FROM #LRATE L INNER JOIN #T_QA27 TX ON TX.ID_QA27=L.ID_QA27

	UPDATE  #T_QA27
	SET 
	NO_EXTRUDED_LBS  = CONVERT ( DECIMAL(13,2), CONVERT(DECIMAL(13,2),Q2.NO_SUM_MINUTES_PROD)) *  Q2.NO_RATE_LINE
	FROM   #T_QA27  Q2 WHERE ID_QA27 =Q2.ID_QA27 


	--UPDATE NO_SAVING_RATE =
	SELECT ID_QA27
		, ID_WORK_ORDER
		, ID_ITEM
		, NM_ITEM
		, KY_ITEM
		, ID_PRODUCTION_LINE
		, DT_INITIAL_DATE
		, DT_FINAL_DATE
		, KY_QA27_STATUS
		, KY_SHIFT
		, KY_SHIFT_TIME
		, NO_COMPLETED_QTY
		, ROUND (ISNULL(NO_PCS_WEIGHT,0.00),4,4) AS NO_PCS_WEIGHT
		, KY_WORK_ORDER_STATUS
		, 
		
		
		--CASE WHEN (ISNULL(CAST(CASE WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 12 AND NO_SUM_MINUTES_PROD > 0 THEN
		--NO_SUM_MINUTES_PROD -0.01667 WHEN NO_SUM_MINUTES_PROD = 0 THEN 0.00 ELSE  NO_SUM_MINUTES_PROD END  AS DECIMAL(13,2)) ,0.00) = 0) THEN 0 ELSE 

		--(ISNULL(CAST(CASE WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 12 AND NO_SUM_MINUTES_PROD > 0 THEN
		--NO_SUM_MINUTES_PROD -0.01667 WHEN NO_SUM_MINUTES_PROD = 0 THEN 0.00 ELSE  NO_SUM_MINUTES_PROD END AS DECIMAL(13,2)) ,0.00) -
		--ISNULL(CAST( CASE  WHEN NO_SUM_MINUTES_LOST_TIME =0 THEN 0.00 WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 0 THEN NO_SUM_MINUTES_LOST_TIME ELSE NO_SUM_MINUTES_LOST_TIME -0.01667  END AS DECIMAL(13,2)),0.00)
		--) 
		
		--END


		CASE WHEN (ISNULL(CAST( NO_SUM_MINUTES_PROD   AS DECIMAL(13,2)) ,0.00) = 0) THEN 0 ELSE 

		(ISNULL(CAST(NO_SUM_MINUTES_PROD AS DECIMAL(13,2)) ,0.00) -
		ISNULL(CAST(  NO_SUM_MINUTES_LOST_TIME  AS DECIMAL(13,2)),0.00)
		) 
		
		END
		
		
		AS NO_SUM_MINUTES_PROD 


		, ISNULL(CAST( NO_SUM_MINUTES_DEV  AS DECIMAL(13,2) ) ,0.00)   AS NO_SUM_MINUTES_DEV  
		, ISNULL(CAST(  NO_SUM_MINUTES_DCHG  AS DECIMAL(13,2)) ,0.00)  AS NO_SUM_MINUTES_DCHG 
		, ISNULL(CAST( NO_SUM_MINUTES_OTHER  AS DECIMAL(13,2)),0.00) AS NO_SUM_MINUTES_OTHER
		, ISNULL(CAST(  NO_SUM_MINUTES_RCHG  AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_RCHG 
		, ISNULL(CAST(  NO_SUM_MINUTES_SMNT AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_SMNT 
		, ISNULL(CAST( NO_SUM_MINUTES_UMNT AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_UMNT 
		, ISNULL(CAST(  NO_SUM_MINUTES_IDLE AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_IDLE 
		, ISNULL(CAST(  NO_SUM_MINUTES_LOST_TIME AS DECIMAL(13,2)),0.00) AS NO_SUM_MINUTES_LOST_TIME
		, ISNULL(CAST( NO_SUM_MINUTES_DOWN_TIME  AS DECIMAL(13,2)),0.00)  AS NO_SUM_MINUTES_DOWN_TIME

		--, ISNULL(CAST( CASE  WHEN NO_SUM_MINUTES_DEV=0 THEN 0.00  WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 0 THEN NO_SUM_MINUTES_DEV    ELSE NO_SUM_MINUTES_DEV -0.01667 END AS  DECIMAL(13,2) ) ,0.00)   AS NO_SUM_MINUTES_DEV  
		--, ISNULL(CAST( CASE  WHEN NO_SUM_MINUTES_DCHG = 0 THEN 0.00 WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 0 THEN NO_SUM_MINUTES_DCHG ELSE NO_SUM_MINUTES_DCHG -0.01667 END AS DECIMAL(13,2)) ,0.00)  AS NO_SUM_MINUTES_DCHG 
		--, ISNULL(CAST( CASE  WHEN NO_SUM_MINUTES_OTHER =0 THEN 0.00 WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 0 THEN NO_SUM_MINUTES_OTHER ELSE NO_SUM_MINUTES_OTHER -0.01667 END AS DECIMAL(13,2)),0.00) AS NO_SUM_MINUTES_OTHER
		--, ISNULL(CAST( CASE  WHEN NO_SUM_MINUTES_RCHG = 0 THEN 0.00 WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 0 THEN NO_SUM_MINUTES_RCHG ELSE NO_SUM_MINUTES_RCHG -0.01667 END AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_RCHG 
		--, ISNULL(CAST( CASE  WHEN NO_SUM_MINUTES_SMNT=0 THEN 0.00 WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 0 THEN NO_SUM_MINUTES_SMNT ELSE NO_SUM_MINUTES_SMNT-0.01667 END AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_SMNT 
		--, ISNULL(CAST( CASE  WHEN NO_SUM_MINUTES_UMNT=0 THEN 0.00 WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 0 THEN NO_SUM_MINUTES_UMNT ELSE  NO_SUM_MINUTES_UMNT-0.01667 END AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_UMNT 
		--, ISNULL(CAST( CASE  WHEN NO_SUM_MINUTES_IDLE=0 THEN 0.00 WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 0 THEN NO_SUM_MINUTES_IDLE ELSE NO_SUM_MINUTES_IDLE -0.01667 END  AS DECIMAL(13,2)) ,0.00) AS NO_SUM_MINUTES_IDLE 
		--, ISNULL(CAST( CASE  WHEN NO_SUM_MINUTES_LOST_TIME =0 THEN 0.00 WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 0 THEN NO_SUM_MINUTES_LOST_TIME ELSE NO_SUM_MINUTES_LOST_TIME -0.01667  END AS DECIMAL(13,2)),0.00) AS NO_SUM_MINUTES_LOST_TIME
		--, ISNULL(CAST( CASE  WHEN NO_SUM_MINUTES_DOWN_TIME =0 THEN 0.00 WHEN DATEPART(HOUR, DT_INITIAL_DATE) = 0 THEN NO_SUM_MINUTES_DOWN_TIME ELSE NO_SUM_MINUTES_DOWN_TIME -0.01667 END  AS DECIMAL(13,2)),0.00)  AS NO_SUM_MINUTES_DOWN_TIME
		, NO_SUM_TOTAL
		, CONVERT(DECIMAL (13,2), (ISNULL(NO_EXTRUDED_LBS  , 0.00))) AS NO_EXTRUDED_LBS
		, CAST(ROUND(ISNULL(NO_RATE_LINE, 0.00), 2) AS DECIMAL(13,2)) AS NO_RATE_LINE
		--, CAST(ROUND(ISNULL(NO_WEB_WIDTH, 0.00),2) AS DECIMAL(13,2)) AS NO_WEB_WIDTH
		, CAST(ROUND(ISNULL(NO_DIE_PUMP, 0.00), 2) AS DECIMAL(13,2)) AS NO_DIE_PUMP
		, CAST(ROUND(ISNULL(NO_LENGTH, 0.00),2) AS DECIMAL(13,2)) AS NO_LENGTH
		, CAST(ROUND(ISNULL(NO_WIDTH, 0.00),2) AS DECIMAL(13,2)) AS NO_WIDTH
		, CAST(ROUND(ISNULL(NO_REPORT_WIDTH, 0.00),2) AS DECIMAL(13,2)) AS NO_REPORT_WIDTH
		, NO_REPORT_PCS
		, CAST(ROUND(ISNULL(NO_YIELD, 0.00),2) AS DECIMAL(13,2)) AS NO_YIELD
		, CAST(ROUND(ISNULL(NO_LOST_LBS, 0.00),2) AS DECIMAL(13,2)) AS NO_LOST_LBS

		,CONVERT (DECIMAL(13,2),   CASE WHEN NO_SUM_MINUTES_PROD > 0 AND NO_RATE_LINE > 0 AND NO_COMPLETED_QTY IS NOT NULL
					  THEN( CONVERT(DECIMAL(13,2),NO_COMPLETED_QTY ) * CONVERT (DECIMAL(13,4), ISNULL(NO_PCS_WEIGHT,0.00) )  / CONVERT (DECIMAL(13,2),(ISNULL(NO_SUM_MINUTES_PROD,0.00)) * CONVERT(DECIMAL(13,2), ISNULL(NO_RATE_LINE, 0.00)) )) --* 100
					  ELSE 0.00 END 
			    * CONVERT( DECIMAL(13,4), 100)) AS NO_SAVING_RATE
	FROM #T_QA27
	ORDER BY ISNULL(DT_FINAL_DATE, DT_INITIAL_DATE) ASC, ID_WORK_ORDER

END

