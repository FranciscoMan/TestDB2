-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Javier Diaz Barron
-- CREATE date: 29/05/2017
-- Description: Report Work Order Detail 
-- =============================================
-- MODIFY: 11/06/2018 JCTC: This procedure is also used in the screen "work order data" in the section of the "Skids", 
--							if it is modified, please remap and verify that it does not mark error in the indicated screen,
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_GET_RPT_WO_DETAIL_SKIDS]
   @NO_WORK_ORDER INT
   , @DT_WORK_ORDER DATE
   , @KY_SHIFT NVARCHAR(20)
AS   
BEGIN

--GET FLAG EXISTS REDING
	DECLARE @V_ID_BRANCH_PLANT INT
		, @V_ID_LENGTH_METRIC INT
		, @V_ID_WIDTH_METRIC INT
		, @V_ID_WEIGHT_METRIC INT
		
		-----SE VAN A AGREGAR MAS PARÁMETROS CONFORME SE AGREGUEN COLUMNAS A LA BRANCH PLANT
		
	DECLARE @TB_SKIDS_PER_WO TABLE(
		ID_PALLET INT 
	)		

	INSERT INTO @TB_SKIDS_PER_WO (ID_PALLET)
	SELECT KP.ID_PALLET 
	FROM PRD.K_PALLET KP
		INNER JOIN PRD.K_WORK_ORDER WO 
			ON KP.ID_WORK_ORDER = WO.ID_WORK_ORDER
	WHERE WO.NO_WORK_ORDER = @NO_WORK_ORDER

	DECLARE @TB_SKIDS_READ_MANUFACTURE TABLE(
		ID_K_FORM INT,
		ID_PALLET INT,
		ID_FORM INT,
		KY_PROCESS_TYPE NVARCHAR(MAX),
		KY_STATUS_FORM NVARCHAR(MAX)
	)
	
	SELECT @V_ID_BRANCH_PLANT = WO.ID_BRANCH_PLANT
	FROM PRD.K_WORK_ORDER WO
	WHERE ID_WORK_ORDER = @NO_WORK_ORDER

	SELECT @V_ID_LENGTH_METRIC = BP.ID_LENGTH_METRIC
		, @V_ID_WIDTH_METRIC = BP.ID_WIDTH_METRIC
		, @V_ID_WEIGHT_METRIC = BP.ID_WEIGHT_METRIC 
	FROM ADM.C_BRANCH_PLANT BP 
	WHERE  ID_BRANCH_PLANT = @V_ID_BRANCH_PLANT
		------AQUI SE VAN A AGREGAR MAS VARIABLES COMO COLUMNAS DE METRICAS EN LA TABLA C_BRANCH_PLANT

	INSERT INTO @TB_SKIDS_READ_MANUFACTURE (
		ID_K_FORM
		, ID_PALLET
		, ID_FORM
		, KY_PROCESS_TYPE
		, KY_STATUS_FORM
	)

	SELECT ID_K_FORM, ID_PALLET, ID_FORM, KY_PROCESS_TYPE, KY_STATUS_FORM
	FROM (
		SELECT ROW_NUMBER() OVER(PARTITION BY ID_PALLET ORDER BY ID_K_FORM DESC) FORM_OLD
			, ID_K_FORM
			, ID_PALLET
			, ID_FORM
			, KY_PROCESS_TYPE
			, KY_STATUS_FORM
		FROM (
			SELECT KF.ID_K_FORM
				  ,KF.ID_PALLET
				  ,KF.ID_FORM
				  ,KF.KY_PROCESS_TYPE
				  ,KF.KY_STATUS_FORM
			  FROM PRD.K_FORM KF
			  JOIN @TB_SKIDS_PER_WO KP ON KF.ID_PALLET = KP.ID_PALLET
			 WHERE KF.KY_PROCESS_TYPE = 'MANUFACTURE'
			   AND KF.KY_STATUS_FORM = 'CAPTURED'
		) SM
	) SM2 
	WHERE FORM_OLD = 1

	DECLARE @KY_STATUS_READING NVARCHAR(50) = 'ACCEPTED'
		, @NO_ALPHA NUMERIC(36,2)
		, @NO_HYPOTHESIZED_MEAN_DIFFERENCE NUMERIC(36,2)
		, @NO_SAMPLES INT
		, @XML_CONFIGURATION XML = (SELECT TOP 1 XML_CONFIGURATION FROM ADM.S_CONFIGURATION)
		, @KY_FORM_STATUS NVARCHAR(100)

	DECLARE @TB_K_FORM_IN_SPECS TABLE (
		ID_K_FORM INT,
		ID_PALLET INT,
		KY_IN_NOMINAL_RANGE NVARCHAR(100)
	)

	DECLARE @TB_K_FORM_MANUALLY TABLE (
		ID_METRIC INT,
		ID_K_FORM INT,
		ID_PALLET INT,
		READING_VALUE NVARCHAR(MAX),
		FINISH_VALUE NVARCHAR(MAX),
		MIN_VALUE FLOAT,
		MAX_VALUE FLOAT,
		DO_MANUALLY NVARCHAR(2)
	)

	DECLARE @TB_RESULT_FORM_MANUALLY TABLE (
		ID_K_FORM INT,
		ID_PALLET INT,
		DO_MANUALLY NVARCHAR(2)
	)

	SELECT @XML_CONFIGURATION = XML_CONFIGURATION FROM ADM.S_CONFIGURATION

	SELECT @NO_ALPHA = d.value('@NO_ALPHA', 'NUMERIC(36,2)')
		, @NO_HYPOTHESIZED_MEAN_DIFFERENCE = d.value('@NO_HYPOTHESIZED_MEAN_DIFFERENCE', 'NUMERIC(36,2)')
		, @NO_SAMPLES = d.value('@NO_SAMPLES', 'INT')
	FROM @XML_CONFIGURATION.nodes('CONFIGURATIONS/TEST_T/SET_UP') AS T(d)	


	DECLARE @T_METRICS_VALUES TABLE (
		ID_METRIC INT
		, KY_METRIC NVARCHAR(50)
		, NM_METRIC NVARCHAR(100)
		, KY_FIELD_TYPE NVARCHAR(10)
		, FG_REQUIRED BIT
		, DS_TOOLTIP NVARCHAR(1000)
		, NM_UNIT NVARCHAR(20)
		, READING_VALUE NVARCHAR(MAX)
		, FINISH_VALUE NVARCHAR(MAX)
		, XML_FIELD_SETTINGS XML
		, XML_METRICS_VALUE XML
		, KY_T_TEST_RESULT NVARCHAR(20)
		, NM_T_TEST_RESULT NVARCHAR(30)
		, KY_IN_NOMINAL_RANGE NVARCHAR(10)
		, NM_IN_NOMINAL_RANGE NVARCHAR(20)
		, NO_NOMINAL_VALUE FLOAT
		, NO_CAPTURED_VALUE FLOAT
		, NO_UPPER_LIMIT FLOAT
		, NO_LOWER_LIMIT FLOAT
		, NO_SNOMINAL_VALUE FLOAT
		, NO_SUPPER_LIMIT FLOAT
		, NO_SLOWER_LIMIT FLOAT
		, KY_STATUS_FORM NVARCHAR(100)
		, NO_ORDER INT 
		, ID_K_FORM INT
		, ID_PALLET INT
	)

	INSERT INTO @T_METRICS_VALUES (
		ID_METRIC
		, KY_METRIC
		, NM_METRIC
		, KY_FIELD_TYPE
		, FG_REQUIRED
		, DS_TOOLTIP
		, NM_UNIT
		, READING_VALUE
		, FINISH_VALUE
		, XML_FIELD_SETTINGS
		, XML_METRICS_VALUE
		, KY_STATUS_FORM
		, NO_ORDER
		, ID_K_FORM
		, ID_PALLET
	)
	SELECT CIC.ID_METRICS
		, CM.KY_METRICS
		, CM.NM_METRICS
		, CM.KY_FIELD_TYPE
		, CFM.FG_VALIDATE_METRICS
		, CM.DS_TOOLTIP
		, CIC.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'NVARCHAR(50)') AS NM_UNIT
		, KFM.XML_METRICS_VALUE.value('(FIELD_TYPES/@READING_VALUE)[1]', 'NVARCHAR(50)') AS READING_VALUE
		, KFM.XML_METRICS_VALUE.value('(FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR(50)') AS FINISH_VALUE
		, CIC.XML_FIELD_SETTINGS 
		, KFM.XML_METRICS_VALUE
		, KF.KY_STATUS_FORM
		, ISNULL(CM.NO_ORDER, 0)NO_ORDER
		, KF.ID_K_FORM
		, KF.ID_PALLET
	FROM PRD.K_FORM KF
		INNER JOIN @TB_SKIDS_READ_MANUFACTURE RSM 
			ON KF.ID_K_FORM = RSM.ID_K_FORM
		INNER JOIN PRD.K_WORK_ORDER KWO
			ON KF.ID_WORK_ORDER = KWO.ID_WORK_ORDER
			AND KF.ID_K_FORM = RSM.ID_K_FORM --@PIN_ID_K_FORM
		INNER JOIN PRD.C_ITEM CI
			ON KWO.ID_ITEM = CI.ID_ITEM
		INNER JOIN PRD.C_ITEM_CHARACTERISTIC CIC
			ON CI.ID_ITEM = CIC.ID_ITEM
		INNER JOIN PRD.C_FORM_METRICS CFM
			ON CFM.ID_METRICS = CIC.ID_METRICS
			AND CFM.ID_FORM = RSM.ID_FORM --@ID_TEMPLATE_FORM 
		INNER JOIN PRD.C_METRICS CM
			ON CIC.ID_METRICS = CM.ID_METRICS
		INNER JOIN PRD.K_FORM_METRICS KFM
			ON KFM.ID_METRICS = CIC.ID_METRICS
			AND KFM.ID_K_FORM = RSM.ID_K_FORM -- @PIN_ID_K_FORM
	ORDER BY CM.NO_ORDER

	UPDATE @T_METRICS_VALUES 
	SET KY_IN_NOMINAL_RANGE = CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)')
			WHEN 'NUMERICBOX' THEN
				CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL 
					AND NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL 
					AND NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR'), '') IS NOT NULL 
					AND NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
					CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@HYSTERESIS)[1]', 'NVARCHAR(20)')
						WHEN 'ABS' THEN 
							CASE WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'FLOAT') 
								BETWEEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT') 
									AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT') 
								THEN 'YES' 
								ELSE 'NO' 
							END
						WHEN 'PCT' THEN
							CASE WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'FLOAT') 
								BETWEEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') * (1 - (XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT') / 100))
									AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') * (1 + (XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT') / 100))
								THEN 'YES' 
								ELSE 'NO' 
							END
						WHEN 'REL' THEN
							CASE WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'FLOAT') 
								BETWEEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') - XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT')
									AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') + XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT')
								THEN 'YES' 
								ELSE 'NO' 
							END
						ELSE 'NA'
					END
				END
			ELSE 
				CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR'), '') IS NULL OR NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR'), '') IS NULL THEN 'NA'
					WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR') = XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR') THEN 'YES'
					ELSE 'NO'
				END
			END


	INSERT INTO @TB_K_FORM_IN_SPECS
	SELECT ID_K_FORM ,
		  ID_PALLET,
		 KY_IN_NOMINAL_RANGE
	FROM @T_METRICS_VALUES
	GROUP BY ID_K_FORM , KY_IN_NOMINAL_RANGE, ID_PALLET


--select * from @TB_K_FORM_IN_SPECS


	INSERT INTO @TB_K_FORM_MANUALLY 
	SELECT ID_METRIC, 
		  ID_K_FORM ,
		  ID_PALLET,
		  READING_VALUE,
		  FINISH_VALUE,
		  CASE 
			   WHEN  MAX(BPL.NO_LENGTH_MIN_VALUE) IS NOT NULL 
			        THEN MAX(ISNULL(BPL.NO_LENGTH_MIN_VALUE,0))
			   WHEN max(BPWI.NO_WIDTH_MIN_VALUE) IS NOT NULL
					THEN max(BPWI.NO_WIDTH_MIN_VALUE)
			   WHEN max(BPWE.NO_WEIGHT_MIN_VALUE) IS NOT NULL
					THEN max(ISNULL(BPWE.NO_WEIGHT_MIN_VALUE,0))
			ELSE 0 END 
			MIN_VALUE,
		  
			 CASE 
			 WHEN  MAX(BPL.NO_LENGTH_MAX_VALUE) IS NOT NULL 
			        THEN MAX(ISNULL(BPL.NO_LENGTH_MAX_VALUE,0))
			   WHEN max(BPWI.NO_WIDTH_MAX_VALUE) IS NOT NULL
					THEN max(BPWI.NO_WIDTH_MAX_VALUE)
			   WHEN max(BPWE.NO_WEIGHT_MAX_VALUE) IS NOT NULL
					THEN max(ISNULL(BPWE.NO_WEIGHT_MAX_VALUE,0))
			ELSE 0 END MAX_VALUE
		,''
	FROM @T_METRICS_VALUES KFM
	LEFT JOIN ADM.C_BRANCH_PLANT BPL ON KFM.ID_METRIC = BPL.ID_LENGTH_METRIC
	LEFT JOIN ADM.C_BRANCH_PLANT BPWI ON KFM.ID_METRIC = BPWI.ID_WIDTH_METRIC
	LEFT JOIN ADM.C_BRANCH_PLANT BPWE ON KFM.ID_METRIC = BPWE.ID_WEIGHT_METRIC
	----WHERE KY_METRIC IN ('Length','Weight','Gloss','LightTransmission','Thickness','Width')
	WHERE ID_METRIC IN (@V_ID_LENGTH_METRIC,@V_ID_WIDTH_METRIC ,@V_ID_WEIGHT_METRIC) ----AQUI SE AGREGARAN MAS CAMPOS COMNFORME SE AGREGUEN COLUMNAS A LA BRANCH PLANT
	GROUP BY ID_K_FORM , READING_VALUE, ID_PALLET, ID_METRIC, FINISH_VALUE

	INSERT INTO @TB_RESULT_FORM_MANUALLY
	SELECT ID_K_FORM
		, ID_PALLET
		, CASE WHEN READING_VALUE IS NULL AND (CAST(FINISH_VALUE AS FLOAT) < MIN_VALUE OR CAST(FINISH_VALUE AS FLOAT)> MAX_VALUE) THEN 'R'
			WHEN READING_VALUE IS NULL AND (CAST(FINISH_VALUE AS FLOAT) >= MIN_VALUE OR CAST(FINISH_VALUE AS FLOAT) <= MAX_VALUE) THEN 'M'
			ELSE 'R'
		 END DO_MANUALLY
	FROM @TB_K_FORM_MANUALLY FM

	SELECT *
	FROM(
		SELECT --DISTINCT
			kp.ID_PALLET,
			KP.DT_INITIAL_TIME
			, ISNULL(REPLACE(KS.KY_SHIFT_TIME, 'SF-', ''), KS.KY_SHIFT) AS KY_SHIFT_TIME
			, KP.NO_PALLET
			, KP.NO_QUANTITY
			, CASE WHEN VCPS.FG_FOR_SAVE = 1 THEN KP.NO_QUANTITY ELSE 0 END AS NO_ACCEPTED
			, CASE WHEN VCPS.FG_FOR_SAVE = 0 THEN KP.NO_QUANTITY ELSE 0 END AS NO_REJECTED
			, VCPS.KY_TEMP_STATUS AS KY_STATUS
			, VCPS.NM_PALLET_STATUS
			, VCPS.FG_FOR_SAVE
			, KP.NM_LEADMAN
			, KP.NM_QUALITY_INSPECTOR_AGREEMENT
			, CASE WHEN SRM.ID_K_FORM IS NULL THEN 'N' ELSE '' END KY_EXIST_READING
			, CASE WHEN MIS.ID_K_FORM IS NOT NULL AND MIS.KY_IN_NOMINAL_RANGE = 'NO'  THEN 'O' ELSE '' END KY_HAS_NO_SPECS_READING
			, CASE WHEN DM.DO_MANUALLY IS NOT NULL THEN DM.DO_MANUALLY ELSE '' END DO_MANUALLY
		FROM PRD.K_PALLET KP
			INNER JOIN PRD.K_WORK_ORDER KWO
				ON KP.ID_WORK_ORDER = KWO.ID_WORK_ORDER
			INNER JOIN ADM.VW_C_PALLET_STATUS VCPS
				ON KP.KY_STATUS = VCPS.KY_PALLET_STATUS
			INNER JOIN PRD.K_QA27 KQ
				ON KQ.ID_QA27 = KP.ID_QA27
			INNER JOIN PRD.K_SHIFT KS
				ON KQ.ID_SHIFT = KS.ID_SHIFT
				--ON KP.DT_INITIAL_TIME BETWEEN KS.DT_START_SHIFT AND ISNULL(KS.DT_END_SHIFT, GETDATE())
				--AND KS.ID_PRODUCTION_LINE = KWO.ID_PRODUCTION_LINE
			LEFT JOIN @TB_SKIDS_READ_MANUFACTURE SRM ON KP.ID_PALLET = SRM.ID_PALLET
			LEFT JOIN ( SELECT * FROM  @TB_K_FORM_IN_SPECS S WHERE S.KY_IN_NOMINAL_RANGE = 'NO') MIS ON KP.ID_PALLET = MIS.ID_PALLET
			LEFT JOIN (SELECT * FROM @TB_RESULT_FORM_MANUALLY WHERE DO_MANUALLY = 'M') DM ON KP.ID_PALLET = DM.ID_PALLET
		WHERE KP.ID_WORK_ORDER = @NO_WORK_ORDER
			AND (@DT_WORK_ORDER IS NULL OR (@DT_WORK_ORDER = CAST(KP.DT_INITIAL_TIME AS DATE))) --DESCOMENTAR
		----ORDER BY KP.NO_PALLET
		)RES 
		GROUP BY 
			 ID_PALLET
			, DT_INITIAL_TIME
			, KY_SHIFT_TIME
			, NO_PALLET
			, NO_QUANTITY
			, NO_ACCEPTED
			, NO_REJECTED
			, KY_STATUS
			, NM_PALLET_STATUS
			, FG_FOR_SAVE
			, NM_LEADMAN
			, NM_QUALITY_INSPECTOR_AGREEMENT
			, KY_EXIST_READING
			, KY_HAS_NO_SPECS_READING
			, DO_MANUALLY
	 ORDER BY NO_PALLET







--	SELECT KP.DT_INITIAL_TIME
--		, ISNULL(REPLACE(KS.KY_SHIFT_TIME, 'SF-', ''), KS.KY_SHIFT) AS KY_SHIFT_TIME
--		, KP.NO_PALLET
--		, KP.NO_QUANTITY
--		, CASE WHEN VCPS.FG_FOR_SAVE = 1 THEN KP.NO_QUANTITY ELSE 0 END AS NO_ACCEPTED
--		, CASE WHEN VCPS.FG_FOR_SAVE = 0 THEN KP.NO_QUANTITY ELSE 0 END AS NO_REJECTED
--		, VCPS.KY_TEMP_STATUS AS KY_STATUS
--		, VCPS.NM_PALLET_STATUS
--		, VCPS.FG_FOR_SAVE
--		, KP.NM_LEADMAN
--		, KP.NM_QUALITY_INSPECTOR_AGREEMENT
--	FROM PRD.K_PALLET KP
--		INNER JOIN PRD.K_WORK_ORDER KWO
--			ON KP.ID_WORK_ORDER = KWO.ID_WORK_ORDER
--		INNER JOIN ADM.VW_C_PALLET_STATUS VCPS
--			ON KP.KY_STATUS = VCPS.KY_PALLET_STATUS
--		INNER JOIN PRD.K_QA27 KQ
--			ON KQ.ID_QA27 = KP.ID_QA27
--		INNER JOIN PRD.K_SHIFT KS
----			ON KQ.KY_SHIFT = KS.KY_SHIFT
--			ON KP.DT_INITIAL_TIME BETWEEN KS.DT_START_SHIFT AND ISNULL(KS.DT_END_SHIFT, GETDATE())
--			AND KS.ID_PRODUCTION_LINE = KWO.ID_PRODUCTION_LINE
--	WHERE KP.ID_WORK_ORDER = @NO_WORK_ORDER
--		AND (@DT_WORK_ORDER IS NULL OR (@DT_WORK_ORDER = CAST(KP.DT_INITIAL_TIME AS DATE)))
--	ORDER BY KP.NO_PALLET
END

