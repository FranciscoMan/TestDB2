-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Javier Diaz Barron
-- CREATE date: 25/04/2017
-- Description: get all Form Metrics by 
-- =============================================
-- 25/01/2018 JDR Bugfix at variable aquired validation against upper and lower limits
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_GET_FORM_METRICS] 
	@PIN_ID_K_FORM INT =NULL   
	   ,@PIN_ID_WORK_ORDER INT = NULL
	   ,@PIN_ID_PRODUCTION_LINE INT = NULL
	   ,@PIN_ID_FORM INT 
	   ,@PIN_ID_PALLET INT
	   ,@FG_GET_READINGS INT =0
	   
AS   
	DECLARE @KY_STATUS_READING NVARCHAR(50) = 'ACCEPTED'

	DECLARE @TB_FORMS TABLE (
		KY_PROCESS NVARCHAR(20)
		, ID_K_FORM INT
		, KY_STATUS_FORM NVARCHAR (100)
		, NO_WORK_ORDER INT
		, NO_WO_EXTRUSION INT
		, KY_ITEM NVARCHAR (50)
		, DT_WORK_ORDER DATETIME
		, NO_LENGHT FLOAT
		, NO_WIDTH FLOAT
		, NO_THICKNESS FLOAT
		, NM_ITEM NVARCHAR (100)
		, ID_PRODUCTION_LINE INT
		, NM_PRODUCTION_LINE NVARCHAR (300)
		, ID_METRICS INT
		, KY_METRICS NVARCHAR (50)
		, NM_METRICS NVARCHAR (100)
		, KY_FIELD_TYPE NVARCHAR (10)
		, NM_FIELD_TYPE VARCHAR (7)
		, FG_ENABLED VARCHAR (3)
		, FG_REQUIRED VARCHAR (3)
		, DS_TOOLTIP NVARCHAR (1000)
		, ID_BRANCH_PLANT INT
		, NM_BRANCH_PLANT NVARCHAR (300)
		, XML_FIELD_SETTINGS XML
		, NOMINAL_VALUE NVARCHAR(50)
		, NO_SAMPLE INT
		, KY_SAMPLE_UNIT NCHAR(10)
		, NO_READING_APP FLOAT NULL
		, FG_OUT_OF_NOMINAL_RANGE NVARCHAR(10) NULL
		, NO_TEST_T INT NULL
	)

	---VARIABLES DECLARED TO TEST T
	DECLARE @NO_ALPHA NUMERIC(36,2)
		, @NO_HYPOTHESIZED_MEAN_DIFFERENCE NUMERIC(36,2)
		, @NO_SAMPLES INT
		, @XML_CONFIGURATION XML

	SELECT @XML_CONFIGURATION = XML_CONFIGURATION FROM ADM.S_CONFIGURATION

	SELECT @NO_ALPHA =d.value('@NO_ALPHA', 'NUMERIC(36,2)')
		, @NO_HYPOTHESIZED_MEAN_DIFFERENCE = d.value('@NO_HYPOTHESIZED_MEAN_DIFFERENCE', 'NUMERIC(36,2)')
		, @NO_SAMPLES = d.value('@NO_SAMPLES', 'INT')
	FROM @XML_CONFIGURATION.nodes('CONFIGURATIONS/TEST_T/SET_UP') AS T(d)	

	--- END TEST T VARIABLES

	IF NOT EXISTS (SELECT 1 FROM @TB_FORMS) BEGIN
		;WITH TB_METRICS_ITEM AS (
			SELECT WO.ID_WORK_ORDER
				, WO.NO_WORK_ORDER
				, 0 AS NO_WO_EXTRUSION
				, CI.KY_ITEM
				, WO.DT_WORK_ORDER
				, WO.NO_LENGHT
				, WO.NO_WIDTH
				, WO.NO_THICKNESS
				, CI.NM_ITEM
				, WO.ID_PRODUCTION_LINE
				, WO.NM_PRODUCTION_LINE 
				, CIC.ID_METRICS
				, CIC.XML_FIELD_SETTINGS
			FROM PRD.K_WORK_ORDER WO 
				INNER JOIN PRD.C_ITEM CI 
					ON CI.ID_ITEM = WO.ID_ITEM
				INNER JOIN PRD.C_ITEM_CHARACTERISTIC CIC 
					ON CIC.ID_ITEM = CI.ID_ITEM
			WHERE WO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
		), TB_METRICS_FORM AS (
			SELECT  NULL AS ID_K_FORM
				, NULL AS KY_STATUS_FORM
				, CFM.ID_METRICS
				, CF.NO_SAMPLE
				, CF.KY_SAMPLE_UNIT
				, CFM.FG_VALIDATE_METRICS
			FROM  PRD.C_FORM CF
				INNER JOIN PRD.C_FORM_METRICS CFM 
					ON CFM.ID_FORM = CF.ID_FORM
			WHERE CF.ID_FORM = @PIN_ID_FORM
				AND CF.KY_PROCESS='MANUFACTURE'
		)  	
		
		INSERT INTO @TB_FORMS 
		SELECT 'MANUFCATURE' AS KY_PROCES	
	  	   , MF.ID_K_FORM
		   , MF.KY_STATUS_FORM
	  	   , NO_WORK_ORDER
		   , 0 AS NO_WO_EXTRUSION
		   , KY_ITEM
		   , DT_WORK_ORDER
		   , NO_LENGHT
		   , NO_WIDTH
		   , NO_THICKNESS
		   , NM_ITEM
		   , MI.ID_PRODUCTION_LINE
		   , NM_PRODUCTION_LINE
		   , CM.ID_METRICS
		   , CM.KY_METRICS
		   , CM.NM_METRICS
		   , CM.KY_FIELD_TYPE
		   , FT.NM_FIELD_TYPE
		   , CASE WHEN CM.FG_ENABLED =0 THEN 'NO' ELSE 'YES' END FG_ENABLED
		   , CASE WHEN CM.FG_REQUIRED =0 THEN 'NO' ELSE 'YES' END FG_REQUIRED
		   , CM.DS_TOOLTIP
		   , CM.ID_BRANCH_PLANT		
		   , ISNULL(CC.NM_BRANCH_PLANT,'All') AS NM_BRANCH_PLANT
		   , MI.XML_FIELD_SETTINGS
		   , RTRIM(MI.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'nvarchar(max)') + ' ' + ISNULL(MI.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'nvarchar(max)'),'')) NOMINAL_VALUE
		   , MF.NO_SAMPLE
		   , KY_SAMPLE_UNIT
		   , CASE 
		   		WHEN @FG_GET_READINGS = 1 THEN (
					SELECT  MIN(KMR.NO_VALUE) AS NO_VALUE
				   	FROM PRD.K_READINGS KR 
				   		INNER JOIN PRD.K_METRICS_READINGS KMR 
							ON KMR.ID_K_READING = KR.ID_K_READING
				   	WHERE 
				   		KMR.KY_STATUS_READING =@KY_STATUS_READING
				   		AND KMR.ID_METRICS = MI.ID_METRICS
				   		AND KR.ID_K_READING = (SELECT MAX(KRS.ID_K_READING) FROM PRD.K_READINGS KRS WHERE KRS.ID_WORK_ORDER = MI.ID_WORK_ORDER AND ID_K_FORM IS NULL)
				   	)
		   		ELSE
		   			NULL
		   	END			   	
		   	, CASE 
		   		WHEN MF.FG_VALIDATE_METRICS = 1 THEN
					CASE 
						WHEN KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'nvarchar(max)') = 'NUMERICBOX' THEN
			   				CASE WHEN
				   				CAST(KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FINISHED_VALUE)[1]', 'nvarchar(max)') AS FLOAT) BETWEEN CAST(KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@LOWER_LIMIT)[1]', 'nvarchar(max)') AS FLOAT) AND CAST(KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@UPPER_LIMIT)[1]', 'nvarchar(max)') AS FLOAT)
			   				THEN 'YES' ELSE 'NO' END
						WHEN KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'nvarchar(max)') = 'COMBOBOX' THEN
							CASE WHEN 
			   					KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'nvarchar(max)') = KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FINISHED_VALUE)[1]', 'nvarchar(max)')
							THEN 'YES' ELSE 'NO' END
						ELSE 
							NULL
						END
				ELSE
					NULL
				END
		   	 ,CASE WHEN @FG_GET_READINGS = 1
					THEN NULL
					ELSE [PRD].[F_GET_TEST_T] (@NO_ALPHA,@NO_HYPOTHESIZED_MEAN_DIFFERENCE,@NO_SAMPLES,NO_WORK_ORDER,CM.ID_METRICS) END	   					
		FROM PRD.C_METRICS CM
			INNER JOIN ADM.VW_C_FIELD_TYPE FT ON FT.KY_FIELD_TYPE= CM.KY_FIELD_TYPE
			LEFT JOIN ADM.C_BRANCH_PLANT CC ON CC.ID_BRANCH_PLANT = CM.ID_BRANCH_PLANT	
			INNER JOIN TB_METRICS_ITEM MI ON MI.ID_METRICS = CM.ID_METRICS
			INNER JOIN TB_METRICS_FORM MF ON MF.ID_METRICS = CM.ID_METRICS
			LEFT JOIN PRD.K_FORM KF ON KF.ID_K_FORM = @PIN_ID_K_FORM AND KF.KY_STATUS_FORM NOT IN ('CANCELLED')
			LEFT JOIN PRD.K_FORM_METRICS KFM ON KF.ID_K_FORM = KFM.ID_K_FORM AND KFM.ID_METRICS = CM.ID_METRICS
		
		
		
	
	END
	

	IF NOT EXISTS (SELECT 1 FROM @TB_FORMS)
	BEGIN
	
		;WITH TB_METRICS_LINE AS 
		(
			SELECT WO.NO_WORK_ORDER
				, 0 NO_WO_EXTRUSION
				, (SELECT KY_ITEM FROM PRD.C_ITEM WHERE ID_ITEM = WO.ID_ITEM) KY_ITEM
				, WO.DT_WORK_ORDER
				, WO.NO_LENGHT
				, WO.NO_WIDTH
				, WO.NO_THICKNESS
				, WO.NM_ITEM
				, WO.ID_PRODUCTION_LINE
				, WO.NM_PRODUCTION_LINE
				, LM.ID_METRICS
				, LM.XML_FIELD_SETTINGS
			FROM PRD.K_WORK_ORDER WO 
				INNER JOIN PRD.C_PRODUCTION_LINE PL 
					ON PL.ID_PRODUCTION_LINE = WO.ID_PRODUCTION_LINE
				INNER JOIN PRD.C_LINE_METRIC LM 
					ON LM.ID_PRODUCTION_LINE = PL.ID_PRODUCTION_LINE
				LEFT JOIN PRD.C_DEVICE_METRICS DM 
					ON DM.ID_DEVICE_METRICS = LM.ID_DEVICE_METRICS
			WHERE 
				PL.ID_PRODUCTION_LINE =@PIN_ID_PRODUCTION_LINE
				AND WO.KY_STATUS='RUNNING'
		)
		,TB_METRICS_FORM AS 
		(
			SELECT NULL ID_K_FORM,NULL KY_STATUS_FORM,CFM.ID_METRICS,CF.NO_SAMPLE,CF.KY_SAMPLE_UNIT,CFM.FG_VALIDATE_METRICS
			FROM  PRD.C_FORM CF
			INNER JOIN PRD.C_FORM_METRICS CFM ON CFM.ID_FORM = CF.ID_FORM
			--LEFT JOIN PRD.K_FORM KF ON CF.ID_FORM = KF.ID_FORM		
			WHERE 
				CF.ID_FORM= @PIN_ID_FORM
				--AND (@PIN_ID_K_FORM IS NULL OR (@PIN_ID_K_FORM IS NOT NULL AND KF.ID_K_FORM =@PIN_ID_K_FORM))
				AND CF.KY_PROCESS='PROCESS'
		)	
		INSERT INTO @TB_FORMS
		SELECT 
			'PROCESS_VARIABLES' KY_PROCES	
	  	   ,MF.ID_K_FORM,KY_STATUS_FORM
	  	   ,NO_WORK_ORDER,0 NO_WO_EXTRUSION,KY_ITEM,DT_WORK_ORDER,NO_LENGHT,NO_WIDTH,NO_THICKNESS,NM_ITEM,ID_PRODUCTION_LINE,NM_PRODUCTION_LINE
		   ,CM.ID_METRICS
		   ,CM.KY_METRICS
		   ,CM.NM_METRICS
		   ,CM.KY_FIELD_TYPE
		   ,FT.NM_FIELD_TYPE
		   ,CASE WHEN CM.FG_ENABLED =0 THEN 'NO' ELSE 'YES' END FG_ENABLED
		   ,CASE WHEN CM.FG_REQUIRED =0 THEN 'NO' ELSE 'YES' END FG_REQUIRED
		   ,CM.DS_TOOLTIP
		   ,CM.ID_BRANCH_PLANT		
		   ,ISNULL(CC.NM_BRANCH_PLANT,'All') AS NM_BRANCH_PLANT
		   ,ML.XML_FIELD_SETTINGS
		   ,RTRIM(ML.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'nvarchar(max)') + ' ' + ISNULL(ML.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'nvarchar(max)'),'')) NOMINAL_VALUE
		   ,MF.NO_SAMPLE
		   ,KY_SAMPLE_UNIT
		   ,NULL
		   	, CASE 
		   		WHEN MF.FG_VALIDATE_METRICS = 1 THEN
					CASE 
						WHEN KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'nvarchar(max)') = 'NUMERICBOX' THEN
			   				CASE WHEN
				   				CAST(KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FINISHED_VALUE)[1]', 'nvarchar(max)') AS FLOAT) BETWEEN CAST(KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@LOWER_LIMIT)[1]', 'nvarchar(max)') AS FLOAT) AND CAST(KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@UPPER_LIMIT)[1]', 'nvarchar(max)') AS FLOAT)
			   				THEN 'YES' ELSE 'NO' END
						WHEN KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'nvarchar(max)') = 'COMBOBOX' THEN
							CASE WHEN 
			   					KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'nvarchar(max)') = KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FINISHED_VALUE)[1]', 'nvarchar(max)')
							THEN 'YES' ELSE 'NO' END
						ELSE 
							NULL
						END
				ELSE
					NULL
				END
		   	 ,CASE WHEN @FG_GET_READINGS = 1
					THEN NULL
					ELSE [PRD].[F_GET_TEST_T] (@NO_ALPHA,@NO_HYPOTHESIZED_MEAN_DIFFERENCE,@NO_SAMPLES,NO_WORK_ORDER,CM.ID_METRICS) END	  
		FROM PRD.C_METRICS CM
		INNER JOIN ADM.VW_C_FIELD_TYPE FT ON FT.KY_FIELD_TYPE= CM.KY_FIELD_TYPE
		LEFT JOIN ADM.C_BRANCH_PLANT CC ON CC.ID_BRANCH_PLANT = CM.ID_BRANCH_PLANT	
		INNER JOIN TB_METRICS_LINE ML ON ML.ID_METRICS = CM.ID_METRICS
		INNER JOIN TB_METRICS_FORM MF ON MF.ID_METRICS = CM.ID_METRICS
		LEFT  JOIN PRD.K_FORM_METRICS KFM ON KFM.ID_K_FORM =@PIN_ID_K_FORM AND KFM.ID_METRICS = CM.ID_METRICS
	END	
	
	IF NOT EXISTS (SELECT 1 FROM @TB_FORMS)
	BEGIN
		INSERT INTO @TB_FORMS
		SELECT 
			'QUALITY' KY_PROCES	
	  	   ,NULL ID_K_FORM,NULL KY_STATUS_FORM
	  	   ,NO_WORK_ORDER,0 NO_WO_EXTRUSION,KY_ITEM,DT_WORK_ORDER,NO_LENGHT,NO_WIDTH,NO_THICKNESS,CI.NM_ITEM,WO.ID_PRODUCTION_LINE,NM_PRODUCTION_LINE
		   ,CM.ID_METRICS
		   ,CM.KY_METRICS
		   ,CM.NM_METRICS
		   ,CM.KY_FIELD_TYPE
		   ,FT.NM_FIELD_TYPE
		   ,CASE WHEN CM.FG_ENABLED =0 THEN 'NO' ELSE 'YES' END FG_ENABLED
		   ,CASE WHEN CM.FG_REQUIRED =0 THEN 'NO' ELSE 'YES' END FG_REQUIRED
		   ,CM.DS_TOOLTIP
		   ,CM.ID_BRANCH_PLANT		
		   ,ISNULL(CC.NM_BRANCH_PLANT,'All') AS NM_BRANCH_PLANT
		   ,CM.XML_FIELD_SETTINGS
		   ,RTRIM(CM.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'nvarchar(max)') + ' ' + ISNULL(CM.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'nvarchar(max)'),'')) NOMINAL_VALUE
		   ,CF.NO_SAMPLE
		   ,CF.KY_SAMPLE_UNIT
		   ,CASE 
		   		WHEN @FG_GET_READINGS = 1
					THEN 
						   ISNULL(
								(SELECT MIN(NO_VALUE) FROM (
									SELECT 
										KMR.ID_METRICS, 
										KMR.NO_VALUE,
										COUNT(1) COUNT
									 
							   		FROM PRD.K_READINGS KR 
							   		INNER JOIN PRD.K_METRICS_READINGS KMR ON KMR.ID_K_READING = KR.ID_K_READING
							   		WHERE 
							   			KMR.KY_STATUS_READING =@KY_STATUS_READING   		
							   			AND KR.ID_PALLET=@PIN_ID_PALLET
							   			AND KMR.ID_METRICS =CFM.ID_METRICS
							   			AND KR.ID_K_FORM IS NULL   		
									GROUP BY KMR.ID_METRICS, NO_VALUE				
									HAVING COUNT(1) > 1
								)F)
								,
							
								(SELECT 
									--ID_METRICS, 
									SUM(NO_VALUE)/ METRICS_COUNT
								FROM (
							
									SELECT 
									KMR.ID_METRICS, 
									KMR.NO_VALUE,
									(SELECT COUNT(1) FROM PRD.K_METRICS_READINGS WHERE ID_K_READING = KR.ID_K_READING AND ID_METRICS = KMR.ID_METRICS) METRICS_COUNT
						   		FROM PRD.K_READINGS KR 
						   		INNER JOIN PRD.K_METRICS_READINGS KMR ON KMR.ID_K_READING = KR.ID_K_READING
						   		WHERE 
						   			KMR.KY_STATUS_READING =@KY_STATUS_READING   		
						   			AND KR.ID_PALLET=@PIN_ID_PALLET
						   			AND KMR.ID_METRICS =CFM.ID_METRICS
						   			AND KR.ID_K_FORM IS NULL	   			
						   		)F
						   		GROUP BY ID_METRICS,METRICS_COUNT	   	  
						   		)		
					   		)
			  	ELSE
			  		0
			END	  
		   	, CASE 
		   		WHEN CFM.FG_VALIDATE_METRICS = 1 THEN
					CASE 
						WHEN KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'nvarchar(max)') = 'NUMERICBOX' THEN
			   				CASE WHEN
				   				CAST(KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FINISHED_VALUE)[1]', 'nvarchar(max)') AS FLOAT) BETWEEN CAST(KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@LOWER_LIMIT)[1]', 'nvarchar(max)') AS FLOAT) AND CAST(KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@UPPER_LIMIT)[1]', 'nvarchar(max)') AS FLOAT)
			   				THEN 'YES' ELSE 'NO' END
						WHEN KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'nvarchar(max)') = 'COMBOBOX' THEN
							CASE WHEN 
			   					KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'nvarchar(max)') = KFM.XML_METRICS_VALUE.value('(/SETTINGS/FIELD_TYPES/@FINISHED_VALUE)[1]', 'nvarchar(max)')
							THEN 'YES' ELSE 'NO' END
						ELSE 
							NULL
						END
				ELSE
					NULL
				END
		   	,CASE WHEN @FG_GET_READINGS = 1
					THEN NULL
					ELSE [PRD].[F_GET_TEST_T] (@NO_ALPHA,@NO_HYPOTHESIZED_MEAN_DIFFERENCE,@NO_SAMPLES,NO_WORK_ORDER,CM.ID_METRICS) END	
		FROM PRD.C_FORM CF	
		INNER JOIN PRD.C_FORM_METRICS CFM ON CFM.ID_FORM = CF.ID_FORM
		--LEFT JOIN PRD.K_FORM KF ON CF.ID_FORM = KF.ID_FORM
		INNER JOIN PRD.C_METRICS CM ON CM.ID_METRICS = CFM.ID_METRICS
		INNER JOIN ADM.VW_C_FIELD_TYPE FT ON FT.KY_FIELD_TYPE= CM.KY_FIELD_TYPE
		LEFT JOIN ADM.C_BRANCH_PLANT CC ON CC.ID_BRANCH_PLANT = CM.ID_BRANCH_PLANT	
		INNER JOIN PRD.K_WORK_ORDER WO ON WO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
		INNER JOIN PRD.C_ITEM CI ON CI.ID_ITEM = WO.ID_ITEM
		INNER JOIN PRD.C_ITEM_CHARACTERISTIC CIC ON CIC.ID_ITEM=CI.ID_ITEM
		LEFT  JOIN PRD.K_FORM_METRICS KFM ON KFM.ID_K_FORM =@PIN_ID_K_FORM AND KFM.ID_METRICS = CFM.ID_METRICS
		WHERE 
			CF.ID_FORM =@PIN_ID_FORM
			AND CIC.ID_METRICS = CFM.ID_METRICS
			--AND (@PIN_ID_K_FORM IS NULL OR (@PIN_ID_K_FORM IS NOT NULL AND KF.ID_K_FORM =@PIN_ID_K_FORM))
			AND CF.KY_PROCESS='QUALITY'
	END	

	SELECT * FROM @TB_FORMS

