
-- =============================================
-- Proyecto: Plaskolite
-- Author: Julio Díaz
-- CRETAE date: 01/20/2019
-- Description: Inserts skids to work order
-- =============================================
-- ** Modified by: Daniel Davalos
-- Description: Work Order verification status added
-- =============================================
-- ** Modified by: Daniel Davalos
-- Description: Unproductive event verification added
-- =============================================


CREATE PROCEDURE  [PRD].[SPE_INSERT_QA27_SKIDS] 
	@XML_RESULT XML = '' OUT
	, @NO_RESULT INT = 0 OUT
	, @PIN_ID_QA27 INT
	, @PIN_NO_SKID INT
	, @PIN_KY_USER_APP AS nvarchar(50)
	, @PIN_NM_PROGRAM AS nvarchar(50)

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
		,@DT_SYSTEM DATETIME = GETDATE()

   	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	

		--Debemos verificar que la work order no tenga un evento improductivo activo, antes de insertar skids
		DECLARE @V_ID_WORK_ORDER INT = (
			SELECT TOP 1 ID_WORK_ORDER FROM PRD.K_QA27 WHERE ID_QA27 = @PIN_ID_QA27
		)
		DECLARE @V_KY_WO_STATUS NVARCHAR(50) = (
			SELECT TOP 1 KY_STATUS FROM PRD.K_WORK_ORDER WHERE ID_WORK_ORDER = @V_ID_WORK_ORDER
		)

		DECLARE @V_UMPRODUCTIVE_EVENT NVARCHAR(50) = (
			SELECT TOP 1 KY_STATUS
			FROM PRD.K_ISSUE
			WHERE ID_WORK_ORDER = @V_ID_WORK_ORDER
			ORDER BY DT_ISSUE DESC
		)
		
		IF((@V_UMPRODUCTIVE_EVENT IS NULL OR @V_UMPRODUCTIVE_EVENT = 'CLOSED') AND @V_KY_WO_STATUS = 'RUNNING')
			BEGIN
			DECLARE @NO_LAST_SKID INT
  			, @ID_WORK_ORDER INT
  			, @NO_SKID_QTY INT
  			, @NO_WORKING_SKIDS_QTY INT
  			, @KY_USER_LEADMAN NVARCHAR(50)
  			, @ID_LEADMAN INT
  			, @NM_LEADMAN NVARCHAR(200)
  
  			CREATE TABLE #T_SKID  (
  				NO_SKID INT
  				, KY_SKID_STATUS NVARCHAR(20)
  			)
  
  			SELECT TOP 1 @NO_LAST_SKID = KP.NO_PALLET 
  				, @ID_WORK_ORDER = KP.ID_WORK_ORDER
  				, @NO_SKID_QTY = KWO.NO_QTY_SKID
  				, @NO_WORKING_SKIDS_QTY = KP.NO_PALLETS_OPENED
  				, @KY_USER_LEADMAN = CU.KY_USER
  				, @ID_LEADMAN = CE.ID_POSITION
  				, @NM_LEADMAN = CU.NM_USER
  			FROM PRD.K_PALLET KP 
  				INNER JOIN PRD.K_WORK_ORDER KWO
  					ON KP.ID_WORK_ORDER = KWO.ID_WORK_ORDER
  				INNER JOIN PRD.K_QA27 KQ
  					ON KWO.ID_WORK_ORDER = KQ.ID_WORK_ORDER 
  					AND KQ.ID_QA27 = @PIN_ID_QA27
  				LEFT JOIN ADM.C_EMPLOYEE CE
  					ON KQ.ID_LEADMAN = CE.ID_EMPLOYEE
  				LEFT JOIN ADM.C_USER CU
  					ON CE.ID_EMPLOYEE = CU.ID_EMPLOYEE
  					AND CU.FG_ACTIVE = 1
  			ORDER BY NO_PALLET DESC
  
  			UPDATE PRD.K_PALLET
  			SET FG_SEND_FORM = 0
  				, KY_STATUS = 'ACCEPTED'
  				, DT_UPDATE = @DT_SYSTEM
  				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
  				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
  			WHERE FG_SEND_FORM = 1
  				AND ID_WORK_ORDER = @ID_WORK_ORDER
  
  			; WITH T_SKIDS AS (
  				SELECT @NO_LAST_SKID + 1 AS NO_SKID WHERE @NO_LAST_SKID < @PIN_NO_SKID UNION ALL
  				SELECT NO_SKID + 1 FROM T_SKIDS WHERE NO_SKID < @PIN_NO_SKID
  			)
  			INSERT INTO #T_SKID (
  				NO_SKID
  			)
  			SELECT NO_SKID
  			FROM T_SKIDS
  
  			UPDATE TS
  			SET KY_SKID_STATUS = KIS.KY_STATUS
  			FROM #T_SKID TS
  				INNER JOIN PRD.K_INSPECTION_SKID KIS
  					ON TS.NO_SKID = KIS.NO_PALLET
  					AND KIS.ID_WORK_ORDER = @ID_WORK_ORDER
  
  			INSERT INTO PRD.K_PALLET (
  			  ID_QA27
  			, ID_WORK_ORDER
  			, NO_PALLET
  			, NO_QUANTITY
  			, DT_INITIAL_TIME
  			, DT_FINAL_TIME
  			, DT_FINAL_OPERATION_TIME
  			, KY_STATUS
  			, KY_USER_INSPECTOR
  			, ID_QUALITY_INSPECTOR_AGREEMENT
  			, NM_QUALITY_INSPECTOR_AGREEMENT
  			, FG_INSPECTOR_AGREEMENT
  			, DT_INSPECTOR_AGREEMENT
  			, KY_USER_LEADMAN
  			, ID_LEADMAN
  			, NM_LEADMAN
  			, FG_LEADMAN
  			, DT_LEADMAN
  			, KY_FIRST_LEVEL_USER
  			, ID_FIRST_LEVEL_EMPLOYEE
  			, NM_FIRST_LEVEL_EMPLOYEE
  			, FG_FIRST_LEVEL_EMPLOYEE
  			, DT_FIRST_LEVEL_EMPLOYEE
  			, KY_SECOND_LEVEL_USER_REJECTION
  			, ID_SECOND_LEVEL_EMPLOYEE_REJECTION
  			, NM_SECOND_LEVEL_EMPLOYEE_REJECTION
  			, FG_SECOND_LEVEL_EMPLOYEE_REJECTION
  			, DT_SECOND_LEVEL_EMPLOYEE_REJECTION
  			, KY_THIRD_LEVEL_USER_REJECTION
  			, ID_THIRD_LEVEL_EMPLOYEE_REJECTION
  			, NM_THIRD_LEVEL_EMPLOYEE_REJECTION
  			, FG_THIRD_LEVEL_EMPLOYEE_REJECTION
  			, DT_THIRD_LEVEL_EMPLOYEE_REJECTION
  			, FG_SEND_FORM
  			, NO_PALLETS_OPENED
  			, DT_CREATION
  			, KY_USER_APP_CREATION
  			, NM_PROGAM_CREATE
  			)
  			SELECT @PIN_ID_QA27 AS ID_QA27
  			, @ID_WORK_ORDER AS ID_WORK_ORDER
  			, TS.NO_SKID AS NO_PALLET
  			, @NO_SKID_QTY AS NO_QUANTITY
  			, @DT_SYSTEM AS DT_INITIAL_TIME
  			, NULL AS DT_FINAL_TIME
  			, CASE WHEN TS.NO_SKID <= @PIN_NO_SKID - @NO_WORKING_SKIDS_QTY THEN @DT_SYSTEM ELSE NULL END AS DT_FINAL_OPERATION_TIME
  			, CASE 
  				WHEN TS.KY_SKID_STATUS IS NOT NULL THEN TS.KY_SKID_STATUS
  				WHEN TS.NO_SKID <= @PIN_NO_SKID - @NO_WORKING_SKIDS_QTY THEN 'NON_INSPECTED' 
  				ELSE 'WORKING' 
  			END AS KY_STATUS
  			, NULL AS KY_USER_INSPECTOR
  			, NULL AS ID_QUALITY_INSPECTOR_AGREEMENT
  			, NULL AS NM_QUALITY_INSPECTOR_AGREEMENT
  			, 0 AS FG_INSPECTOR_AGREEMENT
  			, NULL AS DT_INSPECTOR_AGREEMENT
  			, @KY_USER_LEADMAN AS KY_USER_LEADMAN
  			, @ID_LEADMAN AS ID_LEADMAN
  			, @NM_LEADMAN AS NM_LEADMAN
  			, 0 AS FG_LEADMAN
  			, NULL AS DT_LEADMAN
  			, NULL AS KY_FIRST_LEVEL_USER
  			, NULL AS ID_FIRST_LEVEL_EMPLOYEE
  			, NULL AS NM_FIRST_LEVEL_EMPLOYEE
  			, 0 AS FG_FIRST_LEVEL_EMPLOYEE
  			, NULL AS DT_FIRST_LEVEL_EMPLOYEE
  			, NULL AS KY_SECOND_LEVEL_USER_REJECTION
  			, NULL AS ID_SECOND_LEVEL_EMPLOYEE_REJECTION
  			, NULL AS NM_SECOND_LEVEL_EMPLOYEE_REJECTION
  			, 0 AS FG_SECOND_LEVEL_EMPLOYEE_REJECTION
  			, NULL AS DT_SECOND_LEVEL_EMPLOYEE_REJECTION
  			, NULL AS KY_THIRD_LEVEL_USER_REJECTION
  			, NULL AS ID_THIRD_LEVEL_EMPLOYEE_REJECTION
  			, NULL AS NM_THIRD_LEVEL_EMPLOYEE_REJECTION
  			, 0 AS FG_THIRD_LEVEL_EMPLOYEE_REJECTION
  			, NULL AS DT_THIRD_LEVEL_EMPLOYEE_REJECTION
  			, CASE WHEN TS.NO_SKID <= @PIN_NO_SKID - @NO_WORKING_SKIDS_QTY THEN 0 ELSE 1 END AS KY_STATUS
  			, @NO_WORKING_SKIDS_QTY AS NO_PALLETS_OPENED
  			, @DT_SYSTEM AS DT_CREATION
  			, @PIN_KY_USER_APP AS KY_USER_APP_CREATION
  			, @PIN_NM_PROGRAM AS NM_PROGAM_CREATE
  			FROM #T_SKID TS
  				LEFT JOIN PRD.K_INSPECTION_SKID KIS
  					ON KIS.ID_WORK_ORDER = @ID_WORK_ORDER
  					AND TS.NO_SKID = KIS.NO_PALLET
  
  		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @NO_RESULT = 1
  			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
  			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
  			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')	
		END
		
		ELSE 
		BEGIN
			SET @NO_RESULT = 2
  			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'Error')
  			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Error La línea se encuentra en un evento improductivo', 'ES')
  			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Error reaching skid, production line under umproductive event', 'EN')	
		END		
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED				
		
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
	    DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
		SET @NO_RESULT = 0
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the position')
			
	END CATCH
END

