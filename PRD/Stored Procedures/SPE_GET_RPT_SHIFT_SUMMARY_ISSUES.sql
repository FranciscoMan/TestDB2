-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Julio Díaz
-- CREATE date: 02/25/2019
-- Description: Get the report of the issues summary by shifts
-- =============================================


CREATE PROCEDURE    [PRD].[SPE_GET_RPT_SHIFT_SUMMARY_ISSUES] 
	@PIN_DT_INITIAL DATE
	, @PIN_DT_FINAL DATE

AS
BEGIN
	DECLARE @DT_SYSTEM DATETIME = GETDATE()

	DECLARE @T_SHIFT TABLE (
		ID_SHIFT INT
		, ID_PRODUCTION_LINE INT
		, DT_SHIFT_START DATETIME
		, DT_SHIFT_END DATETIME
		, KY_SHIFT INT
		, KY_SHIFT_TIME NVARCHAR(10)
	)

	DECLARE @T_ISSUES TABLE (
		ID_SHIFT INT
		, ID_PRODUCTION_LINE INT
		, KY_SHIFT_TIME NVARCHAR(10)
		, ID_ISSUE INT
		, DT_SHIFT_START DATETIME
		, DT_SHIFT_END DATETIME
		, DT_ISSUE_START DATETIME
		, DT_ISSUE_END DATETIME
		, ID_PROBLEM_CODE INT
		, KY_SHIFT INT
	)

	INSERT INTO @T_SHIFT (
		ID_SHIFT
		, ID_PRODUCTION_LINE
		, DT_SHIFT_START
		, DT_SHIFT_END
		, KY_SHIFT
		, KY_SHIFT_TIME
	)
	SELECT KS.ID_SHIFT
		, KS.ID_PRODUCTION_LINE
		, KS.DT_START_SHIFT
		, KS.DT_END_SHIFT
		, (YEAR(KS.DT_START_SHIFT) * 100000) + (MONTH(KS.DT_START_SHIFT) * 1000) + (DAY(KS.DT_START_SHIFT) * 10) + CASE WHEN VCS.KY_SHIFT = 'SF-1' THEN 0 ELSE 1 END
		, REPLACE(KS.KY_SHIFT_TIME, 'SF-', '')
	FROM PRD.K_SHIFT KS
		INNER JOIN ADM.VW_C_SHIFT VCS
			ON KS.DT_START_SHIFT >= DATETIMEFROMPARTS(YEAR(KS.DT_START_SHIFT), MONTH(KS.DT_START_SHIFT), DAY(KS.DT_START_SHIFT), DATEPART(HOUR, VCS.TS_START_SHIFT), DATEPART(MINUTE, VCS.TS_START_SHIFT), DATEPART(SECOND, VCS.TS_START_SHIFT), 0) 
			AND KS.DT_START_SHIFT < DATEADD(HOUR, CAST(VCS.NO_SHIFT_TIME AS INT), DATETIMEFROMPARTS(YEAR(KS.DT_START_SHIFT), MONTH(KS.DT_START_SHIFT), DAY(KS.DT_START_SHIFT), DATEPART(HOUR, VCS.TS_START_SHIFT), DATEPART(MINUTE, VCS.TS_START_SHIFT), DATEPART(SECOND, VCS.TS_START_SHIFT), 0))
	WHERE CAST(KS.DT_START_SHIFT AS DATE) BETWEEN @PIN_DT_INITIAL AND @PIN_DT_FINAL

	; WITH T_SHIFT_TIME_GROUPED AS (
		SELECT ROW_NUMBER() OVER (PARTITION BY KY_SHIFT ORDER BY KY_SHIFT, COUNT(1) DESC) AS NO_ROW
			, KY_SHIFT
			, KY_SHIFT_TIME
		FROM @T_SHIFT
		WHERE KY_SHIFT_TIME IS NOT NULL
		GROUP BY KY_SHIFT, KY_SHIFT_TIME
	)

	UPDATE TS
	SET KY_SHIFT_TIME = TSTG.KY_SHIFT_TIME
	FROM @T_SHIFT TS
		INNER JOIN T_SHIFT_TIME_GROUPED TSTG
			ON TS.KY_SHIFT = TSTG.KY_SHIFT
			AND TSTG.NO_ROW = 1

--	SELECT * FROM @T_SHIFT

	INSERT INTO @T_ISSUES (
		ID_SHIFT
		, ID_PRODUCTION_LINE
		, KY_SHIFT_TIME
		, ID_ISSUE
		, DT_SHIFT_START
		, DT_SHIFT_END
		, DT_ISSUE_START
		, DT_ISSUE_END
		, ID_PROBLEM_CODE
		, KY_SHIFT
	)
	SELECT KS.ID_SHIFT
		, KS.ID_PRODUCTION_LINE
		, KS.KY_SHIFT_TIME
		, KI.ID_ISSUE
		, KS.DT_SHIFT_START
		, KS.DT_SHIFT_END
		, CASE WHEN KI.DT_ISSUE < KS.DT_SHIFT_START THEN KS.DT_SHIFT_START ELSE KI.DT_ISSUE END AS DT_ISSUE_START
		, CASE WHEN ISNULL(KI.DT_ISSUE_CLOSED, @DT_SYSTEM) > KS.DT_SHIFT_END THEN KS.DT_SHIFT_END ELSE ISNULL(KI.DT_ISSUE_CLOSED, @DT_SYSTEM) END AS DT_ISSUE_END
		, KI.ID_PROBLEM_CODE
		, KS.KY_SHIFT
	FROM @T_SHIFT KS
		INNER JOIN PRD.K_ISSUE KI
			ON KI.ID_PRODUCTION_LINE = KS.ID_PRODUCTION_LINE
				--AND EXISTS (SELECT TOP 1 1 FROM PRD.K_QA27 KQ WHERE KQ.ID_QA27 = KI.ID_QA27 AND KQ.ID_SHIFT = KS.ID_SHIFT)
				AND (KI.DT_ISSUE BETWEEN KS.DT_SHIFT_START AND KS.DT_SHIFT_END
				OR ISNULL(KI.DT_ISSUE_CLOSED, @DT_SYSTEM) BETWEEN KS.DT_SHIFT_START AND KS.DT_SHIFT_END
				OR KS.DT_SHIFT_START BETWEEN KI.DT_ISSUE AND ISNULL(KI.DT_ISSUE_CLOSED, @DT_SYSTEM)
			)
	WHERE CAST(KS.DT_SHIFT_START AS DATE) BETWEEN @PIN_DT_INITIAL AND @PIN_DT_FINAL
	ORDER BY KS.ID_PRODUCTION_LINE, KS.DT_SHIFT_START, KI.DT_ISSUE

	; WITH T_ISSUE_GROUPED AS (
		SELECT KY_SHIFT_TIME
			, ID_PROBLEM_CODE
			, SUM(DATEDIFF(MINUTE, DT_ISSUE_START, DT_ISSUE_END) / 60.0) AS NO_SUM_HOURS_LAST
		FROM @T_ISSUES
		GROUP BY ID_PROBLEM_CODE, KY_SHIFT_TIME
	)
	SELECT CPC.KY_PROBLEM_CODE
		, CPC.NM_PROBLEM_CODE
		, CPA.KY_PROBLEM_AREA
		, CPA.NM_PROBLEM_AREA
		, TIG.KY_SHIFT_TIME
		, TIG.NO_SUM_HOURS_LAST
	FROM PRD.C_PROBLEM_CODE CPC
		INNER JOIN PRD.C_PROBLEM_AREA CPA
			ON CPC.ID_PROBLEM_AREA = CPA.ID_PROBLEM_AREA
		INNER JOIN T_ISSUE_GROUPED TIG
			ON CPC.ID_PROBLEM_CODE = TIG.ID_PROBLEM_CODE

END

