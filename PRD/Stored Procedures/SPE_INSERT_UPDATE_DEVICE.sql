-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Juan De Dios Pérez
-- CRETAE date: 16/03/2017
-- Description: Insert or update a DEVICE
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_INSERT_UPDATE_DEVICE] 
    	    @XML_RESULT XML = '' OUT ,    -- --0 TO ERROR AND 1 TO CORRECT
			@PIN_ID_DEVICE AS int = NULL,
			@PIN_KY_DEVICE AS nvarchar(100) = NULL,
			@PIN_NM_DEVICE AS nvarchar(300) = NULL,
			@PIN_DS_DEVICE AS nvarchar(1000) = NULL,
			--@PIN_ID_PRODUCTION_LINE AS int = NULL,
			@PIN_ID_BRANCH_PLANT AS int = NULL,
			@PIN_NO_IP AS nvarchar(20) = NULL,
			@PIN_NO_PORT AS nvarchar(4) = NULL,
			@PIN_FG_ACTIVE AS BIT = NULL,
			@PIN_XML_DEVICE_METRICS XML=NULL

		  , @PIN_KY_USER_APP_CREATE AS nvarchar(50)
		  , @PIN_KY_USER_APP_UPDATE AS nvarchar(50)
		  , @PIN_NM_PROGRAM_CREATE AS nvarchar(50)
		  , @PIN_NM_PROGRAM_UPDATE AS nvarchar(50)
		  , @PIN_TYPE_TRANSACTION CHAR(1) --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
	,@DT_SYSTEM DATETIME = GETDATE()

    	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	
		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION='I'
	    	BEGIN
			--WE INSERT THE REGISTER ON THE TABLE  ADM.C_POSITION
			INSERT INTO [PRD].[C_DEVICE]
					   ( 
							[KY_DEVICE]
						   ,[NM_DEVICE]
						   ,[DS_DEVICE]
						   --,[ID_PRODUCTION_LINE]
						   ,[ID_BRANCH_PLANT]
						   ,[NO_IP]
						   ,[NO_PORT]
						   ,[FG_ACTIVE]
						   ,[DT_CREATION]
						   ,[KY_USER_APP_CREATION]
						   ,[NM_PROGAM_CREATE]
					)
			VALUES
					     (@PIN_KY_DEVICE
						, @PIN_NM_DEVICE
						, @PIN_DS_DEVICE
						--, @PIN_ID_PRODUCTION_LINE
						, @PIN_ID_BRANCH_PLANT
						, @PIN_NO_IP
						, @PIN_NO_PORT
						, @PIN_FG_ACTIVE
						, @DT_SYSTEM
						, @PIN_KY_USER_APP_CREATE
						, @PIN_NM_PROGRAM_CREATE
					)	
					
      SET @PIN_ID_DEVICE = SCOPE_IDENTITY();

	 INSERT INTO [PRD].[C_DEVICE_METRICS]
           ([ID_DEVICE]
		   ,[ID_METRICS]
           ,[NO_REGISTER]
           ,[KY_MODBUS_DATATYPE]
		   ,[KY_SCALING_TYPE]
			,[NO_RAW_HI]
			,[NO_RAW_LO]
			,[NO_SCALE_HI]
			,[NO_SCALE_LO]
			,[FG_CLAMP_HI]
			,[FG_CLAMP_LO]
           ,[DT_CREATION]
           ,[KY_USER_APP_CREATION]
           ,[NM_PROGAM_CREATE]
			)
	SELECT      @PIN_ID_DEVICE,
				d.value('@ID_METRICS', 'INT') AS ID_METRICS,
				d.value('@NO_REGISTER', 'NVARCHAR(100)') AS NO_REGISTER,
				d.value('@KY_MODBUS_DATATYPE', 'NVARCHAR(15)') AS KY_MODBUS_DATATYPE,
				d.value('@KY_SCALING_TYPE', 'NVARCHAR(15)') AS KY_SCALING_TYPE,
				d.value('@NO_RAW_HI', 'NVARCHAR(15)') AS NO_RAW_HI,
				d.value('@NO_RAW_LO', 'NVARCHAR(15)') AS NO_RAW_LO,
				d.value('@NO_SCALE_HI', 'NVARCHAR(15)') AS NO_SCALE_HI,
				d.value('@NO_SCALE_LO', 'NVARCHAR(15)') AS NO_SCALE_LO,
				d.value('@FG_CLAMP_HI', 'BIT') AS FG_CLAMP_HI,
				d.value('@FG_CLAMP_LO', 'BIT') AS FG_CLAMP_LO,
				@DT_SYSTEM,
				@PIN_KY_USER_APP_CREATE,
				@PIN_NM_PROGRAM_CREATE
	FROM @PIN_XML_DEVICE_METRICS.nodes('DEVICE/METRICS/METRIC') AS T(d)

							
		END ELSE BEGIN
			-- WE UPDATE THE REGISTER ON THE TABLE

			UPDATE [PRD].[C_DEVICE]
			SET
   				  [KY_DEVICE] =@PIN_KY_DEVICE
   				, [NM_DEVICE] =@PIN_NM_DEVICE
				, [DS_DEVICE]=@PIN_DS_DEVICE
				--, [ID_PRODUCTION_LINE]=@PIN_ID_PRODUCTION_LINE
				, [ID_BRANCH_PLANT]=@PIN_ID_BRANCH_PLANT
				, [NO_IP]=@PIN_NO_IP
				, [NO_PORT]=@PIN_NO_PORT
				, [FG_ACTIVE]= @PIN_FG_ACTIVE
				, [DT_UPDATE] =@DT_SYSTEM
				, [KY_USER_APP_UPDATE] = @PIN_KY_USER_APP_UPDATE
				, [NM_PROGRAM_UPDATE] = @PIN_NM_PROGRAM_UPDATE
			WHERE [ID_DEVICE] = @PIN_ID_DEVICE

			----THEN UPDATE PRD.K_AUTHORIZED_USER_CODE


		---JPP 05/07/2017: THIS SOLVES A PROBLEM IN MERGE WHEN EXISTS A REGISTER IN PRD.C_LINE_METRICS 
		CREATE TABLE #TEMP_DELETE  (ID_DEVICE_METRICS int);

		WITH T AS (
		SELECT * FROM
		(
		SELECT * FROM [PRD].[C_DEVICE_METRICS] 
		WHERE ID_DEVICE = @PIN_ID_DEVICE
		)T1
		WHERE NOT EXISTS (
				    	SELECT 
						d.value('@ID_DEVICE_METRIC', 'INT') AS ID_DEVICE_METRICS
						FROM @PIN_XML_DEVICE_METRICS.nodes('DEVICE/METRICS/METRIC') AS T(d)
						WHERE T1.ID_DEVICE_METRICS = d.value('@ID_DEVICE_METRIC', 'INT')
						)
		)

		INSERT INTO #TEMP_DELETE
		SELECT ID_DEVICE_METRICS FROM T;

		UPDATE  PRD.C_LINE_METRIC 
		SET ID_DEVICE_METRICS = NULL
		WHERE ID_DEVICE_METRICS IN (SELECT DISTINCT ID_DEVICE_METRICS FROM #TEMP_DELETE)

		DELETE FROM  [PRD].[C_DEVICE_METRICS] WHERE ID_DEVICE_METRICS IN (SELECT DISTINCT ID_DEVICE_METRICS FROM #TEMP_DELETE);

		---------


			MERGE [PRD].[C_DEVICE_METRICS] AS target
		USING(
				SELECT DISTINCT 
				ID_DEVICE_METRICS,
				ID_DEVICE, 
				ID_METRICS, 
				NO_REGISTER,
				KY_MODBUS_DATATYPE,
				KY_SCALING_TYPE,
				NO_RAW_HI,
				NO_RAW_LO,
				NO_SCALE_HI,
				NO_SCALE_LO,
				FG_CLAMP_HI,
				FG_CLAMP_LO
				FROM (
					SELECT 
					d.value('@ID_DEVICE_METRIC', 'INT') AS ID_DEVICE_METRICS,
					d.value('@ID_DEVICE', 'INT') AS ID_DEVICE,
					d.value('@ID_METRICS', 'INT') AS ID_METRICS,
					d.value('@NO_REGISTER', 'NVARCHAR(100)') AS NO_REGISTER,
					d.value('@KY_MODBUS_DATATYPE', 'NVARCHAR(20)') AS KY_MODBUS_DATATYPE,
					d.value('@KY_SCALING_TYPE', 'NVARCHAR(15)') AS KY_SCALING_TYPE,
					d.value('@NO_RAW_HI', 'NVARCHAR(15)') AS NO_RAW_HI,
					d.value('@NO_RAW_LO', 'NVARCHAR(15)') AS NO_RAW_LO,
					d.value('@NO_SCALE_HI', 'NVARCHAR(15)') AS NO_SCALE_HI,
					d.value('@NO_SCALE_LO', 'NVARCHAR(15)') AS NO_SCALE_LO,
					d.value('@FG_CLAMP_HI', 'BIT') AS FG_CLAMP_HI,
					d.value('@FG_CLAMP_LO', 'BIT') AS FG_CLAMP_LO

					FROM @PIN_XML_DEVICE_METRICS.nodes('DEVICE/METRICS/METRIC') AS T(d)
				) AS DEVICE_METRICS
			) AS source (ID_DEVICE_METRICS,ID_DEVICE, ID_METRICS, NO_REGISTER,KY_MODBUS_DATATYPE,KY_SCALING_TYPE,NO_RAW_HI,NO_RAW_LO,NO_SCALE_HI,NO_SCALE_LO,FG_CLAMP_HI,FG_CLAMP_LO)
		ON (target.ID_DEVICE_METRICS = source.ID_DEVICE_METRICS)
		WHEN MATCHED THEN
			UPDATE SET 
					  ID_DEVICE=source.ID_DEVICE, 
					  ID_METRICS=source.ID_METRICS,
					  NO_REGISTER =source.NO_REGISTER,
					  KY_MODBUS_DATATYPE =source.KY_MODBUS_DATATYPE,
					  KY_SCALING_TYPE=source.KY_SCALING_TYPE,
					  NO_RAW_HI=source.NO_RAW_HI,
					  NO_RAW_LO=source.NO_RAW_LO,
					  NO_SCALE_HI=source.NO_SCALE_HI,
					  NO_SCALE_LO=source.NO_SCALE_LO,
					  FG_CLAMP_HI=source.FG_CLAMP_HI,
					  FG_CLAMP_LO=source.FG_CLAMP_LO,

					  [DT_UPDATE] =@DT_SYSTEM
					, [KY_USER_APP_UPDATE] = @PIN_KY_USER_APP_UPDATE
					, [NM_PROGRAM_UPDATE] = @PIN_NM_PROGRAM_UPDATE
		WHEN NOT MATCHED  THEN
		INSERT (ID_DEVICE, ID_METRICS, NO_REGISTER , KY_MODBUS_DATATYPE,KY_SCALING_TYPE,NO_RAW_HI,NO_RAW_LO,NO_SCALE_HI,NO_SCALE_LO,FG_CLAMP_HI,FG_CLAMP_LO, [DT_CREATION], [KY_USER_APP_CREATION], [NM_PROGAM_CREATE])
		VALUES (Source.ID_DEVICE, Source.ID_METRICS, source.NO_REGISTER,source.KY_MODBUS_DATATYPE, source.KY_SCALING_TYPE, source.NO_RAW_HI, source.NO_RAW_LO, source.NO_SCALE_HI, source.NO_SCALE_LO, source.FG_CLAMP_HI, source.FG_CLAMP_LO, @DT_SYSTEM, @PIN_KY_USER_APP_CREATE, @PIN_NM_PROGRAM_CREATE )
		--WHEN NOT MATCHED BY SOURCE AND target.ID_DEVICE = @PIN_ID_DEVICE THEN DELETE
		;

									
		END
		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, @ERROR_MESSAGE)
		
			
	END CATCH
END

