-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Vitek - 2019
-- Author: DELLC, AA
-- CREATE date: 25/12/2019
-- Description: get all Form Metrics by 
-- =============================================

CREATE PROCEDURE  [PRD].[SPE_GET_FORM_METRICS_VALUES]
	    @PIN_ID_K_FORM INT =NULL   
	   ,@PIN_ID_WORK_ORDER INT = NULL
	   ,@PIN_ID_PRODUCTION_LINE INT = NULL
	   ,@PIN_ID_FORM INT 
	   ,@PIN_ID_PALLET INT
	   
AS   
	DECLARE @KY_STATUS_READING NVARCHAR(50) = 'ACCEPTED'
		, @ID_TEMPLATE_FORM INT
		, @KY_PROCESS_FORM NVARCHAR(50)
		, @KY_PROCESS_FORM_PROCESS NVARCHAR(50) = 'PROCESS'
		, @KY_PROCESS_FORM_MANUFACTURE NVARCHAR(50) = 'MANUFACTURE'
		, @KY_PROCESS_FORM_QUALITY NVARCHAR(50) = 'QUALITY'
		, @NO_ALPHA NUMERIC(36,2)
		, @NO_HYPOTHESIZED_MEAN_DIFFERENCE NUMERIC(36,2)
		, @NO_SAMPLES INT
		, @XML_CONFIGURATION XML = (SELECT TOP 1 XML_CONFIGURATION FROM ADM.S_CONFIGURATION)
		, @KY_FORM_STATUS NVARCHAR(100)
		, @ID_METRIC_WEIGHT INT
		, @ID_METRIC_LINE_RATE INT
		, @ID_METRIC_SQUARENESS INT
		-- USING FOR ONCE
		, @PIN_LAST_QA INT
	    , @PIN_WO INT
		, @PIN_CURRENT_QA INT
		, @COUNTER INT
		, @FLAG_ONCE VARCHAR(50) = NULL 

	SELECT @ID_TEMPLATE_FORM = KF.ID_FORM
		, @KY_PROCESS_FORM = KF.KY_PROCESS_TYPE
		, @KY_FORM_STATUS = KF.KY_STATUS_FORM
		, @PIN_LAST_QA = KF.ID_QA27 -- added
		, @PIN_WO = KF.ID_WORK_ORDER -- added
	FROM PRD.K_FORM KF
	 WHERE KF.ID_K_FORM = @PIN_ID_K_FORM

	SELECT @NO_ALPHA = d.value('@NO_ALPHA', 'NUMERIC(36,2)')
		, @NO_HYPOTHESIZED_MEAN_DIFFERENCE = d.value('@NO_HYPOTHESIZED_MEAN_DIFFERENCE', 'NUMERIC(36,2)')
		, @NO_SAMPLES = d.value('@NO_SAMPLES', 'INT')
	FROM @XML_CONFIGURATION.nodes('CONFIGURATIONS/TEST_T/SET_UP') AS T(d)	

	DECLARE @T_METRICS_VALUES TABLE (
		ID_METRIC INT
		, KY_METRIC NVARCHAR(50)
		, NM_METRIC NVARCHAR(100)
		, KY_FIELD_TYPE NVARCHAR(10)
		, FG_REQUIRED BIT
		, DS_TOOLTIP NVARCHAR(1000)
		, NM_UNIT NVARCHAR(20)
		, XML_FIELD_SETTINGS XML
		, XML_METRICS_VALUE XML
		, KY_T_TEST_RESULT NVARCHAR(20)
		, NM_T_TEST_RESULT NVARCHAR(30)
		, KY_IN_NOMINAL_RANGE NVARCHAR(10)
		, NM_IN_NOMINAL_RANGE NVARCHAR(20)
		, NO_NOMINAL_VALUE FLOAT
		, NO_CAPTURED_VALUE FLOAT
		, NO_UPPER_LIMIT FLOAT
		, NO_LOWER_LIMIT FLOAT
		, NO_SNOMINAL_VALUE FLOAT
		, NO_SUPPER_LIMIT FLOAT
		, NO_SLOWER_LIMIT FLOAT
		, KY_STATUS_FORM NVARCHAR(100)
		, NO_ORDER INT 
		, FG_VALIDATE_OUT_OF_RANGE BIT
		--, VARIABLE_ADQ_TYPE NVARCHAR(50) -- SOLO ES PARA PRUEBAS
	)

	-- ONCE? ATTEMPT #1

		-- FIRST, CHECK IF THE TABLE HAS DATA.
					SET @COUNTER = (SELECT COUNT(*) FROM PRD.K_FORM WHERE ID_WORK_ORDER = @PIN_WO) 

					-- GET YOUR LAST REGISTER TO COMPARE CURRENT QA TO LAST QA.
					 SET @PIN_LAST_QA =(SELECT TOP 1 ID_QA27 FROM
										(SELECT TOP 2 ID_QA27
										FROM PRD.K_FORM WHERE ID_WORK_ORDER = @PIN_WO
										ORDER BY ID_K_FORM DESC) SMT
										ORDER BY ID_QA27 DESC)

					 IF (@COUNTER = 1) -- THEN IT'S THE FIRST TIME IF THE COUNTER MARK 1.
						BEGIN
						SET @FLAG_ONCE = 'ONCE'
						END
					 ELSE -- THEN, YOU HAVE MORE REGISTERS. TIME TO COMPARE QAs.
						 BEGIN
							IF (@PIN_LAST_QA = @PIN_CURRENT_QA ) -- SAME WO, SAME QA
								BEGIN
								SET @FLAG_ONCE = NULL
								END
								ELSE -- SAME WO, DIFFERENT QA, FIRST TIME TO VIEW ONCE.
								BEGIN
								SET @FLAG_ONCE = 'ONCE' 
								END
						 END


	-- END ONCE

	IF @KY_PROCESS_FORM = @KY_PROCESS_FORM_MANUFACTURE OR @KY_PROCESS_FORM = @KY_PROCESS_FORM_QUALITY BEGIN
		INSERT INTO @T_METRICS_VALUES (
			ID_METRIC
			, KY_METRIC
			, NM_METRIC
			, KY_FIELD_TYPE
			, FG_REQUIRED
			, DS_TOOLTIP
			, NM_UNIT
			, XML_FIELD_SETTINGS
			, XML_METRICS_VALUE
			, KY_STATUS_FORM
			, NO_ORDER
			, FG_VALIDATE_OUT_OF_RANGE
			--, VARIABLE_ADQ_TYPE -- PRUEBAS
		)
		SELECT CIC.ID_METRICS
			, CM.KY_METRICS
			, CM.NM_METRICS
			, CM.KY_FIELD_TYPE
			, CFM.FG_VALIDATE_METRICS
			, CM.DS_TOOLTIP
			, CIC.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'NVARCHAR(50)') AS NM_UNIT
			, CIC.XML_FIELD_SETTINGS 
			, KFM.XML_METRICS_VALUE
			, KF.KY_STATUS_FORM
			, ISNULL(CM.NO_ORDER, 0) NO_ORDER
			, CASE WHEN 
				CM.KY_FIELD_TYPE = 'NUMERICBOX' 
				AND NULLIF(CIC.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR(50)'), '') IS NOT NULL 
				--AND CIC.ID_METRICS != 46
				THEN 1 
				ELSE 0 
			END
			--, CFM.KY_VARIABLE_ACQUISITION_TYPE
		FROM PRD.K_FORM KF
			INNER JOIN PRD.K_WORK_ORDER KWO
				ON KF.ID_WORK_ORDER = KWO.ID_WORK_ORDER
				AND KF.ID_K_FORM = @PIN_ID_K_FORM
			INNER JOIN PRD.C_ITEM CI
				ON KWO.ID_ITEM = CI.ID_ITEM
			INNER JOIN PRD.C_ITEM_CHARACTERISTIC CIC
				ON CI.ID_ITEM = CIC.ID_ITEM
			INNER JOIN PRD.C_FORM_METRICS CFM
				ON CFM.ID_FORM = @ID_TEMPLATE_FORM 
				AND CFM.ID_METRICS = CIC.ID_METRICS 
				AND CFM.KY_VARIABLE_ACQUISITION_TYPE IN ('ALWAYS','RANDOM','EVEN','ODD', @FLAG_ONCE)
			INNER JOIN PRD.C_METRICS CM
				ON CIC.ID_METRICS = CM.ID_METRICS
			INNER JOIN PRD.K_FORM_METRICS KFM
				ON KFM.ID_METRICS = CIC.ID_METRICS
				 AND KFM.ID_K_FORM = @PIN_ID_K_FORM
			INNER JOIN ADM.C_BRANCH_PLANT CBP
				ON CBP.ID_BRANCH_PLANT = KWO.ID_BRANCH_PLANT
			
		ORDER BY CM.NO_ORDER

		
	END

	IF @KY_PROCESS_FORM = @KY_PROCESS_FORM_PROCESS BEGIN
		INSERT INTO @T_METRICS_VALUES (
			ID_METRIC
			, KY_METRIC
			, NM_METRIC
			, KY_FIELD_TYPE
			, FG_REQUIRED
			, DS_TOOLTIP
			, NM_UNIT
			, XML_FIELD_SETTINGS
			, XML_METRICS_VALUE
			, KY_STATUS_FORM
			, NO_ORDER
			, FG_VALIDATE_OUT_OF_RANGE
		)
		SELECT CLM.ID_METRICS
			, CM.KY_METRICS
			, CM.NM_METRICS
			, CM.KY_FIELD_TYPE
			, CFM.FG_VALIDATE_METRICS
			, CM.DS_TOOLTIP
			, CLM.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'NVARCHAR(50)') AS NM_UNIT
			, CLM.XML_FIELD_SETTINGS 
			, KFM.XML_METRICS_VALUE
			, KF.KY_STATUS_FORM
			, ISNULL(CM.NO_ORDER, 0) NO_ORDER
			--, CASE WHEN CM.KY_FIELD_TYPE = 'NUMERICBOX' AND NULLIF(CLM.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR(50)'), '') IS NOT NULL THEN 1 ELSE 0 END
			, CASE WHEN CM.ID_METRICS IN (CBP.ID_WEIGHT_METRIC, CBP.ID_LBS_PER_HOUR_METRIC) THEN 1 ELSE 0 END
		FROM PRD.K_FORM KF
			INNER JOIN PRD.C_PRODUCTION_LINE CPL
				ON KF.ID_PRODUCTION_LINE = CPL.ID_PRODUCTION_LINE
				AND KF.ID_K_FORM = @PIN_ID_K_FORM
			INNER JOIN PRD.C_LINE_METRIC CLM
				ON CPL.ID_PRODUCTION_LINE = CLM.ID_PRODUCTION_LINE
			INNER JOIN PRD.C_FORM_METRICS CFM
				ON CFM.ID_FORM = @ID_TEMPLATE_FORM 
				AND CFM.ID_METRICS = CLM.ID_METRICS
			INNER JOIN PRD.C_METRICS CM
				ON CLM.ID_METRICS = CM.ID_METRICS
			INNER JOIN PRD.K_FORM_METRICS KFM
				ON KFM.ID_METRICS = CLM.ID_METRICS
				AND KFM.ID_K_FORM = @PIN_ID_K_FORM
			INNER JOIN ADM.C_BRANCH_PLANT CBP
				ON CBP.ID_BRANCH_PLANT = CPL.ID_BRANCH_PLANT
	END

	UPDATE @T_METRICS_VALUES 
	SET KY_IN_NOMINAL_RANGE = CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)')
			WHEN 'NUMERICBOX' THEN
				CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL 
					AND NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL 
					AND NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR'), '') IS NOT NULL 
					AND NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
					CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@HYSTERESIS)[1]', 'NVARCHAR(20)')
						WHEN 'ABS' THEN 
							CASE WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'FLOAT') 
								BETWEEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT') 
									AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT') 
								THEN 'YES' 
								ELSE 'NO' 
							END
						WHEN 'PCT' THEN
							CASE WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'FLOAT') 
								BETWEEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') * (1 - (XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT') / 100))
									AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') * (1 + (XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT') / 100))
								THEN 'YES' 
								ELSE 'NO' 
							END
						WHEN 'REL' THEN
							CASE WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'FLOAT') 
								BETWEEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') - XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT')
									AND XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') + XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT')
								THEN 'YES' 
								ELSE 'NO' 
							END
						ELSE 'NA'
					END
				END
			ELSE 
				CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR'), '') IS NULL OR NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR'), '') IS NULL THEN 'NA'
					WHEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR') = XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR') THEN 'YES'
					ELSE 'NO'
				END
			END
		, NO_NOMINAL_VALUE = CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)')
			WHEN 'NUMERICBOX' THEN
				CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
					XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT')
				END
			END
		, NO_CAPTURED_VALUE = CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)')
			WHEN 'NUMERICBOX' THEN
				CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
					XML_METRICS_VALUE.value('(/FIELD_TYPES/@FINISHED_VALUE)[1]', 'FLOAT')
				END
			END
		, NO_UPPER_LIMIT = CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)')
			WHEN 'NUMERICBOX' THEN
				CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
						CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@HYSTERESIS)[1]', 'NVARCHAR(20)')
							WHEN 'ABS' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT') 
							WHEN 'PCT' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') * (1 + (XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT') / 100))
							WHEN 'REL' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') + XML_METRICS_VALUE.value('(/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT')
					END
				END
			END
		, NO_LOWER_LIMIT = CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)')
			WHEN 'NUMERICBOX' THEN
				CASE WHEN NULLIF(XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
					CASE XML_METRICS_VALUE.value('(/FIELD_TYPES/@HYSTERESIS)[1]', 'NVARCHAR(20)')
						WHEN 'ABS' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT') 
						WHEN 'PCT' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') * (1 - (XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT') / 100))
						WHEN 'REL' THEN XML_METRICS_VALUE.value('(/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') - XML_METRICS_VALUE.value('(/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT')
					END
				END
			END
		, NO_SNOMINAL_VALUE = CASE XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)')
			WHEN 'NUMERICBOX' THEN
				CASE WHEN NULLIF(XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
					XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT')
				END
			END
		, NO_SUPPER_LIMIT = CASE XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)')
			WHEN 'NUMERICBOX' THEN
				CASE WHEN NULLIF(XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@UPPER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
						CASE XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@HYSTERESIS)[1]', 'NVARCHAR(20)')
							WHEN 'ABS' THEN XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT') 
							WHEN 'PCT' THEN XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') * (1 + (XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT') / 100))
							WHEN 'REL' THEN XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') + XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@UPPER_LIMIT)[1]', 'FLOAT')
					END
				END
			END
		, NO_SLOWER_LIMIT = CASE XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@FIELD_TYPE)[1]', 'NVARCHAR(20)')
			WHEN 'NUMERICBOX' THEN
				CASE WHEN NULLIF(XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@LOWER_LIMIT)[1]', 'NVARCHAR'), '') IS NOT NULL THEN		-- LIMITS EXISTS
					CASE XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@HYSTERESIS)[1]', 'NVARCHAR(20)')
						WHEN 'ABS' THEN XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT') 
						WHEN 'PCT' THEN XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') * (1 - (XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT') / 100))
						WHEN 'REL' THEN XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@NOMINAL_VALUE)[1]', 'FLOAT') - XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@LOWER_LIMIT)[1]', 'FLOAT')
					END
				END
			END

	--IF @KY_FORM_STATUS IN ('SAVED', 'CAPTURED') BEGIN
	--	UPDATE TMV
	--	SET KY_T_TEST_RESULT = CASE PRD.F_GET_TEST_T (@NO_ALPHA, @NO_HYPOTHESIZED_MEAN_DIFFERENCE, @NO_SAMPLES, NO_WORK_ORDER, KFM.ID_METRICS)
	--		WHEN 1 THEN 'YES'
	--		WHEN 0 THEN 'NO'
	--		WHEN -1 THEN 'ND'
	--		ELSE 'NA'
	--	END
	--	FROM @T_METRICS_VALUES TMV
	--		INNER JOIN PRD.K_FORM KF
	--			ON KF.ID_K_FORM = @PIN_ID_K_FORM
	--		INNER JOIN PRD.K_FORM_METRICS KFM
	--			ON KF.ID_K_FORM = KFM.ID_K_FORM
	--			AND KFM.ID_METRICS = TMV.ID_METRIC
	--		INNER JOIN PRD.K_WORK_ORDER KWO
	--			ON KF.ID_WORK_ORDER = KWO.ID_WORK_ORDER
	--		INNER JOIN PRD.C_METRICS CM
	--			ON KFM.ID_METRICS = CM.ID_METRICS
	--			AND CM.KY_FIELD_TYPE = 'NUMERICBOX'
	--END

	SELECT ID_METRIC
		, KY_METRIC
		, NM_METRIC
		, KY_FIELD_TYPE
		, FG_REQUIRED
		, DS_TOOLTIP
		, NM_UNIT
		, XML_FIELD_SETTINGS
		, XML_METRICS_VALUE
		, 'NA' AS KY_T_TEST_RESULT
		, NM_T_TEST_RESULT
		, KY_IN_NOMINAL_RANGE
		, NM_IN_NOMINAL_RANGE
		, NO_NOMINAL_VALUE
		, NO_CAPTURED_VALUE
		, NO_UPPER_LIMIT
		, NO_LOWER_LIMIT
		, KY_STATUS_FORM
		, NO_SNOMINAL_VALUE
		, NO_SUPPER_LIMIT
		, NO_SLOWER_LIMIT
		, CAST(40 AS DECIMAL(20, 7)) AS PR_INPUT_TOLERANCE
		, FG_VALIDATE_OUT_OF_RANGE

	FROM @T_METRICS_VALUES
ORDER BY NO_ORDER ASC

