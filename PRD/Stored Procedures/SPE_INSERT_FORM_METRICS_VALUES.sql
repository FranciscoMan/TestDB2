-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Vitek - 2019
-- Author: Aideé Alvarez, Daniel Dávalos
-- CREATE date: 30/12/2019
-- Description: get all Form Metrics by 
-- =============================================
-- Author: DELLC
-- ALTER date: 12/31/2019
-- Description: Add start date parameter for update the K_FORM  start date
-- =============================================
-- 03/01/2020: We added Data Collection section here. by AA
-- 06/16/2020: Testing ONCE.
-- =============================================
CREATE PROCEDURE  [PRD].[SPE_INSERT_FORM_METRICS_VALUES]
		  @XML_RESULT XML = '' OUT    -- --0 TO ERROR AND 1 TO CORRECT		  
		, @PIN_ID_K_FORM INT = NULL   
		, @PIN_ID_WORK_ORDER INT = NULL
		, @PIN_ID_PRODUCTION_LINE INT = NULL
		, @PIN_ID_FORM INT 
		, @PIN_ID_PALLET INT
		, @PIN_DT_START_FORM DATE = NULL
		, @PIN_TYPE_FORM CHAR(4) = NULL -- DC (DATA COLLECTION) OR FM (FULL MODE)
		, @PIN_KY_USER_APP			NVARCHAR(50)
		, @PIN_NM_PROGRAM			NVARCHAR(50)
	   
AS   
BEGIN TRY
	DECLARE @KY_STATUS_READING NVARCHAR(50) = 'ACCEPTED'
		, @V_EXIST_TRAN BIT = 0
		, @ID_TEMPLATE_FORM INT
		, @KY_PROCESS_FORM NVARCHAR(50)
		, @KY_PROCESS_FORM_PROCESS NVARCHAR(50) = 'PROCESS'
		, @KY_PROCESS_FORM_MANUFACTURE NVARCHAR(50) = 'MANUFACTURE'
		, @KY_PROCESS_FORM_QUALITY NVARCHAR(50) = 'QUALITY'
		, @KY_PROCESS_FORM_LINE_OPT NVARCHAR(50) = 'LINE_OPT'
		, @NO_ALPHA NUMERIC(36,2)
		, @NO_HYPOTHESIZED_MEAN_DIFFERENCE NUMERIC(36,2)
		, @NO_SAMPLES INT
		, @XML_CONFIGURATION XML = (SELECT TOP 1 XML_CONFIGURATION FROM ADM.S_CONFIGURATION)
		, @KY_FORM_STATUS NVARCHAR(100)
		, @NO_ACQUISITION_RANDOM_VARIABLES INT
		, @DT_SYSTEM DATETIME = GETDATE()
		, @V_NO_FORMS_CAPTURED AS INT
		, @PIN_QA INT -- QA 27 ENTRANTE DEL KFORM NUEVO.
		, @PIN_LAST_QA INT -- QA REGISTRO ANTERIOR.
		, @FLAG_ONCE VARCHAR(50) -- BANDERA PARA LLAMAR AL ONCE Y ENTRE EN EL DATA COL.
		, @COUNTER INT -- CONTADOR PARA SABER SI ES EL PRIMER REGISTRO DE MEDICIONES (PRIMERA VEZ).

	CREATE TABLE #T_METRICS_VALUES  (
		  ID_METRIC INT
		, KY_METRIC NVARCHAR(50)
		, NM_METRIC NVARCHAR(100)
		, KY_FIELD_TYPE NVARCHAR(10)
		, FG_REQUIRED BIT
		, DS_TOOLTIP NVARCHAR(1000)
		, NM_UNIT NVARCHAR(20)
		, XML_FIELD_SETTINGS XML
		, XML_METRICS_VALUE XML
		, KY_STATUS_FORM NVARCHAR(100)
		, KY_VARIABLE_ACQUISITION_TYPE NVARCHAR(50)
		, ROW_ID INT
	)


	--WE VERIFY THAT EXISTS A WORKING TRANSACTION
	IF (@@TRANCOUNT = 0) BEGIN
		--IN CASE THAT THE TRANSACTION DOESNT START
		BEGIN TRANSACTION
		--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
		SET @V_EXIST_TRAN = 1
	END	

	

	SELECT @ID_TEMPLATE_FORM = KF.ID_FORM
			, @KY_PROCESS_FORM = KF.KY_PROCESS_TYPE
			, @KY_FORM_STATUS = KF.KY_STATUS_FORM
			, @PIN_QA = KF.ID_QA27
	FROM PRD.K_FORM KF
	WHERE KF.ID_K_FORM = @PIN_ID_K_FORM

	SELECT @NO_ACQUISITION_RANDOM_VARIABLES = NO_RANDOM_ACQUISITION_VARIABLES
	FROM PRD.C_FORM
	WHERE ID_FORM = @ID_TEMPLATE_FORM
	

	SELECT @V_NO_FORMS_CAPTURED = COUNT(1) FROM PRD.K_FORM WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER AND KY_PROCESS_TYPE = @KY_PROCESS_FORM
	                             AND KY_STATUS_FORM = 'CAPTURED'

	-- //////// ONCE FUNCTION - START (Attempt #2 Part 1.) ////////

	-- FIRST, CHECK IF THE TABLE HAS DATA.
			-- FIRST, CHECK IF THE TABLE HAS DATA.
					SET @COUNTER = (SELECT COUNT(*) FROM PRD.K_FORM WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER
					                AND ID_FORM = @PIN_ID_FORM) -- ADDED?

					-- GET YOUR LAST REGISTER TO COMPARE CURRENT QA TO LAST QA.
					 SET @PIN_LAST_QA =(SELECT TOP 1 ID_QA27 FROM
										(SELECT TOP 2 ID_QA27
										FROM PRD.K_FORM WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER 
										AND ID_FORM = @PIN_ID_FORM --ADDED ? 
										ORDER BY ID_K_FORM DESC) SMT
										ORDER BY ID_QA27 DESC)

					 IF (@COUNTER = 1) -- THEN IT'S THE FIRST TIME IF THE COUNTER MARK 1.
						BEGIN
						SET @FLAG_ONCE = 'ONCE'
						END
					 ELSE -- THEN, YOU HAVE MORE REGISTERS. TIME TO COMPARE QAs.
						 BEGIN
							IF (@PIN_LAST_QA = @PIN_QA ) -- SAME WO, SAME QA
								BEGIN
								SET @FLAG_ONCE = NULL
								END
								ELSE -- SAME WO, DIFFERENT QA, FIRST TIME TO VIEW ONCE.
								BEGIN
								SET @FLAG_ONCE = 'ONCE' 
								END
						 END
	-- //////// END ////////

	IF (SELECT COUNT(1) FROM PRD.K_FORM_METRICS T1 WHERE T1.ID_K_FORM = @PIN_ID_K_FORM) = 0 BEGIN

		IF (@KY_PROCESS_FORM = @KY_PROCESS_FORM_MANUFACTURE OR @KY_PROCESS_FORM = @KY_PROCESS_FORM_QUALITY) AND @PIN_TYPE_FORM = 'FM' 
		     BEGIN
			;WITH T_FORM_METRICS_MQ AS (
				SELECT
					  NEWID() AS NEW_ID 
					, CIC.ID_METRICS
					, CM.KY_METRICS
					, CM.NM_METRICS
					, CM.KY_FIELD_TYPE
					, CFM.FG_VALIDATE_METRICS
					, CM.DS_TOOLTIP
					, CIC.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'NVARCHAR(50)') AS NM_UNIT
					, CIC.XML_FIELD_SETTINGS 
					, KFM.XML_METRICS_VALUE
					, KF.KY_STATUS_FORM
					, CFM.KY_VARIABLE_ACQUISITION_TYPE
				FROM PRD.K_FORM KF
					INNER JOIN PRD.K_WORK_ORDER KWO ON KF.ID_WORK_ORDER = KWO.ID_WORK_ORDER AND KF.ID_K_FORM = @PIN_ID_K_FORM
					INNER JOIN PRD.C_ITEM CI ON KWO.ID_ITEM = CI.ID_ITEM
					INNER JOIN PRD.C_ITEM_CHARACTERISTIC CIC ON CI.ID_ITEM = CIC.ID_ITEM
					INNER JOIN PRD.C_FORM_METRICS CFM ON CFM.ID_FORM = @ID_TEMPLATE_FORM  AND CFM.ID_METRICS = CIC.ID_METRICS
					INNER JOIN PRD.C_METRICS CM ON CIC.ID_METRICS = CM.ID_METRICS
					LEFT JOIN PRD.K_FORM_METRICS KFM ON KFM.ID_METRICS = CIC.ID_METRICS AND KFM.ID_K_FORM = @PIN_ID_K_FORM
			)

			INSERT INTO #T_METRICS_VALUES (
				  ID_METRIC
				, KY_METRIC
				, NM_METRIC
				, KY_FIELD_TYPE
				, FG_REQUIRED
				, DS_TOOLTIP
				, NM_UNIT
				, XML_FIELD_SETTINGS
				, KY_STATUS_FORM
				, KY_VARIABLE_ACQUISITION_TYPE
				, ROW_ID
			)
				SELECT 
				  ID_METRICS
				, KY_METRICS
				, NM_METRICS
				, KY_FIELD_TYPE
				, FG_VALIDATE_METRICS
				, DS_TOOLTIP
				, XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'NVARCHAR(50)') AS NM_UNIT
				, XML_FIELD_SETTINGS 
				, KY_STATUS_FORM
				, KY_VARIABLE_ACQUISITION_TYPE
				, CASE WHEN KY_VARIABLE_ACQUISITION_TYPE IN ('ALWAYS', 'ODD', 'EVEN', @FLAG_ONCE) THEN 0 ELSE ROW_NUMBER ()
				     OVER(PARTITION BY KY_VARIABLE_ACQUISITION_TYPE ORDER BY NEW_ID) END
			FROM T_FORM_METRICS_MQ

		END
	ELSE
		BEGIN
		IF (@KY_PROCESS_FORM = @KY_PROCESS_FORM_MANUFACTURE OR @KY_PROCESS_FORM = @KY_PROCESS_FORM_QUALITY 
		OR @KY_PROCESS_FORM= @KY_PROCESS_FORM_LINE_OPT)	AND @PIN_TYPE_FORM = 'DC'
			  BEGIN
			     ;WITH T_FORM_METRICS_DC AS (
					SELECT	 
					NEWID() AS NEW_ID
						, CM.ID_METRICS
						, CM.KY_METRICS
						, CM.NM_METRICS
						, CM.KY_FIELD_TYPE
						, CFM.FG_VALIDATE_METRICS
						, CM.DS_TOOLTIP
						, CM.XML_FIELD_SETTINGS 
						, '' AS XML_METRICS_VALUE
						, KF.KY_STATUS_FORM
						, CFM.KY_VARIABLE_ACQUISITION_TYPE
						FROM PRD.C_FORM_METRICS CFM
						JOIN PRD.C_FORM CF ON CFM.ID_FORM = CF.ID_FORM AND CF.ID_FORM = @ID_TEMPLATE_FORM
						JOIN PRD.C_METRICS CM ON CFM.ID_METRICS = CM.ID_METRICS
					    JOIN PRD.K_FORM KF ON KF.ID_K_FORM = @PIN_ID_K_FORM
					)
							INSERT INTO #T_METRICS_VALUES (
						ID_METRIC
						, KY_METRIC
						, NM_METRIC
						, KY_FIELD_TYPE
						, FG_REQUIRED
						, DS_TOOLTIP
						, NM_UNIT
						, XML_FIELD_SETTINGS
						, KY_STATUS_FORM
						, KY_VARIABLE_ACQUISITION_TYPE
						, ROW_ID
					)
						SELECT 
						  ID_METRICS
						, KY_METRICS
						, NM_METRICS
						, KY_FIELD_TYPE
						, FG_VALIDATE_METRICS
						, DS_TOOLTIP
						, XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'NVARCHAR(50)') AS NM_UNIT
						, XML_FIELD_SETTINGS 
						, KY_STATUS_FORM
						, KY_VARIABLE_ACQUISITION_TYPE
						, CASE WHEN KY_VARIABLE_ACQUISITION_TYPE IN ('ALWAYS', 'ODD', 'EVEN', 'RANDOM', @FLAG_ONCE) THEN 0 ELSE ROW_NUMBER () 
						   OVER(PARTITION BY KY_VARIABLE_ACQUISITION_TYPE ORDER BY NEW_ID) END
					FROM T_FORM_METRICS_DC

					SET @PIN_NM_PROGRAM = '/PRD/DataCollectionForm'
					
			  END
		END

		IF (@KY_PROCESS_FORM = @KY_PROCESS_FORM_PROCESS AND @PIN_TYPE_FORM = 'FM')
		  BEGIN
				;WITH T_FORM_METRICS_P AS (
					SELECT
						  NEWID() AS NEW_ID  
						, CLM.ID_METRICS
						, CM.KY_METRICS
						, CM.NM_METRICS
						, CM.KY_FIELD_TYPE
						, CFM.FG_VALIDATE_METRICS
						, CM.DS_TOOLTIP
						, CLM.XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'NVARCHAR(50)') AS NM_UNIT
						, CLM.XML_FIELD_SETTINGS 
						, KFM.XML_METRICS_VALUE
						, KF.KY_STATUS_FORM
						, CFM.KY_VARIABLE_ACQUISITION_TYPE
					FROM PRD.K_FORM KF
						INNER JOIN PRD.C_PRODUCTION_LINE CPL ON KF.ID_PRODUCTION_LINE = CPL.ID_PRODUCTION_LINE AND KF.ID_K_FORM = @PIN_ID_K_FORM
						INNER JOIN PRD.C_LINE_METRIC CLM ON CPL.ID_PRODUCTION_LINE = CLM.ID_PRODUCTION_LINE
						INNER JOIN PRD.C_FORM_METRICS CFM ON CFM.ID_FORM = @ID_TEMPLATE_FORM  AND CFM.ID_METRICS = CLM.ID_METRICS
						INNER JOIN PRD.C_METRICS CM ON CLM.ID_METRICS = CM.ID_METRICS
						LEFT JOIN PRD.K_FORM_METRICS KFM ON KFM.ID_METRICS = CLM.ID_METRICS AND KFM.ID_K_FORM = @PIN_ID_K_FORM
					)
		
			
			INSERT INTO #T_METRICS_VALUES (
				ID_METRIC
				, KY_METRIC
				, NM_METRIC
				, KY_FIELD_TYPE
				, FG_REQUIRED
				, DS_TOOLTIP
				, NM_UNIT
				, XML_FIELD_SETTINGS
				, KY_STATUS_FORM
				, KY_VARIABLE_ACQUISITION_TYPE
				, ROW_ID
			)
				SELECT 
				  ID_METRICS
				, KY_METRICS
				, NM_METRICS
				, KY_FIELD_TYPE
				, FG_VALIDATE_METRICS
				, DS_TOOLTIP
				, XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'NVARCHAR(50)') AS NM_UNIT
				, XML_FIELD_SETTINGS 
				, KY_STATUS_FORM
				, KY_VARIABLE_ACQUISITION_TYPE
				, CASE WHEN KY_VARIABLE_ACQUISITION_TYPE IN ('ALWAYS', 'ODD', 'EVEN') THEN 0 ELSE ROW_NUMBER () 
				   OVER(PARTITION BY KY_VARIABLE_ACQUISITION_TYPE ORDER BY NEW_ID) END
			FROM T_FORM_METRICS_P

			PRINT N'FULL MODE ';
		END
			ELSE
			BEGIN 
						-- ES DEL TIPO DATA COLLECTION
			 IF(@KY_PROCESS_FORM = @KY_PROCESS_FORM_PROCESS AND @PIN_TYPE_FORM = 'DC')
			  BEGIN
			     ;WITH T_FORM_METRICS_DC AS (
					SELECT	 
					NEWID() AS NEW_ID
						, CM.ID_METRICS
						, CM.KY_METRICS
						, CM.NM_METRICS
						, CM.KY_FIELD_TYPE
						, CFM.FG_VALIDATE_METRICS
						, CM.DS_TOOLTIP
						, CM.XML_FIELD_SETTINGS 
						, '' AS XML_METRICS_VALUE
						, KF.KY_STATUS_FORM
						, CFM.KY_VARIABLE_ACQUISITION_TYPE
						FROM PRD.C_FORM_METRICS CFM
						JOIN PRD.C_FORM CF ON CFM.ID_FORM = CF.ID_FORM AND CF.ID_FORM = @ID_TEMPLATE_FORM
						JOIN PRD.C_METRICS CM ON CFM.ID_METRICS = CM.ID_METRICS
					    JOIN PRD.K_FORM KF ON KF.ID_K_FORM = @PIN_ID_K_FORM
					)
							INSERT INTO #T_METRICS_VALUES (
						ID_METRIC
						, KY_METRIC
						, NM_METRIC
						, KY_FIELD_TYPE
						, FG_REQUIRED
						, DS_TOOLTIP
						, NM_UNIT
						, XML_FIELD_SETTINGS
						, KY_STATUS_FORM
						, KY_VARIABLE_ACQUISITION_TYPE
						, ROW_ID
					)
						SELECT 
						  ID_METRICS
						, KY_METRICS
						, NM_METRICS
						, KY_FIELD_TYPE
						, FG_VALIDATE_METRICS
						, DS_TOOLTIP
						, XML_FIELD_SETTINGS.value('(/SETTINGS/FIELD_TYPES/@CATALOG_VALUE)[1]', 'NVARCHAR(50)') AS NM_UNIT
						, XML_FIELD_SETTINGS 
						, KY_STATUS_FORM
						, KY_VARIABLE_ACQUISITION_TYPE
						, CASE WHEN KY_VARIABLE_ACQUISITION_TYPE IN ('ALWAYS', 'ODD', 'EVEN') THEN 0 ELSE ROW_NUMBER () 
						   OVER(PARTITION BY KY_VARIABLE_ACQUISITION_TYPE ORDER BY NEW_ID) END
					FROM T_FORM_METRICS_DC

					SET @PIN_NM_PROGRAM = '/PRD/DataCollectionForm'
					--	PRINT N'DATA COLLECTION SOC';
			  END
			END

		IF (@PIN_TYPE_FORM = 'FM')
			BEGIN
						INSERT INTO [PRD].[K_FORM_METRICS]
								([ID_K_FORM]
								,[ID_METRICS]
								,[XML_METRICS_VALUE]
								,[DT_CREATION]
								,[KY_USER_APP_CREATION]
								,[NM_PROGAM_CREATE])
						SELECT
								@PIN_ID_K_FORM 
							, ID_METRIC
							, '<FIELD_TYPES />'
							, @DT_SYSTEM
							, @PIN_KY_USER_APP	 
							, @PIN_NM_PROGRAM
						FROM #T_METRICS_VALUES
						WHERE 
							ROW_ID <= @NO_ACQUISITION_RANDOM_VARIABLES AND
							KY_VARIABLE_ACQUISITION_TYPE IN ('ALWAYS', 'RANDOM', @FLAG_ONCE) 

						INSERT INTO [PRD].[K_FORM_METRICS]
								([ID_K_FORM]
								,[ID_METRICS]
								,[XML_METRICS_VALUE]
								,[DT_CREATION]
								,[KY_USER_APP_CREATION]
								,[NM_PROGAM_CREATE])
						SELECT
								@PIN_ID_K_FORM 
							, ID_METRIC
							, '<FIELD_TYPES />'
							, @DT_SYSTEM
							, @PIN_KY_USER_APP	 
							, @PIN_NM_PROGRAM
						FROM #T_METRICS_VALUES
						WHERE 
							(KY_VARIABLE_ACQUISITION_TYPE = 'EVEN' AND (@V_NO_FORMS_CAPTURED % 2) != 0) OR
							(KY_VARIABLE_ACQUISITION_TYPE = 'ODD' AND (@V_NO_FORMS_CAPTURED % 2) = 0)
		   END
		ELSE 
			BEGIN		
			          IF (@PIN_TYPE_FORM = 'DC')
						BEGIN
							  INSERT INTO [PRD].[K_FORM_METRICS]
								([ID_K_FORM]
								,[ID_METRICS]
								,[XML_METRICS_VALUE]
								,[DT_CREATION]
								,[KY_USER_APP_CREATION]
								,[NM_PROGAM_CREATE])
								SELECT
										@PIN_ID_K_FORM 
									, ID_METRIC
									, '<FIELD_TYPES />'
									, @DT_SYSTEM
									, @PIN_KY_USER_APP	 
									, @PIN_NM_PROGRAM
								FROM #T_METRICS_VALUES
								WHERE 
									--ROW_ID <= @NO_ACQUISITION_RANDOM_VARIABLES AND
									KY_VARIABLE_ACQUISITION_TYPE IN ('ALWAYS', 'RANDOM','EVEN','ODD', @FLAG_ONCE) 
						END
			END
	END


	IF @PIN_DT_START_FORM IS NOT NULL
		UPDATE PRD.K_FORM SET DT_START = @DT_SYSTEM, DT_UPDATE = @DT_SYSTEM, KY_USER_APP_UPDATE = @PIN_KY_USER_APP, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM  
		WHERE ID_K_FORM = @PIN_ID_K_FORM AND DT_START IS NULL


	---- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
	SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
	SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
	SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
	-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED

	IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
		COMMIT	
	END

END TRY
BEGIN CATCH

	--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
	IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
		ROLLBACK
	END
			
	DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
	DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
	SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,@ERROR_MESSAGE)--'Ocurrió un error al procesar el registro')
	SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
					
END CATCH

