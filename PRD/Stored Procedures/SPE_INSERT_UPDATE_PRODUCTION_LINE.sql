-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Martin Sánchez
-- CREATE date: 07/03/2017
-- Description: Insert or update new production line.
-- =============================================
-- 14/08/2017 JDC PIN_XML_AUTHORIZED_OPERATORS parameter is added
-- 09/07/2020: Change SPE parameters and insert/update. by AA
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_INSERT_UPDATE_PRODUCTION_LINE] 
	  @XML_RESULT XML = '' OUT     -- --0 TO ERROR AND 1 TO CORRECT
	, @PIN_ID_PRODUCTION_LINE AS int = NULL
	, @PIN_KY_PRODUCTION_LINE AS nvarchar(50) = NULL
	, @PIN_NM_PRODUCTION_LINE AS nvarchar(300) = NULL
	, @PIN_DS_PRODUCTION_LINE AS nvarchar(500) = NULL
	, @PIN_FG_ACTIVE AS BIT = NULL
	, @PIN_ID_PRODUCTION_LINE_TYPE AS int = NULL
	, @PIN_ID_BRANCH_PLANT AS int = NULL
	, @PIN_NO_IP VARCHAR(50) = NULL
	, @PIN_NO_POUNDS_PER_HOUR AS FLOAT = NULL
	, @PIN_KY_USER_APP AS nvarchar(50)
	, @PIN_NM_PROGRAM AS nvarchar(50)
	, @PIN_TYPE_TRANSACTION CHAR(1)             --I=INSERT   U=UPDATE N= UPDATE NAME

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
	,@DT_SYSTEM DATETIME = GETDATE()

    BEGIN TRY
	--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	

		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION = 'I'
		BEGIN
			--WE INSERT THE REGISTER ON THE TABLE  PRD.C_PRODUCTION_LINE

			INSERT INTO PRD.C_PRODUCTION_LINE (
				ID_PRODUCTION_LINE,
				KY_PRODUCTION_LINE,
				NM_PRODUCTION_LINE,
				DS_PRODUCTION_LINE,
				FG_ACTIVE,
				ID_PRODUCTION_LINE_TYPE,
				ID_BRANCH_PLANT,
				NO_POUNDS_PER_HOUR,
				FG_STACK_LIGHT_ENABLED,
				NO_IP,
				NO_PORT,
				NO_GREEN_REGISTER,
				NO_RED_REGISTER,
				NO_YELLOW_REGISTER,
				NO_GRAY_REGISTER,
				DT_CREATION,
				KY_USER_APP_CREATION,
				NM_PROGAM_CREATE
			) 
			VALUES (
				@PIN_ID_PRODUCTION_LINE,
				@PIN_KY_PRODUCTION_LINE,
				@PIN_NM_PRODUCTION_LINE,
				@PIN_DS_PRODUCTION_LINE,
				@PIN_FG_ACTIVE,
				@PIN_ID_PRODUCTION_LINE_TYPE,
				@PIN_ID_BRANCH_PLANT,
				@PIN_NO_POUNDS_PER_HOUR,
				0,
				@PIN_NO_IP,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL,
				@DT_SYSTEM,
				@PIN_KY_USER_APP,
				@PIN_NM_PROGRAM
			)

			--SET @PIN_ID_PRODUCTION_LINE = SCOPE_IDENTITY();

		END ELSE
		
		IF @PIN_TYPE_TRANSACTION = 'N'
		BEGIN
			UPDATE PRD.C_PRODUCTION_LINE
			SET 
				  NM_PRODUCTION_LINE = @PIN_NM_PRODUCTION_LINE
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE  = @PIN_NM_PROGRAM
			WHERE ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE
		END 
		ELSE
		BEGIN

			-- WE UPDATE THE REGISTER ON THE TABLE PRD.C_PRODUCTION_LINE
			UPDATE PRD.C_PRODUCTION_LINE
			SET 
				  NO_POUNDS_PER_HOUR = @PIN_NO_POUNDS_PER_HOUR
				, FG_ACTIVE          = @PIN_FG_ACTIVE
				, NO_IP              = @PIN_NO_IP
				, DT_UPDATE          = @DT_SYSTEM
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE  = @PIN_NM_PROGRAM
			WHERE ID_PRODUCTION_LINE = @PIN_ID_PRODUCTION_LINE
		END

		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro' )
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register: ' + @ERROR_MESSAGE)			
	END CATCH
END

