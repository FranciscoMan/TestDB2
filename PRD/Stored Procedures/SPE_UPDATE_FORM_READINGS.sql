-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2018
-- Author: Gabriel Vázquez
-- Create date: 17/05/2018
-- Description: Update Form Readings
-- =============================================
-- 10/23/2018 JDR Se agregan los parámetros PIN_KY_USER_OUT_OF_RANGE y PIN_DS_OUT_OF_RANGE
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_UPDATE_FORM_READINGS]
	@XML_RESULT XML = '' OUT    -- --0 TO ERROR AND 1 TO CORRECT
	, @PIN_ID_K_FORM INT
	, @PIN_XML_READINGS XML
	, @PIN_KY_USER_APP NVARCHAR(50)
	, @PIN_NM_PROGRAM NVARCHAR(50)
	, @PIN_TYPE_TRANSACTION CHAR(1)  --I=INSERT   U=UPDATE
AS 
BEGIN  

   	BEGIN TRY
		----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE	
		DECLARE @V_EXIST_TRAN BIT = 0			
			, @DT_SYSTEM DATETIME = GETDATE()

		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			--IN CASE THAT THE TRANSACTION HAVE NOT BEEN STARTED
			BEGIN TRANSACTION 
			--IT SETS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1

		END

		DECLARE @T_FORM_METRICS TABLE (
			ID_METRICS INT
			, XML_METRICS_VALUE XML
		)

		IF @PIN_TYPE_TRANSACTION = 'U' BEGIN

			INSERT INTO @T_FORM_METRICS (ID_METRICS, XML_METRICS_VALUE)
			SELECT c.value('@ID_METRICS', 'INT') AS ID_METRICS
				, c.query('.') AS XML_METRICS_VALUE
			FROM @PIN_XML_READINGS.nodes('/METRICS/FIELD_TYPES') T(c)

			IF EXISTS (SELECT TOP 1 1 FROM PRD.K_FORM WHERE ID_K_FORM = @PIN_ID_K_FORM AND KY_PROCESS_TYPE = 'QUALITY') BEGIN

				DECLARE @V_ID_WORK_ORDER INT = NULL
					,@V_NO_PALLET INT = NULL
					,@V_ID_PALLET INT = NULL
					,@V_ID_QA27 INT = NULL
					
				SELECT TOP 1 @V_ID_WORK_ORDER = KF.ID_WORK_ORDER
					, @V_NO_PALLET = KIS.NO_PALLET
				FROM PRD.K_FORM KF
					INNER JOIN PRD.K_INSPECTION_SKID KIS 
						ON KF.ID_INSPECTION_SKID = KIS.ID_INSPECTION_SKID
				WHERE ID_K_FORM = @PIN_ID_K_FORM

				SELECT TOP 1 @V_ID_PALLET = KP.ID_PALLET
					  , @V_ID_QA27 = KP.ID_QA27
				FROM PRD.K_PALLET KP
				WHERE KP.NO_PALLET = @V_NO_PALLET
					AND KP.ID_WORK_ORDER = @V_ID_WORK_ORDER 

				UPDATE PRD.K_FORM 
				SET ID_QA27 = @V_ID_QA27
					,ID_PALLET = @V_ID_PALLET
				WHERE ID_K_FORM = @PIN_ID_K_FORM
					
			END


			DECLARE @KY_USER_AUTHORIZED_OUT_OF_RANGE AS NVARCHAR(50)
				, @NM_USER_AUTHORIZED_OUT_OF_RANGE AS NVARCHAR(100)
				, @DS_EXPLANATION_OUT_OF_RANGE AS NVARCHAR(500)

			SELECT TOP 1 @KY_USER_AUTHORIZED_OUT_OF_RANGE = c.value('@KY_USER', 'NVARCHAR(50)')
				, @DS_EXPLANATION_OUT_OF_RANGE = c.value('@DS_EXPLANATION', 'NVARCHAR(500)') 
			FROM @PIN_XML_READINGS.nodes('/METRICS/INFO_OUT_OF_RANGE') T(c)

			SELECT TOP 1 @NM_USER_AUTHORIZED_OUT_OF_RANGE = NM_USER FROM ADM.C_USER CU WHERE CU.KY_USER = @KY_USER_AUTHORIZED_OUT_OF_RANGE

			UPDATE PRD.K_FORM 
			SET KY_STATUS_FORM = 'SAVED'
				, KY_USER_AUTHORIZED_OUT_OF_RANGE = ISNULL(@KY_USER_AUTHORIZED_OUT_OF_RANGE, KY_USER_AUTHORIZED_OUT_OF_RANGE)
				, NM_USER_AUTHORIZED_OUT_OF_RANGE = ISNULL(@NM_USER_AUTHORIZED_OUT_OF_RANGE, NM_USER_AUTHORIZED_OUT_OF_RANGE)
				, DS_EXPLANATION_OUT_OF_RANGE = ISNULL(@DS_EXPLANATION_OUT_OF_RANGE, NM_USER_AUTHORIZED_OUT_OF_RANGE)
			WHERE ID_K_FORM = @PIN_ID_K_FORM

			UPDATE PRD.K_FORM_METRICS SET 
					XML_METRICS_VALUE = TFM.XML_METRICS_VALUE,
					DT_UPDATE = @DT_SYSTEM, 
					KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
					NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			FROM @T_FORM_METRICS TFM
			WHERE PRD.K_FORM_METRICS.ID_K_FORM = @PIN_ID_K_FORM AND PRD.K_FORM_METRICS.ID_METRICS = TFM.ID_METRICS

		END


		IF @PIN_TYPE_TRANSACTION = 'C' BEGIN
				
			DECLARE @KY_USER_AUTHORIZED_CANCEL AS NVARCHAR(50)
				, @NM_USER_AUTHORIZED_CANCEL AS NVARCHAR(100)
				, @DS_EXPLANATION AS NVARCHAR(500)

			SELECT TOP 1 @KY_USER_AUTHORIZED_CANCEL = c.value('@KY_USER', 'NVARCHAR(50)')
				, @NM_USER_AUTHORIZED_CANCEL = c.value('@NM_USER', 'NVARCHAR(100)')
				, @DS_EXPLANATION = c.value('@DS_EXPLANATION', 'NVARCHAR(500)') 
			FROM @PIN_XML_READINGS.nodes('/INFO_CANCEL') T(c)

			UPDATE PRD.K_FORM 
			SET KY_STATUS_FORM = 'CANCELLED'
				, DT_CLOSED = @DT_SYSTEM
				, DT_UPDATE = @DT_SYSTEM
				, KY_USER_AUTHORIZED_CANCEL = @KY_USER_AUTHORIZED_CANCEL
				, NM_USER_AUTHORIZED_CANCEL = @NM_USER_AUTHORIZED_CANCEL
				, DS_EXPLANATION_CANCEL = @DS_EXPLANATION
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE ID_K_FORM = @PIN_ID_K_FORM

			UPDATE PRD.K_FORM_METRICS
			SET XML_METRICS_VALUE = '<METRICS />'
				, DT_UPDATE = @DT_SYSTEM
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE PRD.K_FORM_METRICS.ID_K_FORM = @PIN_ID_K_FORM

		END

	--	-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')			
	--	-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT			
	 
	END TRY
	BEGIN CATCH		
	--	--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  =ERROR_MESSAGE()						
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
			
	END CATCH
END

