-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: JUAN DE DIOS PEREZ
-- CRETAE date: 07/04/2017
-- Description: Insert or update a new pallet
-- Modificaton: JCTC - changed message out for each "if" condition
-- =============================================
-- 2018 05 30 JDR The condition to launch the forms is added only when the skid has no captured readings
-- =============================================

CREATE PROCEDURE    [PRD].[SPE_INSERT_UPDATE_PALLET] 
	@XML_RESULT XML = '' OUT
	, @PIN_ID_PALLET INT
	, @PIN_ID_QA27 INT
	, @PIN_ID_WORK_ORDER INT
	, @PIN_NO_PALLET INT
	, @PIN_NO_SECOND_PALLET INT
	, @PIN_NO_QUANTITY INT
	, @PIN_DT_INITIAL_TIME DATETIME
	, @PIN_DT_FINAL_TIME DATETIME
	, @PIN_KY_STATUS NVARCHAR(50)
	, @PIN_KY_USER_INSPECTOR NVARCHAR(50)
	, @PIN_ID_QUALITY_INSPECTOR_AGREEMENT INT
	, @PIN_NM_QUALITY_INSPECTOR_AGREEMENT NVARCHAR(200)
	, @PIN_FG_INSPECTOR_AGREEMENT BIT
	, @PIN_DT_INSPECTOR_AGREEMENT DATETIME
	, @PIN_DS_EXPLANATION_AGREEMENT NVARCHAR(MAX)
	, @PIN_KY_USER_LEADMAN NVARCHAR(50)
	, @PIN_ID_LEADMAN INT
	, @PIN_NM_LEADMAN NVARCHAR(200)
	, @PIN_FG_LEADMAN BIT
	, @PIN_DT_LEADMAN DATETIME
	, @PIN_KY_FIRST_LEVEL_USER NVARCHAR(50)
	, @PIN_ID_FIRST_LEVEL_EMPLOYEE INT
	, @PIN_NM_FIRST_LEVEL_EMPLOYEE NVARCHAR(200)
	, @PIN_FG_FIRST_LEVEL_EMPLOYEE BIT
	, @PIN_DT_FIRST_LEVEL_EMPLOYEE DATETIME
	, @PIN_KY_SECOND_LEVEL_USER_REJECTION NVARCHAR(50)
	, @PIN_ID_SECOND_LEVEL_EMPLOYEE_REJECTION INT
	, @PIN_NM_SECOND_LEVEL_EMPLOYEE_REJECTION NVARCHAR(200)
	, @PIN_FG_SECOND_LEVEL_EMPLOYEE_REJECTION BIT
	, @PIN_DT_SECOND_LEVEL_EMPLOYEE_REJECTION DATETIME
	, @PIN_KY_THIRD_LEVEL_USER_REJECTION NVARCHAR(50)
	, @PIN_ID_THIRD_LEVEL_EMPLOYEE_REJECTION INT
	, @PIN_NM_THIRD_LEVEL_EMPLOYEE_REJECTION NVARCHAR(200)
	, @PIN_FG_THIRD_LEVEL_EMPLOYEE_REJECTION BIT
	, @PIN_DT_THIRD_LEVEL_EMPLOYEE_REJECTION DATETIME
	, @PIN_ID_QUALITY_INSPECTOR_POSITION INT  -- THIS IS THE QUALITY INSPECTOR ID SET UP IN GENERAL CONFIGURATION USED TO SEND TELEGRAM NOTIFICATIONS
	, @PIN_ID_BRANCH_PLANT INT
	, @PIN_XML_POSITION_SCALING XML
	, @PIN_NO_SKIDS_TO_OPEN INT
	, @PIN_KY_USER_APP NVARCHAR(50)
	, @PIN_NM_PROGRAM NVARCHAR(50)
	, @PIN_TYPE_TRANSACTION CHAR(1)             --I=INSERT   U=UPDATE
	
AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
   	BEGIN TRY
		DECLARE @V_EXIST_TRAN BIT = 0
		, @DT_SYSTEM DATETIME = GETDATE()
		, @XML_NOTIFICATIONS XML = N'<NOTIFICATIONS><MESSAGE BODY="TELEGRAM MESSAGE"/></NOTIFICATIONS>'
		, @XML_RECIPIENTS_USERS XML
		, @XML_RECIPIENTS_ALERT XML
		, @XML_NOTIFICATION_FORM XML = N'<NOTIFICATIONS><RECIPIENTS></RECIPIENTS></NOTIFICATIONS>'
		, @XML_NOTIFICATION_ALERT XML = N'<NOTIFICATIONS><RECIPIENTS></RECIPIENTS></NOTIFICATIONS>'
		, @XML_FORM XML
		, @MESSAGE_TELEGRAM NVARCHAR(500)
		, @MESSAGE_ALERT NVARCHAR(500)
		, @NM_PRODUCTION_LINE NVARCHAR(20)
		, @NM_LEADMAN NVARCHAR(100)
		, @V_KY_NOTIFICATION_ORIGIN NVARCHAR(20) = 'PALLET'
		, @V_NO_READINGS_PER_PALLET INT
		, @V_ID_PALLET_WORKING INT
		, @V_KY_PALLETS_WORKING NVARCHAR(50)
		, @V_FG_NEW_SKID BIT
		, @V_ID_QA27 INT
		, @V_NO_QUANTITY INT
		, @XML_ADDITIONAL_DATA_PALLET XML
		, @XML_ADDITIONAL_DATA_WO XML
		, @FG_SEND_FORM INT
		, @NO_PALETS_EXISTS_WO INT
		, @NO_PALLERS_BY_QA27 INT
		, @V_ID_INSPECTION_SKID INT
		, @ID_BRANCH_PLANT NVARCHAR(5)
		, @XML_CONFIGURATION XML 
		, @XML_BRANCH_PLANT_SELECTED XML
		

		DECLARE @XML_RECIPIENTS XML
		--DECLARE @T_USER TABLE (
		--	ID_ROW INT NOT NULL PRIMARY KEY IDENTITY (1,1)
		--	, KY_USER NVARCHAR(100)
		--	, KY_TELEGRAM NVARCHAR(100) 
		--)  
	
		CREATE TABLE #TB_SKIDS_OPEN  (
			ID_INSPECTION_SKID int null,
			ID_PALLET int null,
			NO_PALLET INT NOT NULL,
			ID_WORK_ORDER INT NOT NULL,
			NO_READINGS INT NULL 
		) 

		CREATE TABLE #TB_SKIDS_SEND_FORM  (
			ID_LAST_PALLET INT NOT NULL
		) 

		CREATE TABLE #TB_SKIDS_RECALCULATE (
			ID_PALLET INT 
		)

		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	

		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION = 'I' BEGIN

			INSERT INTO #TB_SKIDS_OPEN (
				ID_INSPECTION_SKID
				, ID_PALLET
				, NO_PALLET
				, ID_WORK_ORDER
			)
			SELECT KIS.ID_INSPECTION_SKID
				, KP.ID_PALLET
			    , KP.NO_PALLET
				, KP.ID_WORK_ORDER
			FROM PRD.K_PALLET KP 
				LEFT JOIN PRD.K_INSPECTION_SKID KIS 
					ON KP.NO_PALLET = KIS.NO_PALLET 
					AND KP.ID_WORK_ORDER = KIS.ID_WORK_ORDER
			WHERE KP.ID_WORK_ORDER = @PIN_ID_WORK_ORDER 
				AND KP.KY_STATUS = 'WORKING'


			INSERT INTO #TB_SKIDS_SEND_FORM (
				ID_LAST_PALLET
			)
			SELECT KP.ID_PALLET 
			FROM PRD.K_WORK_ORDER WO 
				INNER JOIN PRD.K_PALLET KP 
					ON WO.ID_WORK_ORDER = KP.ID_WORK_ORDER
			WHERE KP.ID_WORK_ORDER = @PIN_ID_WORK_ORDER 
				AND KP.FG_SEND_FORM = 1


			SET @V_NO_QUANTITY = (
				SELECT TOP 1 WO.NO_QTY_SKID
				FROM PRD.K_WORK_ORDER WO
				WHERE WO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER 
			)

			IF EXISTS (SELECT TOP 1 1 FROM #TB_SKIDS_OPEN) BEGIN

				UPDATE SO 
				SET NO_READINGS = (SELECT COUNT(1) FROM PRD.K_FORM KF WHERE KF.KY_PROCESS_TYPE = 'QUALITY' AND KF.ID_INSPECTION_SKID = SO.ID_INSPECTION_SKID)
				FROM #TB_SKIDS_OPEN SO
				
				UPDATE PRD.K_PALLET 
				SET NO_QUANTITY = @V_NO_QUANTITY
					, DT_UPDATE = @DT_SYSTEM
					, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
					, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
				WHERE ID_PALLET IN (SELECT ID_PALLET FROM #TB_SKIDS_OPEN WHERE NO_READINGS > 0)

				UPDATE PRD.K_PALLET 
				SET KY_STATUS = 'NON_INSPECTED'
					, DT_FINAL_OPERATION_TIME = @DT_SYSTEM
					, NO_QUANTITY = @V_NO_QUANTITY
					, DT_UPDATE = @DT_SYSTEM
					, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
					, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
				WHERE ID_PALLET IN (SELECT ID_PALLET FROM #TB_SKIDS_OPEN WHERE NO_READINGS = 0)

			END

			SELECT @V_FG_NEW_SKID = CASE WHEN (WO.NO_RUN_QTY + WO.NO_QTY_ADDED) > SUM(ISNULL(KP.NO_QUANTITY,0)) THEN 1 ELSE 0 END 
			FROM PRD.K_WORK_ORDER WO
				LEFT JOIN PRD.K_PALLET KP 
					ON WO.ID_WORK_ORDER = KP.ID_WORK_ORDER 
					AND KP.KY_STATUS IN (SELECT KY_PALLET_STATUS FROM ADM.VW_C_PALLET_STATUS WHERE FG_FOR_SAVE = 1)
			WHERE WO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
			GROUP BY WO.NO_RUN_QTY, WO.NO_QTY_ADDED
			
			IF @V_FG_NEW_SKID = 1 BEGIN 

				----UPDATE FINAL TIME OPERATION FORM SKID
				UPDATE KP
				SET DT_FINAL_OPERATION_TIME = @DT_SYSTEM
				FROM PRD.K_PALLET KP
					INNER JOIN #TB_SKIDS_SEND_FORM T1 
						ON KP.ID_PALLET = T1.ID_LAST_PALLET

				----REASIGN LAST SKID TO WORK ORDER 
				SELECT @NO_PALETS_EXISTS_WO = COUNT(KP.ID_PALLET)
				FROM PRD.K_PALLET KP
				WHERE KP.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
				  AND EXISTS (SELECT TOP 1 1 FROM PRD.K_PALLET KPS WHERE KPS.ID_WORK_ORDER = @PIN_ID_WORK_ORDER)

				SELECT @NO_PALLERS_BY_QA27 = COUNT(ID_PALLET)
				FROM PRD.K_PALLET KP
				WHERE KP.ID_QA27 = @PIN_ID_QA27
				
				IF @NO_PALETS_EXISTS_WO > 0 AND @NO_PALLERS_BY_QA27 = 0 BEGIN

					DECLARE @V_DATE_OLD_SHIFT_START AS DATETIME
						, @V_DATE_OLD_SHIFT_END AS DATETIME
						, @V_DATE_NEW_SHIFT_START AS DATETIME
						, @V_DATE_NEW_SHIFT_END AS DATETIME
						, @V_NO_MIN_WORKIG_OLD_SHIFT AS FLOAT
						, @V_NO_MAX_WORKIG_OLD_SHIFT AS FLOAT
						, @V_ID_QA27_OLD AS INT

					CREATE TABLE #TB_SHIFT_OLD  (
						ID_SHIFT INT,
						DT_START_SHIFT DATETIME,
						DT_END_SHIFT DATETIME
					)

					----CURRENT SHIFT

					SELECT @V_DATE_NEW_SHIFT_START = KS.DT_START_SHIFT
						, @V_DATE_NEW_SHIFT_END = KS.DT_END_SHIFT
					FROM PRD.K_SHIFT KS
						INNER JOIN PRD.K_WORK_ORDER WO 
							ON KS.ID_PRODUCTION_LINE = WO.ID_PRODUCTION_LINE
					WHERE WO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
						AND KS.FG_STATUS = 1
					ORDER BY KS.ID_SHIFT DESC

					----PREVIOUS SHIFT
					INSERT INTO #TB_SHIFT_OLD
					SELECT TOP 1 KS.ID_SHIFT
						, KS.DT_START_SHIFT
						, KS.DT_END_SHIFT
					FROM PRD.K_SHIFT KS
						INNER JOIN PRD.K_WORK_ORDER WO 
							ON KS.ID_PRODUCTION_LINE = WO.ID_PRODUCTION_LINE
					WHERE WO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
						AND KS.FG_STATUS = 0
					ORDER BY KS.ID_SHIFT DESC

					SELECT @V_DATE_OLD_SHIFT_START = DT_START_SHIFT
						, @V_DATE_OLD_SHIFT_END = DT_END_SHIFT
					FROM #TB_SHIFT_OLD SO

					UPDATE KP
					SET KP.ID_QA27 = NEW_PALLET.ID_QA27
						,KP.NM_LEADMAN = @PIN_NM_LEADMAN
						,KP.KY_USER_LEADMAN = @PIN_KY_USER_LEADMAN
						,KP.ID_LEADMAN = @PIN_ID_LEADMAN
					FROM PRD.K_PALLET  KP
						INNER JOIN (
							SELECT ID_PALLET
								, KP.DT_INITIAL_TIME AS DT_INITIAL_TIME_PALLET
								, KP.DT_FINAL_OPERATION_TIME AS DT_FINAL_OPERATION_TIME_PALLET
								, CASE 
									WHEN DATEDIFF(MILLISECOND,KP.DT_INITIAL_TIME, @V_DATE_OLD_SHIFT_END) > DATEDIFF(MILLISECOND,@V_DATE_NEW_SHIFT_START, KP.DT_FINAL_OPERATION_TIME) THEN KP.ID_QA27
									WHEN DATEDIFF(MILLISECOND,KP.DT_INITIAL_TIME, @V_DATE_OLD_SHIFT_END) < DATEDIFF(MILLISECOND,@V_DATE_NEW_SHIFT_START, KP.DT_FINAL_OPERATION_TIME) THEN @PIN_ID_QA27
									ELSE KP.ID_QA27
								END AS ID_QA27
								, CASE 
									WHEN DATEDIFF(MILLISECOND,KP.DT_INITIAL_TIME, @V_DATE_OLD_SHIFT_END) > DATEDIFF(MILLISECOND,@V_DATE_NEW_SHIFT_START, KP.DT_FINAL_OPERATION_TIME) THEN 0
									WHEN DATEDIFF(MILLISECOND,KP.DT_INITIAL_TIME, @V_DATE_OLD_SHIFT_END) < DATEDIFF(MILLISECOND,@V_DATE_NEW_SHIFT_START, KP.DT_FINAL_OPERATION_TIME) THEN 1 
									ELSE 0 
								END 
								AS FG_REASIGN_QA
						FROM PRD.K_PALLET KP
							INNER JOIN PRD.K_QA27 KQA ON KP.ID_QA27 = KQA.ID_QA27
						WHERE KP.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
							AND FG_SEND_FORM = 1
						) NEW_PALLET 
							ON KP.ID_PALLET = NEW_PALLET.ID_PALLET
					WHERE NEW_PALLET.FG_REASIGN_QA = 1					      

				END



				--WE INSERT THE REGISTER ON THE TABLE  PRD.K_PALLET

				INSERT INTO PRD.K_PALLET (
					ID_QA27
					, ID_WORK_ORDER
					, NO_PALLET
					, NO_QUANTITY
					, DT_INITIAL_TIME
					, DT_FINAL_TIME
					, KY_STATUS
					, KY_USER_INSPECTOR
					, ID_QUALITY_INSPECTOR_AGREEMENT
					, NM_QUALITY_INSPECTOR_AGREEMENT
					, FG_INSPECTOR_AGREEMENT
					, DT_INSPECTOR_AGREEMENT
					, DS_EXPLANATION_AGREEMENT
					, KY_USER_LEADMAN
					, ID_LEADMAN
					, NM_LEADMAN
					, FG_LEADMAN
					, DT_LEADMAN
					, KY_FIRST_LEVEL_USER
					, ID_FIRST_LEVEL_EMPLOYEE
					, NM_FIRST_LEVEL_EMPLOYEE
					, FG_FIRST_LEVEL_EMPLOYEE
					, DT_FIRST_LEVEL_EMPLOYEE
					, KY_SECOND_LEVEL_USER_REJECTION
					, ID_SECOND_LEVEL_EMPLOYEE_REJECTION
					, NM_SECOND_LEVEL_EMPLOYEE_REJECTION
					, FG_SECOND_LEVEL_EMPLOYEE_REJECTION
					, DT_SECOND_LEVEL_EMPLOYEE_REJECTION
					, KY_THIRD_LEVEL_USER_REJECTION
					, ID_THIRD_LEVEL_EMPLOYEE_REJECTION
					, NM_THIRD_LEVEL_EMPLOYEE_REJECTION
					, FG_THIRD_LEVEL_EMPLOYEE_REJECTION
					, DT_THIRD_LEVEL_EMPLOYEE_REJECTION
					, FG_SEND_FORM
					, NO_PALLETS_OPENED
					, DT_CREATION
					, KY_USER_APP_CREATION
					, NM_PROGAM_CREATE
				) VALUES (
					@PIN_ID_QA27
					, @PIN_ID_WORK_ORDER
					, @PIN_NO_PALLET
					, @V_NO_QUANTITY --, @PIN_NO_QUANTITY
					, @DT_SYSTEM
					, @PIN_DT_FINAL_TIME
					, @PIN_KY_STATUS
					, @PIN_KY_USER_INSPECTOR
					, @PIN_ID_QUALITY_INSPECTOR_AGREEMENT
					, @PIN_NM_QUALITY_INSPECTOR_AGREEMENT
					, @PIN_FG_INSPECTOR_AGREEMENT
					, @PIN_DT_INSPECTOR_AGREEMENT
					, @PIN_DS_EXPLANATION_AGREEMENT
					, @PIN_KY_USER_LEADMAN
					, @PIN_ID_LEADMAN
					, @PIN_NM_LEADMAN
					, @PIN_FG_LEADMAN
					, @PIN_DT_LEADMAN
					, @PIN_KY_FIRST_LEVEL_USER
					, @PIN_ID_FIRST_LEVEL_EMPLOYEE
					, @PIN_NM_FIRST_LEVEL_EMPLOYEE
					, @PIN_FG_FIRST_LEVEL_EMPLOYEE
					, @PIN_DT_FIRST_LEVEL_EMPLOYEE
					, @PIN_KY_SECOND_LEVEL_USER_REJECTION
					, @PIN_ID_SECOND_LEVEL_EMPLOYEE_REJECTION
					, @PIN_NM_SECOND_LEVEL_EMPLOYEE_REJECTION
					, @PIN_FG_SECOND_LEVEL_EMPLOYEE_REJECTION
					, @PIN_DT_SECOND_LEVEL_EMPLOYEE_REJECTION
					, @PIN_KY_THIRD_LEVEL_USER_REJECTION
					, @PIN_ID_THIRD_LEVEL_EMPLOYEE_REJECTION
					, @PIN_NM_THIRD_LEVEL_EMPLOYEE_REJECTION
					, @PIN_FG_THIRD_LEVEL_EMPLOYEE_REJECTION
					, @PIN_DT_THIRD_LEVEL_EMPLOYEE_REJECTION
					, 1
					, @PIN_NO_SKIDS_TO_OPEN
					, @DT_SYSTEM 
					, @PIN_KY_USER_APP 
					, @PIN_NM_PROGRAM
				)

				SET @PIN_ID_PALLET = SCOPE_IDENTITY()

				IF EXISTS (SELECT TOP 1 1 FROM PRD.K_INSPECTION_SKID KIS WHERE KIS.NO_PALLET = @PIN_NO_PALLET AND KIS.ID_WORK_ORDER = @PIN_ID_WORK_ORDER) BEGIN

					UPDATE KF
					SET KF.ID_QA27 = @PIN_ID_QA27
						,KF.ID_PALLET = @PIN_ID_PALLET
					FROM PRD.K_INSPECTION_SKID KIS
						INNER JOIN PRD.K_FORM KF 
							ON KIS.ID_INSPECTION_SKID = KF.ID_INSPECTION_SKID
					WHERE KF.KY_PROCESS_TYPE = 'QUALITY'
						AND KIS.NO_PALLET = @PIN_NO_PALLET
						AND	KIS.ID_WORK_ORDER = @PIN_ID_WORK_ORDER


					UPDATE KP
					SET KP.KY_STATUS = KIS.KY_STATUS
					FROM PRD.K_PALLET KP
						INNER JOIN PRD.K_INSPECTION_SKID KIS 
							ON KP.NO_PALLET = KIS.NO_PALLET 
							AND KP.ID_WORK_ORDER = KIS.ID_WORK_ORDER
					WHERE KP.NO_PALLET = @PIN_NO_PALLET 
					  AND KP.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
					    
				END

				IF @PIN_NO_SECOND_PALLET IS NOT NULL BEGIN

					INSERT INTO PRD.K_PALLET (
						ID_QA27
						, ID_WORK_ORDER
						, NO_PALLET
						, NO_QUANTITY
						, DT_INITIAL_TIME
						, DT_FINAL_TIME
						, KY_STATUS
						, KY_USER_INSPECTOR
						, ID_QUALITY_INSPECTOR_AGREEMENT
						, NM_QUALITY_INSPECTOR_AGREEMENT
						, FG_INSPECTOR_AGREEMENT
						, DT_INSPECTOR_AGREEMENT
						, DS_EXPLANATION_AGREEMENT
						, KY_USER_LEADMAN
						, ID_LEADMAN
						, NM_LEADMAN
						, FG_LEADMAN
						, DT_LEADMAN
						, KY_FIRST_LEVEL_USER
						, ID_FIRST_LEVEL_EMPLOYEE
						, NM_FIRST_LEVEL_EMPLOYEE
						, FG_FIRST_LEVEL_EMPLOYEE
						, DT_FIRST_LEVEL_EMPLOYEE
						, KY_SECOND_LEVEL_USER_REJECTION
						, ID_SECOND_LEVEL_EMPLOYEE_REJECTION
						, NM_SECOND_LEVEL_EMPLOYEE_REJECTION
						, FG_SECOND_LEVEL_EMPLOYEE_REJECTION
						, DT_SECOND_LEVEL_EMPLOYEE_REJECTION
						, KY_THIRD_LEVEL_USER_REJECTION
						, ID_THIRD_LEVEL_EMPLOYEE_REJECTION
						, NM_THIRD_LEVEL_EMPLOYEE_REJECTION
						, FG_THIRD_LEVEL_EMPLOYEE_REJECTION
						, DT_THIRD_LEVEL_EMPLOYEE_REJECTION
						, FG_SEND_FORM
						, NO_PALLETS_OPENED
						, DT_CREATION
						, KY_USER_APP_CREATION
						, NM_PROGAM_CREATE
					) VALUES (
						@PIN_ID_QA27
						, @PIN_ID_WORK_ORDER
						, @PIN_NO_SECOND_PALLET
						, @V_NO_QUANTITY --, @PIN_NO_QUANTITY
						, @DT_SYSTEM
						, @PIN_DT_FINAL_TIME
						, @PIN_KY_STATUS
						, @PIN_KY_USER_INSPECTOR
						, @PIN_ID_QUALITY_INSPECTOR_AGREEMENT
						, @PIN_NM_QUALITY_INSPECTOR_AGREEMENT
						, @PIN_FG_INSPECTOR_AGREEMENT
						, @PIN_DT_INSPECTOR_AGREEMENT
						, @PIN_DS_EXPLANATION_AGREEMENT
						, @PIN_KY_USER_LEADMAN
						, @PIN_ID_LEADMAN
						, @PIN_NM_LEADMAN
						, @PIN_FG_LEADMAN
						, @PIN_DT_LEADMAN
						, @PIN_KY_FIRST_LEVEL_USER
						, @PIN_ID_FIRST_LEVEL_EMPLOYEE
						, @PIN_NM_FIRST_LEVEL_EMPLOYEE
						, @PIN_FG_FIRST_LEVEL_EMPLOYEE
						, @PIN_DT_FIRST_LEVEL_EMPLOYEE
						, @PIN_KY_SECOND_LEVEL_USER_REJECTION
						, @PIN_ID_SECOND_LEVEL_EMPLOYEE_REJECTION
						, @PIN_NM_SECOND_LEVEL_EMPLOYEE_REJECTION
						, @PIN_FG_SECOND_LEVEL_EMPLOYEE_REJECTION
						, @PIN_DT_SECOND_LEVEL_EMPLOYEE_REJECTION
						, @PIN_KY_THIRD_LEVEL_USER_REJECTION
						, @PIN_ID_THIRD_LEVEL_EMPLOYEE_REJECTION
						, @PIN_NM_THIRD_LEVEL_EMPLOYEE_REJECTION
						, @PIN_FG_THIRD_LEVEL_EMPLOYEE_REJECTION
						, @PIN_DT_THIRD_LEVEL_EMPLOYEE_REJECTION
						, 1
						, @PIN_NO_SKIDS_TO_OPEN
						, @DT_SYSTEM 
						, @PIN_KY_USER_APP 
						, @PIN_NM_PROGRAM
					)

					SET @PIN_ID_PALLET = SCOPE_IDENTITY()

					IF EXISTS (SELECT 1 FROM PRD.K_INSPECTION_SKID KIS WHERE KIS.NO_PALLET = @PIN_NO_SECOND_PALLET AND KIS.ID_WORK_ORDER = @PIN_ID_WORK_ORDER) BEGIN

						UPDATE KF
						SET KF.ID_QA27 = @PIN_ID_QA27
							,KF.ID_PALLET = @PIN_ID_PALLET
						FROM PRD.K_INSPECTION_SKID KIS
							INNER JOIN PRD.K_FORM KF 
								ON KIS.ID_INSPECTION_SKID = KF.ID_INSPECTION_SKID
						WHERE KF.KY_PROCESS_TYPE = 'QUALITY'
							AND KIS.NO_PALLET = @PIN_NO_SECOND_PALLET
							AND	KIS.ID_WORK_ORDER = @PIN_ID_WORK_ORDER

						UPDATE KP
						   SET KP.KY_STATUS = KIS.KY_STATUS
						FROM PRD.K_PALLET KP
						JOIN PRD.K_INSPECTION_SKID KIS ON KP.NO_PALLET = KIS.NO_PALLET AND KP.ID_WORK_ORDER = KIS.ID_WORK_ORDER
						WHERE KP.NO_PALLET = @PIN_NO_SECOND_PALLET 
						  AND KP.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
					    
					END

				END

				UPDATE KP
				SET FG_SEND_FORM = 0
				FROM PRD.K_PALLET KP
					INNER JOIN #TB_SKIDS_SEND_FORM T1 
						ON KP.ID_PALLET = T1.ID_LAST_PALLET


				-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
				SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
				--SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, CAST(@PIN_ID_PALLET AS NVARCHAR), 'ID_PALLET')


--				IF EXISTS (SELECT TOP 1 1 FROM @TB_SKIDS_SEND_FORM TSSF) BEGIN
				-- IF THERE ARE NO FORMS FOR THAT SPECIFIC PALLET SENDS FORM
				IF EXISTS (SELECT TOP 1 1 FROM PRD.K_PALLET KP INNER JOIN #TB_SKIDS_SEND_FORM TSSF ON KP.ID_PALLET = TSSF.ID_LAST_PALLET WHERE NOT EXISTS (SELECT TOP 1 1 FROM PRD.K_FORM KF WHERE KP.ID_PALLET = KF.ID_PALLET AND KF.KY_PROCESS_TYPE = 'MANUFACTURE')) BEGIN
								
					SET @XML_ADDITIONAL_DATA_PALLET = (
					SELECT KP.ID_LAST_PALLET AS '@ID_PALLET'
					FROM #TB_SKIDS_SEND_FORM KP
					FOR XML PATH('PALLET'),  ROOT('PALLETS')
					)
					  
					SET @XML_RESULT = DBO.F_ERROR_INSERT_DATA(@XML_RESULT, @XML_ADDITIONAL_DATA_PALLET)
				END

				SET @XML_ADDITIONAL_DATA_WO = (
					SELECT 0 AS '@FG_CLOSED_WO'
					FOR XML PATH('WO_DATA')
				)

				SET @XML_RESULT = DBO.F_ERROR_INSERT_DATA(@XML_RESULT, @XML_ADDITIONAL_DATA_WO)

-------------------------------------------------------------------------------------------------------------------------
			END ELSE BEGIN

				SET @V_ID_QA27 = (
					SELECT  TOP 1 KQA.ID_QA27
					FROM PRD.K_WORK_ORDER WO
						JOIN PRD.K_QA27 KQA 
							ON WO.ID_WORK_ORDER = KQA.ID_WORK_ORDER
					WHERE WO.ID_WORK_ORDER = @PIN_ID_WORK_ORDER
						AND KQA.KY_STATUS = 'RUNNING'
					ORDER BY KQA.ID_QA27 DESC
				)

				UPDATE KP
				SET FG_SEND_FORM = 0
				FROM PRD.K_PALLET KP
				WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER 
					AND FG_SEND_FORM = 1;					

				UPDATE PRD.K_QA27
				SET KY_STATUS = 'COMPLETE'
					, DT_FINAL_TIME = @DT_SYSTEM
					, DT_UPDATE = @DT_SYSTEM
					, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
					, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
				WHERE ID_QA27 = @V_ID_QA27;

				UPDATE PRD.K_WORK_ORDER
				SET KY_STATUS = 'COMPLETE'
					, DT_CLOSE_WORK_ORDER = @DT_SYSTEM
					, DT_UPDATE = @DT_SYSTEM
					, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
					, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
				WHERE ID_WORK_ORDER = @PIN_ID_WORK_ORDER;


				-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
				SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'WARNING_WITH_FUNCTION')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Skid no creado, ya se completo la cantidad de piezas de la orden de trabajo. La orden de trabajo se cerró.', 'ES')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Skid not created, the number of work order pieces has already been completed. The work order was closed.', 'EN')

				SET @XML_ADDITIONAL_DATA_WO = (
					SELECT 1 AS '@FG_CLOSED_WO'
					FOR XML PATH('WO_DATA')
				)

				SET @XML_RESULT = DBO.F_ERROR_INSERT_DATA(@XML_RESULT, @XML_ADDITIONAL_DATA_WO)


			END



			------------------------------------------SCALING BY PALLET--------------------------------------------------------------
			
			SELECT @ID_BRANCH_PLANT = ISNULL(WO.ID_BRANCH_PLANT, 'ALL')
			FROM PRD.K_PALLET KP
				INNER JOIN PRD.K_WORK_ORDER WO 
					ON WO.ID_WORK_ORDER = KP.ID_WORK_ORDER
			WHERE KP.ID_PALLET = @PIN_ID_PALLET
						
			SELECT @XML_CONFIGURATION = XML_CONFIGURATION FROM ADM.S_CONFIGURATION
					
			SELECT @XML_BRANCH_PLANT_SELECTED=msgs.msg.query('.')
			FROM @XML_CONFIGURATION.nodes('CONFIGURATIONS/ESPECIFIC_CONFIGURATION/child::node()') msgs(msg)	
			WHERE msgs.msg.value('@ID_BRANCH_PLANT', 'nvarchar(max)') = @ID_BRANCH_PLANT

			INSERT INTO PRD.K_POSITION_SCALING (
				ID_PALLET
				, KY_PROCESS_PALLET
				, ID_POSITION
				, KY_LEVEL_TYPE
				, NO_TIME_HOLD_ON
				, DT_CREATION
				, KY_USER_APP_CREATION
				, NM_PROGAM_CREATE
			)
			SELECT
				@PIN_ID_PALLET,
				'OPEN_PALLET',
				msgs.msg.value('@ID_POSITION', 'INT') ID_POSITION,
				1 AS KY_LEVEL_TYPE,
				0 AS NO_TIME_HOLD_ON,
				@DT_SYSTEM,
				@PIN_KY_USER_APP,
				@PIN_NM_PROGRAM													 
			FROM @XML_BRANCH_PLANT_SELECTED.nodes('BRANCH_PLANT/QUALITY_PROCESS/QUALITY_INSPECTOR') msgs(msg)
				,PRD.K_PALLET KP
				INNER JOIN PRD.K_WORK_ORDER WO 
					ON WO.ID_WORK_ORDER = KP.ID_WORK_ORDER
			WHERE KP.ID_PALLET = @PIN_ID_PALLET 

		END

		IF @PIN_TYPE_TRANSACTION = 'U' BEGIN
			-- WE UPDATE THE REGISTER ON THE TABLE

			UPDATE PRD.K_PALLET 
			SET NO_QUANTITY = ISNULL(@PIN_NO_QUANTITY, NO_QUANTITY)
				, DT_FINAL_TIME = @DT_SYSTEM
				, KY_STATUS = @PIN_KY_STATUS
				, KY_USER_INSPECTOR = @PIN_KY_USER_INSPECTOR
				, ID_QUALITY_INSPECTOR_AGREEMENT = @PIN_ID_QUALITY_INSPECTOR_AGREEMENT
				, NM_QUALITY_INSPECTOR_AGREEMENT = @PIN_NM_QUALITY_INSPECTOR_AGREEMENT
				, FG_INSPECTOR_AGREEMENT = ISNULL(@PIN_FG_INSPECTOR_AGREEMENT,0)
				, DT_INSPECTOR_AGREEMENT = @PIN_DT_INSPECTOR_AGREEMENT
				, DS_EXPLANATION_AGREEMENT = @PIN_DS_EXPLANATION_AGREEMENT
				, KY_USER_LEADMAN = @PIN_KY_USER_LEADMAN
				, ID_LEADMAN = @PIN_ID_LEADMAN
				, NM_LEADMAN = @PIN_NM_LEADMAN
				, FG_LEADMAN = ISNULL(@PIN_FG_LEADMAN,0)
				, DT_LEADMAN = @PIN_DT_LEADMAN
				, KY_FIRST_LEVEL_USER = @PIN_KY_FIRST_LEVEL_USER
				, ID_FIRST_LEVEL_EMPLOYEE = @PIN_ID_FIRST_LEVEL_EMPLOYEE
				, NM_FIRST_LEVEL_EMPLOYEE = @PIN_NM_FIRST_LEVEL_EMPLOYEE
				, FG_FIRST_LEVEL_EMPLOYEE = ISNULL(@PIN_FG_FIRST_LEVEL_EMPLOYEE,0) 
				, DT_FIRST_LEVEL_EMPLOYEE = @PIN_DT_FIRST_LEVEL_EMPLOYEE
				, KY_SECOND_LEVEL_USER_REJECTION = @PIN_KY_SECOND_LEVEL_USER_REJECTION
				, ID_SECOND_LEVEL_EMPLOYEE_REJECTION = @PIN_ID_SECOND_LEVEL_EMPLOYEE_REJECTION 
				, NM_SECOND_LEVEL_EMPLOYEE_REJECTION = @PIN_NM_SECOND_LEVEL_EMPLOYEE_REJECTION 
				, FG_SECOND_LEVEL_EMPLOYEE_REJECTION = ISNULL(@PIN_FG_SECOND_LEVEL_EMPLOYEE_REJECTION,0)
				, DT_SECOND_LEVEL_EMPLOYEE_REJECTION = @PIN_DT_SECOND_LEVEL_EMPLOYEE_REJECTION
				, KY_THIRD_LEVEL_USER_REJECTION = @PIN_KY_THIRD_LEVEL_USER_REJECTION 
				, ID_THIRD_LEVEL_EMPLOYEE_REJECTION = @PIN_ID_THIRD_LEVEL_EMPLOYEE_REJECTION 
				, NM_THIRD_LEVEL_EMPLOYEE_REJECTION = @PIN_NM_THIRD_LEVEL_EMPLOYEE_REJECTION
				, FG_THIRD_LEVEL_EMPLOYEE_REJECTION = ISNULL(@PIN_FG_THIRD_LEVEL_EMPLOYEE_REJECTION,0) 
				, DT_THIRD_LEVEL_EMPLOYEE_REJECTION = @PIN_DT_THIRD_LEVEL_EMPLOYEE_REJECTION 
				, DT_UPDATE =@DT_SYSTEM
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE ID_PALLET = @PIN_ID_PALLET

			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

------------------------------------------------------------------------------------------------------------
		END

		IF @PIN_TYPE_TRANSACTION = 'F' BEGIN --QUALITY INSPECTOR VERDICT  <--FIRST-->

			UPDATE PRD.K_PALLET
			SET KY_STATUS = @PIN_KY_STATUS
				, KY_USER_INSPECTOR = @PIN_KY_USER_INSPECTOR
				, ID_QUALITY_INSPECTOR_AGREEMENT = @PIN_ID_QUALITY_INSPECTOR_AGREEMENT
				, NM_QUALITY_INSPECTOR_AGREEMENT = @PIN_NM_QUALITY_INSPECTOR_AGREEMENT
				, FG_INSPECTOR_AGREEMENT = ISNULL(@PIN_FG_INSPECTOR_AGREEMENT,0) 
				, DT_INSPECTOR_AGREEMENT = @DT_SYSTEM
				, DS_EXPLANATION_AGREEMENT = @PIN_DS_EXPLANATION_AGREEMENT
				, ID_FIRST_LEVEL_EMPLOYEE = @PIN_ID_FIRST_LEVEL_EMPLOYEE 
				, DT_UPDATE =@DT_SYSTEM
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE ID_PALLET = @PIN_ID_PALLET

			UPDATE KIS
			SET KIS.KY_STATUS = @PIN_KY_STATUS
				, KIS.DT_UPDATE =@DT_SYSTEM
				, KIS.KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, KIS.NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			FROM PRD.K_INSPECTION_SKID KIS
				JOIN PRD.K_PALLET KP 
					ON KIS.NO_PALLET = KP.NO_PALLET 
					AND KIS.ID_WORK_ORDER = KP.ID_WORK_ORDER
			WHERE KP.ID_PALLET = @PIN_ID_PALLET 

			IF @PIN_FG_INSPECTOR_AGREEMENT = 0 BEGIN

				SELECT  @NM_PRODUCTION_LINE = WO.NM_PRODUCTION_LINE
					, @NM_LEADMAN =QA.NM_LEADMAN
					, @PIN_ID_BRANCH_PLANT = WO.ID_BRANCH_PLANT
				FROM PRD.K_QA27 QA 
					INNER JOIN  PRD.K_WORK_ORDER WO 
						ON WO.ID_WORK_ORDER = QA.ID_WORK_ORDER
				WHERE QA.ID_QA27 =@PIN_ID_QA27 
					AND QA.ID_WORK_ORDER = @PIN_ID_WORK_ORDER ;
					   
				SELECT @ID_BRANCH_PLANT = ISNULL(WO.ID_BRANCH_PLANT,'ALL')
				FROM PRD.K_PALLET KP
					INNER JOIN PRD.K_WORK_ORDER WO 
						ON WO.ID_WORK_ORDER = KP.ID_WORK_ORDER
				WHERE KP.ID_PALLET = @PIN_ID_PALLET
						
				SELECT @XML_CONFIGURATION = XML_CONFIGURATION FROM ADM.S_CONFIGURATION
					
				SELECT @XML_BRANCH_PLANT_SELECTED=msgs.msg.query('.')
				FROM @XML_CONFIGURATION.nodes('CONFIGURATIONS/ESPECIFIC_CONFIGURATION/child::node()') msgs(msg)	
				WHERE msgs.msg.value('@ID_BRANCH_PLANT', 'nvarchar(max)') = @ID_BRANCH_PLANT
						
				INSERT INTO PRD.K_POSITION_SCALING (
					ID_PROBLEM_CODE
					, ID_FORM
					, ID_PALLET
					, KY_PROCESS_PALLET
					, ID_POSITION
					, KY_LEVEL_TYPE
					, NO_TIME_HOLD_ON
					, DT_CREATION
					, KY_USER_APP_CREATION
					, NM_PROGAM_CREATE
				)
				SELECT NULL
					, NULL
					, @PIN_ID_PALLET
					, 'VERDICT'
					, msgs.msg.value('@ID_POSITION', 'INT') ID_POSITION
					, 1 AS KY_LEVEL_TYPE
					, 0 AS NO_TIME_HOLD_ON
					, @DT_SYSTEM
					, @PIN_KY_USER_APP
					, @PIN_NM_PROGRAM													 
				FROM @XML_BRANCH_PLANT_SELECTED.nodes('BRANCH_PLANT/QUALITY_PROCESS/POSITIONS_MBR/child::node()') msgs(msg)  ,PRD.K_PALLET KP
					INNER JOIN PRD.K_WORK_ORDER WO 
						ON WO.ID_WORK_ORDER = KP.ID_WORK_ORDER
				WHERE KP.ID_PALLET=	@PIN_ID_PALLET 
				UNION ALL
				SELECT NULL
					, NULL
					, @PIN_ID_PALLET
					, 'VERDICT'
					, msgs.msg.value('@ID_POSITION_BACKUP', 'INT') ID_POSITION
					, 1 AS KY_LEVEL_TYPE
					, 0 AS NO_TIME_HOLD_ON
					, @DT_SYSTEM
					, @PIN_KY_USER_APP
					, @PIN_NM_PROGRAM													 
				FROM @XML_BRANCH_PLANT_SELECTED.nodes('BRANCH_PLANT/QUALITY_PROCESS/POSITIONS_MBR/child::node()') msgs(msg)  ,PRD.K_PALLET KP
					INNER JOIN PRD.K_WORK_ORDER WO 
						ON WO.ID_WORK_ORDER = KP.ID_WORK_ORDER
				WHERE KP.ID_PALLET = @PIN_ID_PALLET  
					AND msgs.msg.value('@ID_POSITION_BACKUP', 'INT') <> 0

			END
			
			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

		END

		IF @PIN_TYPE_TRANSACTION = 'S' BEGIN --QUALITY INSPECTOR VERDICT  <--SECOND-->

			UPDATE  PRD.K_PALLET
			SET KY_STATUS = @PIN_KY_STATUS 
				, KY_FIRST_LEVEL_USER = @PIN_KY_FIRST_LEVEL_USER 
				, NM_FIRST_LEVEL_EMPLOYEE = @PIN_NM_FIRST_LEVEL_EMPLOYEE 
				, FG_FIRST_LEVEL_EMPLOYEE = ISNULL(@PIN_FG_FIRST_LEVEL_EMPLOYEE,0) 
				, FG_LEADMAN = ISNULL(@PIN_FG_LEADMAN,0) 
				, DT_FIRST_LEVEL_EMPLOYEE = @DT_SYSTEM 
				, DT_LEADMAN = @DT_SYSTEM
				, ID_SECOND_LEVEL_EMPLOYEE_REJECTION = @PIN_ID_SECOND_LEVEL_EMPLOYEE_REJECTION-- ,
				, DT_UPDATE =@DT_SYSTEM
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE ID_PALLET = @PIN_ID_PALLET

			IF @PIN_FG_FIRST_LEVEL_EMPLOYEE = 1 AND @PIN_FG_LEADMAN = 1 BEGIN

				UPDATE PRD.K_PALLET
				SET KY_STATUS = @PIN_KY_STATUS 
					, DT_FINAL_TIME = @DT_SYSTEM
					, DT_UPDATE = @DT_SYSTEM
					, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
					, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
				WHERE ID_PALLET = @PIN_ID_PALLET

			END ELSE BEGIN

				SELECT @NM_PRODUCTION_LINE = WO.NM_PRODUCTION_LINE, 
					@NM_LEADMAN = QA.NM_LEADMAN,
					@PIN_ID_BRANCH_PLANT = WO.ID_BRANCH_PLANT
				FROM PRD.K_QA27 QA 
					INNER JOIN PRD.K_WORK_ORDER WO 
						ON WO.ID_WORK_ORDER = QA.ID_WORK_ORDER
				WHERE QA.ID_QA27 =@PIN_ID_QA27 
					AND QA.ID_WORK_ORDER = @PIN_ID_WORK_ORDER

				INSERT INTO PRD.K_POSITION_SCALING (
					ID_PROBLEM_CODE
					, ID_FORM
					, ID_PALLET
					, KY_PROCESS_PALLET
					, ID_POSITION
					, KY_LEVEL_TYPE
					, NO_TIME_HOLD_ON
					, DT_CREATION
					, KY_USER_APP_CREATION
					, NM_PROGAM_CREATE
				)
				SELECT 
					NULL,
					NULL,
					@PIN_ID_PALLET,
					'MBR_RESOLUTION',
					d.value('@ID_POSITION', 'INT') AS ID_POSITION,
					d.value('@KY_LEVEL_TYPE', 'NVARCHAR(10)') AS KY_LEVEL_TYPE,
					d.value('@NO_TIME_HOLD_ON', 'INT') AS NO_TIME_HOLD_ON,
					@DT_SYSTEM,
					@PIN_KY_USER_APP,
					@PIN_NM_PROGRAM
				FROM @PIN_XML_POSITION_SCALING.nodes('POSITIONS/POSITION') AS T(d)
			END

			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

		END
		
		IF @PIN_TYPE_TRANSACTION = 'T' BEGIN --QUALITY INSPECTOR VERDICT  <--THIRD-->

			UPDATE PRD.K_PALLET 
			SET KY_STATUS = @PIN_KY_STATUS
				, KY_SECOND_LEVEL_USER_REJECTION = @PIN_KY_SECOND_LEVEL_USER_REJECTION 
				, NM_SECOND_LEVEL_EMPLOYEE_REJECTION = @PIN_NM_SECOND_LEVEL_EMPLOYEE_REJECTION 
				, FG_SECOND_LEVEL_EMPLOYEE_REJECTION = ISNULL(@PIN_FG_SECOND_LEVEL_EMPLOYEE_REJECTION,0) 
				, DT_SECOND_LEVEL_EMPLOYEE_REJECTION = @PIN_DT_SECOND_LEVEL_EMPLOYEE_REJECTION 
				, DT_FINAL_TIME = @DT_SYSTEM
				, DT_UPDATE =@DT_SYSTEM
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE ID_PALLET = @PIN_ID_PALLET

			UPDATE KIS
				SET KIS.KY_STATUS = @PIN_KY_STATUS
					,KIS.DT_UPDATE =@DT_SYSTEM
					,KIS.KY_USER_APP_UPDATE = @PIN_KY_USER_APP
					,KIS.NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
				FROM PRD.K_INSPECTION_SKID KIS
				JOIN PRD.K_PALLET KP ON KIS.NO_PALLET = KP.NO_PALLET AND KIS.ID_WORK_ORDER = KP.ID_WORK_ORDER
			   WHERE KP.ID_PALLET = @PIN_ID_PALLET 

			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

		END

		IF @PIN_TYPE_TRANSACTION = 'L' BEGIN

			UPDATE  PRD.K_PALLET
			SET KY_STATUS = @PIN_KY_STATUS 
				, KY_THIRD_LEVEL_USER_REJECTION = @PIN_KY_THIRD_LEVEL_USER_REJECTION 
				, ID_THIRD_LEVEL_EMPLOYEE_REJECTION = @PIN_ID_THIRD_LEVEL_EMPLOYEE_REJECTION 
				, NM_THIRD_LEVEL_EMPLOYEE_REJECTION = @PIN_NM_THIRD_LEVEL_EMPLOYEE_REJECTION 
				, FG_THIRD_LEVEL_EMPLOYEE_REJECTION = ISNULL(@PIN_FG_THIRD_LEVEL_EMPLOYEE_REJECTION,0) 
				, DT_THIRD_LEVEL_EMPLOYEE_REJECTION = @PIN_DT_THIRD_LEVEL_EMPLOYEE_REJECTION 
				, DT_UPDATE =@DT_SYSTEM
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE ID_PALLET = @PIN_ID_PALLET

			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

		END

		IF @PIN_TYPE_TRANSACTION = 'G' BEGIN
			-- WE UPDATE THE REGISTER ON THE TABLE

			IF @PIN_KY_STATUS = 'CANCELED' BEGIN

				SET @FG_SEND_FORM = (SELECT FG_SEND_FORM FROM PRD.K_PALLET KP WHERE ID_PALLET = @PIN_ID_PALLET)

				IF @FG_SEND_FORM = 1
					SET @PIN_KY_STATUS = 'WORKING'
				ELSE
					SET @PIN_KY_STATUS = 'NON_INSPECTED'
			END

			UPDATE PRD.K_PALLET 
			SET KY_STATUS = @PIN_KY_STATUS
				, DT_UPDATE =@DT_SYSTEM
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM
			WHERE ID_PALLET = @PIN_ID_PALLET

			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')

------------------------------------------------------------------------------------------------------------
		END

		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			COMMIT	
		END
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1) BEGIN
			ROLLBACK
		END
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,@ERROR_MESSAGE)--'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
			
	END CATCH
END

