-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2018
-- Author: Julio Tavares
-- CRETAE date: 28/08/2018
-- Description: CLOSE SHIFT AND CREATE NEW SHIFT WITHOUT USER ASSIGN
--- UPDATE automatically insert shift  by DELLC
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_CLOSE_AUTOMATICALLY_SHIFT] 
	  @XML_RESULT XML = '' OUT
	, @PIN_KY_USER_APP AS NVARCHAR(50)
	, @PIN_NM_PROGRAM AS NVARCHAR(50)
	, @PIN_TYPE_TRANSACTION CHAR(1) --I=INSERT   U=UPDATE

AS 
BEGIN	
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
		  , @DT_SYSTEM DATETIME = GETDATE()

	DECLARE @T_OLD_SHIFTS AS TABLE(
		 ID_SHIFT INT 
		,ID_C_SHIFT INT
		,ID_PRODUCTION_LINE INT 
		,ID_BRANCH_PLANT INT 
		,FG_STATUS BIT
		,DT_START_SHIFT DATETIME
		,DT_END_SHIFT DATETIME
		,DT_SHIFT_HISTORY DATETIME
		,NO_SHIFT_TIME INT
		,DT_START_SHIFT_NEW DATETIME
		,DT_END_SHIFT_NEW DATETIME
	)

	DECLARE @T_K_FORM AS TABLE(
		ID_K_FORM INT
	)

	DECLARE @T_NOTIFICATION_K_FORMS TABLE(
		ID_NOTIFICATION INT
		, ID_K_FORM	INT
	)

	DECLARE @T_ISSUES AS TABLE(
		ID_ISSUE INT,
		ID_PRODUCTION_LINE INT,
		ID_WORK_ORDER INT
	)

	DECLARE @T_NOTIFICATION_ISSUES TABLE(
		ID_NOTIFICATION INT 
	   ,ID_ISSUE INT
	   ,ID_PRODUCTION_LINE INT
	)

	
	BEGIN TRY
	--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
				--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END			

	--WE VERIFY IF THE STORED PROCEDURE IS GOING TO EXECUTE UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION = 'I' BEGIN

				----GET OLD SHIFTS 
			;WITH T_VW_SHIFT AS (
				SELECT --TOP 1 
					DT_INITIAL_SHIFT_TIME
					, DT_FINAL_SHIFT_TIME
					, NO_SHIFT_TIME
					, ID_BRANCH_PLANT
				FROM (
						SELECT ST.ID_SHIFT
								,ST.ID_SHIFT_TIME
								,KY_SHIFT
								,KY_SHIFT_TIME
								,NO_SHIFT_TIME
								,ID_BRANCH_PLANT
								,GETDATE() AS DT_NOW
								,CONVERT(DATETIME,((CONVERT(VARCHAR(10),GETDATE(),101)) +' '+ CONVERT(VARCHAR, ST.INITIAL_SHIFT_TIME, 108)),101) AS DT_INITIAL_SHIFT_TIME
								,DATEADD(HOUR, CAST(ST.NO_SHIFT_TIME AS INT) ,CONVERT(DATETIME,((CONVERT(VARCHAR(10),GETDATE(),101)) +' '+ CONVERT(VARCHAR, ST.INITIAL_SHIFT_TIME, 108) ),101)) AS DT_FINAL_SHIFT_TIME
						FROM ADM.VW_C_SHIFT_TIME ST
					) CS
				WHERE CS.DT_NOW BETWEEN CS.DT_INITIAL_SHIFT_TIME AND CS.DT_FINAL_SHIFT_TIME
				GROUP BY ID_BRANCH_PLANT, DT_INITIAL_SHIFT_TIME, DT_FINAL_SHIFT_TIME, NO_SHIFT_TIME
			)

			INSERT INTO @T_OLD_SHIFTS
			SELECT KS.ID_SHIFT
				, KS.ID_C_SHIFT
				, KS.ID_PRODUCTION_LINE
				, KS.ID_BRANCH_PLANT
				, KS.FG_STATUS
				, KS.DT_START_SHIFT
				, KS.DT_END_SHIFT
				, KS.DT_SHIFT_HISTORY
				, CAST(VS.NO_SHIFT_TIME AS INT)
				, VS.DT_INITIAL_SHIFT_TIME
				, VS.DT_FINAL_SHIFT_TIME
			FROM PRD.K_SHIFT KS
				INNER JOIN T_VW_SHIFT VS 
					ON KS.ID_BRANCH_PLANT = VS.ID_BRANCH_PLANT
			WHERE FG_STATUS = 1
				AND @DT_SYSTEM > KS.DT_END_SHIFT

			UPDATE KS
			SET FG_STATUS = 0,
				DT_UPDATE = @DT_SYSTEM,
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM 
			FROM PRD.K_SHIFT KS
				INNER JOIN @T_OLD_SHIFTS OS 
					ON KS.ID_SHIFT = OS.ID_SHIFT
 
		----CLOSE OLD QA27 
			UPDATE QA
			SET KY_STATUS = 'COMPLETE', 
				DT_FINAL_TIME = @DT_SYSTEM,
				DT_UPDATE = @DT_SYSTEM,
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM	
			FROM PRD.K_QA27 QA
				INNER JOIN @T_OLD_SHIFTS OS 
					ON OS.ID_SHIFT = QA.ID_SHIFT
					AND QA.KY_STATUS = 'RUNNING'

		---- **** GET ISSUE ID IF EXISTS FOR THAT PRODUCTION LINE WHEN CHANGE SHIFT
			INSERT INTO @T_ISSUES
			SELECT KI.ID_ISSUE, KI.ID_PRODUCTION_LINE, KI.ID_WORK_ORDER
			FROM PRD.K_ISSUE KI 
				INNER JOIN PRD.K_WORK_ORDER WO 
					ON WO.ID_WORK_ORDER = KI.ID_WORK_ORDER
				INNER JOIN PRD.K_QA27 QA 
					ON QA.ID_QA27 = KI.ID_QA27
				INNER JOIN PRD.K_SHIFT KS 
					ON QA.ID_SHIFT = KS.ID_SHIFT
				INNER JOIN @T_OLD_SHIFTS TS 
					ON KS.ID_SHIFT = TS.ID_SHIFT
			WHERE KI.KY_STATUS IN ('CHANGE_SHIFT', 'HOLD_ON', 'CREATED')
				AND WO.KY_STATUS = 'RUNNING'

	----GET NOTIFICATION ISSUES
			;WITH T_NOTIFICATIONS AS(
				SELECT NP.ID_NOTIFICATION
					, NP.KY_PROCESS_TYPE
					, (SELECT TOP 1  msgs.msg.value('@KY_VALUE', 'nvarchar(50)') TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/FORM/PARAMETERS/child::node()') msgs(msg) WHERE msgs.msg.value('@KY_PARAMETER' , 'nvarchar(max)') = 'ID_ISSUE') AS ID_ISSUE
					, (SELECT TOP 1  msgs.msg.value('@TO', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/RECIPIENTS/child::node()') msgs(msg)) AS USER_RECIPENT
					, (SELECT TOP 1  msgs.msg.value('@ID_PRODUCTION_LINE', 'nvarchar(50)')  TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/RECIPIENTS/child::node()') msgs(msg)) AS ID_PRODUCTION_LINE
				FROM PRD.K_NOTIFICATION_PROCESS NP
			), T_NOTIFICATIONS_ISSUE AS (
				SELECT  ROW_NUMBER() OVER(PARTITION BY ID_PRODUCTION_LINE ORDER BY ID_NOTIFICATION DESC ) NO_ROW
					, NOTI.ID_NOTIFICATION
					, CAST(NOTI.ID_ISSUE AS INT) AS ID_ISSUE
					, CAST(NOTI.ID_PRODUCTION_LINE AS INT) AS ID_PRODUCTION_LINE
				FROM T_NOTIFICATIONS NOTI
				WHERE NOTI.KY_PROCESS_TYPE =  'FORM'
					AND NOTI.ID_ISSUE IS NOT NULL 
			)

			INSERT INTO @T_NOTIFICATION_ISSUES 
			SELECT TI.ID_NOTIFICATION
				, TI.ID_ISSUE
				, TI.ID_PRODUCTION_LINE
			FROM T_NOTIFICATIONS_ISSUE  TI
				LEFT JOIN @T_ISSUES KI 
					ON TI.ID_ISSUE = KI.ID_ISSUE
			WHERE NO_ROW = 2
				OR KI.ID_ISSUE IS NOT NULL
				
		----CLOSE NOTIFICATION ISSUES 
	
			INSERT INTO PRD.K_NOTIFICATIONS_SENDED (
				KY_USER
				, KY_PROCESS_TYPE
				, KY_STATUS
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, NO_LEVEL
				, FG_ATTENDED
				, DT_CREATION
				, DT_UPDATE
				, KY_USER_APP_CREATION
				, KY_USER_APP_UPDATE
				, NM_PROGAM_CREATE
				, NM_PROGRAM_UPDATE
			)
			SELECT NP.KY_USER
				, NP.KY_PROCESS_TYPE
				, 'CANCELLED' --, KY_STATUS
				, NP.XML_PROCESS_CONFIGURATION
				, NP.NO_ATTEMPT_NUMBER
				, NP.DS_ERROR
				, NP.DT_NOTIFICATION
				, NP.DT_SENDED
				, NP.DT_WAITING
				, NP.DT_CLOSE
				, NP.ID_BRANCH_PLANT
				, NP.ID_NOTIFICATION_REFERENCE
				, NP.KY_NOTIFICATION_ORIGIN
				, NP.NO_LEVEL
				, NP.FG_ATTENDED
				, GETDATE()
				, NULL
				, @PIN_KY_USER_APP
				, NULL
				, @PIN_NM_PROGRAM
				, NULL
			FROM PRD.K_NOTIFICATION_PROCESS NP 
				INNER JOIN @T_NOTIFICATION_ISSUES KNI 
					ON NP.ID_NOTIFICATION = KNI.ID_NOTIFICATION
		
			DELETE NP
			FROM PRD.K_NOTIFICATION_PROCESS NP
				INNER JOIN @T_NOTIFICATION_ISSUES KNI
					ON NP.ID_NOTIFICATION = KNI.ID_NOTIFICATION

		----GET K_FORMS CREATED

			INSERT INTO @T_K_FORM
			SELECT KF.ID_K_FORM
			FROM PRD.K_FORM KF
			WHERE KF.KY_PROCESS_TYPE IN ('MANUFACTURE','PROCESS')
				AND KF.DT_CREATION < @DT_SYSTEM
				AND KF.KY_STATUS_FORM IN ('CREATED')

			----CANCELL FORMS
			UPDATE KF
			SET KY_STATUS_FORM = 'CANCELLED', 
				DT_CLOSED = @DT_SYSTEM,
				DT_UPDATE = @DT_SYSTEM,
				KY_USER_AUTHORIZED_CANCEL = 'System',
				NM_USER_AUTHORIZED_CANCEL = 'System' ,
				DS_EXPLANATION_CANCEL = 'Shift change',
				KY_USER_APP_UPDATE = @PIN_KY_USER_APP,
				NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM 
			FROM PRD.K_FORM KF
				INNER JOIN  @T_K_FORM FC 
					ON KF.ID_K_FORM = FC.ID_K_FORM

		----GET NOTIFICACTION FORMS
			INSERT INTO @T_NOTIFICATION_K_FORMS
			SELECT NOTI.ID_NOTIFICATION
				, CAST(NOTI.ID_K_FORM AS INT) ID_K_FORM
			FROM (
				SELECT NP.ID_NOTIFICATION
					, (SELECT TOP 1 msgs.msg.value('@KY_VALUE', 'nvarchar(50)') TO_USER FROM NP.XML_PROCESS_CONFIGURATION.nodes('NOTIFICATIONS/FORM/PARAMETERS/child::node()') msgs(msg)  WHERE msgs.msg.value('@KY_PARAMETER' , 'nvarchar(max)') = 'idKForm') AS ID_K_FORM
					, NP.XML_PROCESS_CONFIGURATION
				FROM PRD.K_NOTIFICATION_PROCESS NP
			) AS NOTI
			WHERE NOTI.ID_K_FORM IS NOT NULL
			ORDER BY 1 DESC

	----**** DELETE NOTIFICATION PROCESS AND INSERT NOTIFICATIONS SENDED FROM FORMS CANCELLED
	
			INSERT INTO PRD.K_NOTIFICATIONS_SENDED (
				KY_USER
				, KY_PROCESS_TYPE
				, KY_STATUS
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, NO_LEVEL
				, FG_ATTENDED
				, DT_CREATION
				, DT_UPDATE
				, KY_USER_APP_CREATION
				, KY_USER_APP_UPDATE
				, NM_PROGAM_CREATE
				, NM_PROGRAM_UPDATE
			)
			SELECT KY_USER
				, KY_PROCESS_TYPE
				, 'CANCELLED'
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, NO_LEVEL
				, FG_ATTENDED
				, GETDATE()
				, NULL
				, @PIN_KY_USER_APP
				, NULL
				, @PIN_NM_PROGRAM
				, NULL
			FROM PRD.K_NOTIFICATION_PROCESS NP 
				INNER JOIN @T_NOTIFICATION_K_FORMS KN 
					ON NP.ID_NOTIFICATION = KN.ID_NOTIFICATION
		
			DELETE NP
			FROM PRD.K_NOTIFICATION_PROCESS NP
				INNER JOIN @T_NOTIFICATION_K_FORMS KN 
					ON NP.ID_NOTIFICATION = KN.ID_NOTIFICATION

			DECLARE @NDATE DATETIME = GETDATE()
					, @PIN_ID_SHIFT_TIME AS INT
					, @PIN_ID_C_SHIFT AS INT = NULL
					, @PIN_KY_SHIFT AS NVARCHAR(20)
					, @PIN_KY_SHIFT_TIME AS NVARCHAR(20)

			IF DATEPART(HOUR, GETDATE()) >=12
				SET @NDATE =  DATEADD(HOUR, 12, CAST(CAST(GETDATE() AS DATE) AS DATETIME)) 
			ELSE
				SET @NDATE =  DATEADD(HOUR, 0, CAST(CAST(GETDATE() AS DATE) AS DATETIME)) 
			
			
			--SELECT @PIN_ID_SHIFT_TIME=ID_SHIFT_TIME,@PIN_ID_C_SHIFT= ID_SHIFT, @PIN_KY_SHIFT= KY_SHIFT,@PIN_KY_SHIFT_TIME=KY_SHIFT_TIME
			--FROM  [PlaskoliteQA].[ADM].[VW_C_SHIFT_TIME] WHERE KY_SHIFT_TIME = (SELECT 'SF-'+SHIFT_WORD FROM ADM.C_CALENDAR   WHERE CALENDAR_DATE =@NDATE )
	 
		 ---- ************* GENERATE NEW SHIFTS *********************
			INSERT INTO PRD.K_SHIFT (ID_C_SHIFT
					, KY_SHIFT
					, ID_SHIFT_TIME
					, KY_SHIFT_TIME,
					ID_PRODUCTION_LINE, ID_BRANCH_PLANT, FG_STATUS, DT_START_SHIFT, DT_END_SHIFT, DT_SHIFT_HISTORY, DT_CREATION, KY_USER_APP_CREATION, NM_PROGAM_CREATE)
			SELECT
				  VS.ID_SHIFT
				, VS.KY_SHIFT
				, VS.ID_SHIFT_TIME
				, VS.KY_SHIFT_TIME
				, KS.ID_PRODUCTION_LINE 
				, KS.ID_BRANCH_PLANT 
				, 1
				, DT_START_SHIFT_NEW  
				, DT_END_SHIFT_NEW 
				, @DT_SYSTEM
				, @DT_SYSTEM
				, @PIN_KY_USER_APP
				, @PIN_NM_PROGRAM
			FROM @T_OLD_SHIFTS KS
			INNER JOIN ADM.VW_C_SHIFT_TIME VS ON VS.KY_SHIFT_TIME = (SELECT 'SF-'+SHIFT_WORD FROM ADM.C_CALENDAR   WHERE CALENDAR_DATE =@NDATE ) AND KS.ID_BRANCH_PLANT = VS.ID_BRANCH_PLANT
				LEFT JOIN PRD.K_SHIFT SH 
					ON SH.FG_STATUS = 1 
					AND KS.ID_PRODUCTION_LINE = SH.ID_PRODUCTION_LINE
					AND KS.DT_START_SHIFT_NEW = SH.DT_START_SHIFT
					AND KS.ID_BRANCH_PLANT = SH.ID_BRANCH_PLANT
			WHERE SH.ID_SHIFT IS NULL

		----DELETE FROM @T_OLD_SHIFTS
			INSERT INTO PRD.K_QA27 (
				ID_WORK_ORDER
				, ID_SHIFT
				, KY_SHIFT
				, NO_ORDER
				, DT_INITIAL_TIME
				, KY_STATUS
				, DT_CREATION
				, KY_USER_APP_CREATION
				, NM_PROGAM_CREATE
			)
			SELECT WO.ID_WORK_ORDER --**ID_WORK_ORDER
				, SH.ID_SHIFT ----THIS WOULD BE ID_NEW SHIFT CREATED --ID_SHIFT
				, VS.KY_SHIFT
				, 0 --**NO ORDER
				, @DT_SYSTEM ----**DT_INITIAL_TIME
				,  'RUNNING' --** KY_STATYS
				, @DT_SYSTEM ----**DT_CREATION
				, @PIN_KY_USER_APP ---***KY_USER_APP_CREATION
				, @PIN_NM_PROGRAM ----**** NM_PROGRAM_CREATE
			FROM PRD.K_WORK_ORDER WO
				INNER JOIN PRD.K_SHIFT SH 
					ON WO.ID_PRODUCTION_LINE = SH.ID_PRODUCTION_LINE  ----THIS IS THE NEW SHIFTS CREATED
					INNER JOIN ADM.VW_C_SHIFT_TIME VS ON VS.KY_SHIFT_TIME = (SELECT 'SF-'+SHIFT_WORD FROM ADM.C_CALENDAR   WHERE CALENDAR_DATE =@NDATE ) AND SH.ID_BRANCH_PLANT = VS.ID_BRANCH_PLANT
				
			WHERE WO.KY_STATUS = 'RUNNING' 
				AND SH.FG_STATUS = 1
				AND NOT EXISTS (SELECT 1 FROM PRD.K_QA27 QA WHERE QA.KY_STATUS = 'RUNNING' AND QA.ID_WORK_ORDER = WO.ID_WORK_ORDER)

		----UPDATE ISSUE WITH NEW QA27
			UPDATE KI
			SET KI.ID_QA27 = QA.ID_QA27
			FROM PRD.K_ISSUE KI
				INNER JOIN @T_ISSUES TI 
					ON KI.ID_ISSUE = TI.ID_ISSUE
				INNER JOIN PRD.K_QA27 QA 
					ON QA.ID_WORK_ORDER = KI.ID_WORK_ORDER
			WHERE QA.KY_STATUS = 'RUNNING'

			-- THIS SECTION IS FOR PURGE THE OLDEST NOTIFICATIONS
			INSERT INTO PRD.K_NOTIFICATIONS_SENDED (
				KY_USER
				, KY_PROCESS_TYPE
				, KY_STATUS
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, NO_LEVEL
				, FG_ATTENDED
				, DT_CREATION
				, DT_UPDATE
				, KY_USER_APP_CREATION
				, KY_USER_APP_UPDATE
				, NM_PROGAM_CREATE
				, NM_PROGRAM_UPDATE
			)
			SELECT KY_USER
				, KY_PROCESS_TYPE
				, KY_STATUS
				, XML_PROCESS_CONFIGURATION
				, NO_ATTEMPT_NUMBER
				, DS_ERROR
				, DT_NOTIFICATION
				, DT_SENDED
				, DT_WAITING
				, DT_CLOSE
				, ID_BRANCH_PLANT
				, ID_NOTIFICATION_REFERENCE
				, KY_NOTIFICATION_ORIGIN
				, NO_LEVEL
				, FG_ATTENDED
				, GETDATE()
				, NULL
				, KY_USER_APP_CREATION
				, NULL
				, NM_PROGAM_CREATE
				, NULL
			FROM PRD.K_NOTIFICATION_PROCESS 
			WHERE DT_NOTIFICATION < CAST(DATEADD(DAY, -7, GETDATE()) AS DATE)
		
			DELETE PRD.K_NOTIFICATION_PROCESS WHERE DT_NOTIFICATION < CAST(DATEADD(DAY, -7, GETDATE()) AS DATE)
		
	
			-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
			SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
			SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')			

		END
		
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	

	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES(ERROR_NUMBER(), ERROR_MESSAGE())
		EXECUTE ADM.SPE_RAISE_ERROR

	END CATCH
END

