-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Javier Diaz Barron
-- CRETAE date: 21/04/2017
-- Description: Insert or update a scaling
-- UPDATE : JCTC - The elements of the query that inserts in K_SCALING are grouped and the maximum element of the position is obtained, this to guarantee inserting a single scaling.
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_INSERT_UPDATE_SCALING] 
	 @XML_RESULT XML = '' OUT     -- --0 TO ERROR AND 1 TO CORRECT
	,@ID_SCALING INT = NULL
	,@KY_STATUS NVARCHAR(10) = NULL
	,@PIN_ID_BRANCH_PLANT INT =NULL
	,@PIN_ID_ISSUE INT = NULL
	,@PIN_ID_FORM INT  = NULL
	,@PIN_ID_PALLET INT  = NULL
	,@PIN_KY_PROCESS_PALLET NVARCHAR(50)= NULL 
	,@PIN_ID_K_FORM INT = NULL
	,@KY_USER_APP_CREATION NVARCHAR(50) = NULL
	,@NM_PROGAM_CREATE NVARCHAR(50)  = NULL
	,@PIN_TYPE_TRANSACTION CHAR(1) --I=INSERT   U=UPDATE
	
AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE

	DECLARE @V_EXIST_TRAN BIT = 0
		, @DT_SYSTEM DATETIME = GETDATE()
		, @V_ID_FILE NVARCHAR(250) = NULL
		, @V_KY_ROOT NVARCHAR(200) = null
		, @V_EXISTS_FILE NVARCHAR(250) = NULL
		, @V_ERROR NVARCHAR(300) = NULL
		, @PIN_ID_FILESTREAM UNIQUEIDENTIFIER
		, @PIN_ID_PATH_LOCATOR hierarchyid
		--, @ID_SCALING int

		CREATE TABLE #V_FS_INSERTED_FILE  (
			STREAM_ID UNIQUEIDENTIFIER
		)

   	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION 
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1

		END	
		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION = 'I' BEGIN
	    
	    	DECLARE @ID_SCALING_PROCESS INT 
				,@ID_PROBLEM_CODE INT 

			DECLARE @TB_TIME_BY_LEVEL AS TABLE (
				ID_PALLET INT NULL
				, ID_PROBLEM_CODE INT NULL
				, ID_FORM INT NULL
				, KY_LEVEL_TYPE NVARCHAR(50)
				, NO_TIME_HOLD_ON INT
			)
		
			IF @PIN_ID_ISSUE IS NOT NULL BEGIN
			
				INSERT INTO PRD.K_SCALING_PROCESS(ID_ISSUE,ID_BRANCH_PLANT,DT_SCALING_PROCESS,DT_CREATION,KY_USER_APP_CREATION,NM_PROGAM_CREATE)
				SELECT ID_ISSUE
					, @PIN_ID_BRANCH_PLANT
					, @DT_SYSTEM
					, @DT_SYSTEM
					, KY_USER_APP_CREATION
					, NM_PROGAM_CREATE
				FROM PRD.K_ISSUE 
				WHERE ID_ISSUE = @PIN_ID_ISSUE
				
				SET @ID_SCALING_PROCESS = SCOPE_IDENTITY()
				
				SELECT @ID_PROBLEM_CODE = ID_PROBLEM_CODE 
				FROM PRD.K_ISSUE 
				WHERE ID_ISSUE = @PIN_ID_ISSUE
				
				INSERT INTO @TB_TIME_BY_LEVEL (
					ID_PROBLEM_CODE
					, KY_LEVEL_TYPE
					, NO_TIME_HOLD_ON
				)
				SELECT ID_PROBLEM_CODE
					, KY_LEVEL_TYPE
					, CASE WHEN KY_LEVEL_TYPE = 1 AND ID_PROBLEM_CODE IS NOT NULL THEN 0 
						ELSE NO_TIME_HOLD_ON 
					END NO_TIME_HOLD_ON
				FROM PRD.K_POSITION_SCALING 
				WHERE ID_PROBLEM_CODE = @ID_PROBLEM_CODE 
				GROUP BY KY_LEVEL_TYPE, NO_TIME_HOLD_ON, ID_PROBLEM_CODE
				
				INSERT INTO PRD.K_SCALING(
					ID_SCALING_PROCESS
					, NO_LEVEL
					, DT_START_SCALING
					, NO_TIME_HOLD_ON
					, KY_STATUS
					, DT_SCALING
					, DT_CREATION
					, ID_POSITION
					, KY_USER_APP_CREATION
					, NM_PROGAM_CREATE
				)
				SELECT SCALING.ID_SCALING_PROCESS,
					   SCALING.NO_LEVEL,
					   SCALING.DT_START_SCALING,
					   SCALING.NO_TIME_HOLD_ON,
					   SCALING.KY_STATUS,
					   SCALING.DT_SCALING,
					   SCALING.DT_CREATION,
					   MAX(SCALING.ID_POSITION),
					   --SCALING.ID_POSITION,
					   SCALING.KY_USER_APP_CREATION,
					   SCALING.NM_PROGAM_CREATE
				FROM (		
					SELECT			
				  		  @ID_SCALING_PROCESS AS ID_SCALING_PROCESS
						 , KPS.KY_LEVEL_TYPE AS NO_LEVEL
						 , DATEADD(mi,(SELECT SUM(NO_TIME_HOLD_ON) FROM @TB_TIME_BY_LEVEL WHERE ID_PROBLEM_CODE=KPS.ID_PROBLEM_CODE AND KY_LEVEL_TYPE <= KPS.KY_LEVEL_TYPE),@DT_SYSTEM) AS DT_START_SCALING
						 , (SELECT SUM(NO_TIME_HOLD_ON) FROM @TB_TIME_BY_LEVEL WHERE ID_PROBLEM_CODE=KPS.ID_PROBLEM_CODE AND KY_LEVEL_TYPE <= KPS.KY_LEVEL_TYPE) AS NO_TIME_HOLD_ON
						 , 'HOLD_ON' AS KY_STATUS
						 , @DT_SYSTEM AS DT_SCALING
						 , @DT_SYSTEM AS DT_CREATION
						 , KPS.ID_POSITION AS ID_POSITION
						 , KI.KY_USER_APP_CREATION AS KY_USER_APP_CREATION
						 , KI.NM_PROGAM_CREATE AS NM_PROGAM_CREATE
					FROM  PRD.K_ISSUE KI
						INNER JOIN PRD.C_PROBLEM_CODE CPC 
							ON CPC.ID_PROBLEM_CODE= KI.ID_PROBLEM_CODE
						INNER JOIN PRD.K_POSITION_SCALING KPS 
							ON KPS.ID_PROBLEM_CODE = CPC.ID_PROBLEM_CODE
					WHERE 
						KI.ID_ISSUE = @PIN_ID_ISSUE
					--AND CPC.ID_BRANCH_PLANT =@PIN_ID_BRANCH_PLANT
				)SCALING
				GROUP BY 
						SCALING.ID_SCALING_PROCESS,
					    SCALING.NO_LEVEL,
					    SCALING.DT_START_SCALING,
					    SCALING.NO_TIME_HOLD_ON,
					    SCALING.KY_STATUS,
					    SCALING.DT_SCALING,
					    SCALING.DT_CREATION,
					    -- SCALING.ID_POSITION,
 					    SCALING.KY_USER_APP_CREATION,
					    SCALING.NM_PROGAM_CREATE
				
				   
				SET @PIN_ID_FORM =0	
			
			END

			IF @PIN_ID_FORM IS NOT NULL BEGIN
			
				INSERT INTO PRD.K_SCALING_PROCESS (
					ID_FORM
					, ID_K_FORM
					, ID_BRANCH_PLANT
					, DT_SCALING_PROCESS
					, DT_CREATION
					, KY_USER_APP_CREATION
					, NM_PROGAM_CREATE
				)
				SELECT ID_FORM,@PIN_ID_K_FORM
					, @PIN_ID_BRANCH_PLANT
					, @DT_SYSTEM
					, @DT_SYSTEM
					, @KY_USER_APP_CREATION
					, @NM_PROGAM_CREATE
				FROM PRD.C_FORM WHERE ID_FORM = @PIN_ID_FORM
				
				SET @ID_SCALING_PROCESS = SCOPE_IDENTITY()
				
				INSERT INTO @TB_TIME_BY_LEVEL (
					ID_FORM
					, KY_LEVEL_TYPE
					, NO_TIME_HOLD_ON
				)
				SELECT ID_FORM
					, KY_LEVEL_TYPE
					, NO_TIME_HOLD_ON 
				FROM PRD.K_POSITION_SCALING 
				WHERE ID_FORM = @PIN_ID_FORM 
				GROUP BY KY_LEVEL_TYPE, NO_TIME_HOLD_ON, ID_FORM
				
				INSERT INTO PRD.K_SCALING(
					ID_SCALING_PROCESS
					, NO_LEVEL
					, DT_START_SCALING
					, NO_TIME_HOLD_ON
					, KY_STATUS
					, DT_SCALING
					, DT_CREATION
					, ID_POSITION
					, KY_USER_APP_CREATION
					, NM_PROGAM_CREATE
				)		
				SELECT @ID_SCALING_PROCESS			  
					 , KPS.KY_LEVEL_TYPE
					 , DATEADD(mi,(SELECT SUM(NO_TIME_HOLD_ON) FROM @TB_TIME_BY_LEVEL WHERE ID_FORM=KPS.ID_FORM AND KY_LEVEL_TYPE <= KPS.KY_LEVEL_TYPE),@DT_SYSTEM)
					 , (SELECT SUM(NO_TIME_HOLD_ON) FROM @TB_TIME_BY_LEVEL WHERE ID_FORM = KPS.ID_FORM AND KY_LEVEL_TYPE <= KPS.KY_LEVEL_TYPE)
					 , 'HOLD_ON'
					 , @DT_SYSTEM
					 , @DT_SYSTEM
					 , KPS.ID_POSITION
					 , @KY_USER_APP_CREATION
					 , @NM_PROGAM_CREATE
				FROM PRD.C_FORM CF 			
					INNER JOIN PRD.K_POSITION_SCALING KPS 
						ON KPS.ID_FORM = CF.ID_FORM
				WHERE CF.ID_FORM=@PIN_ID_FORM
					--AND CF.ID_BRANCH_PLANT =@PIN_ID_BRANCH_PLANT
			   
			END		

			----
			IF @PIN_ID_PALLET IS NOT NULL BEGIN
			
				INSERT INTO PRD.K_SCALING_PROCESS(
					ID_PALLET
					, ID_BRANCH_PLANT
					, DT_SCALING_PROCESS
					, DT_CREATION
					, KY_USER_APP_CREATION
					, NM_PROGAM_CREATE
				)
				SELECT ID_PALLET
					, @PIN_ID_BRANCH_PLANT
					, @DT_SYSTEM
					, @DT_SYSTEM
					, @KY_USER_APP_CREATION
					, @NM_PROGAM_CREATE
				FROM PRD.K_PALLET 
				WHERE ID_PALLET = @PIN_ID_PALLET
				
				SET @ID_SCALING_PROCESS = SCOPE_IDENTITY()
				
				print 'Id scalling proces: ' + cast(@ID_SCALING_PROCESS as nvarchar);

				INSERT INTO @TB_TIME_BY_LEVEL (
					ID_PALLET
					, KY_LEVEL_TYPE 
					, NO_TIME_HOLD_ON
				)
				SELECT ID_PALLET
					, KY_LEVEL_TYPE
					, NO_TIME_HOLD_ON 
				FROM PRD.K_POSITION_SCALING 
				WHERE ID_PALLET = @PIN_ID_PALLET 
				GROUP BY KY_LEVEL_TYPE, NO_TIME_HOLD_ON, ID_PALLET;

				
				INSERT INTO PRD.K_SCALING (
					ID_SCALING_PROCESS
					, NO_LEVEL
					, DT_START_SCALING
					, NO_TIME_HOLD_ON
					, KY_STATUS
					, DT_SCALING
					, DT_CREATION
					, ID_POSITION
					, KY_USER_APP_CREATION
					, NM_PROGAM_CREATE
				)		
				SELECT			
				  	  @ID_SCALING_PROCESS			  
					 , KPS.KY_LEVEL_TYPE
					 , DATEADD(mi,(SELECT SUM(NO_TIME_HOLD_ON) FROM @TB_TIME_BY_LEVEL WHERE ID_PALLET=KPS.ID_PALLET AND KY_LEVEL_TYPE <= KPS.KY_LEVEL_TYPE),@DT_SYSTEM)
					 , (SELECT SUM(NO_TIME_HOLD_ON) FROM @TB_TIME_BY_LEVEL WHERE ID_PALLET=KPS.ID_PALLET AND KY_LEVEL_TYPE <= KPS.KY_LEVEL_TYPE)
					 , 'HOLD_ON'
					 , @DT_SYSTEM
					 , @DT_SYSTEM
					 , KPS.ID_POSITION
					 , @KY_USER_APP_CREATION
					 , @NM_PROGAM_CREATE
				FROM PRD.K_POSITION_SCALING KPS 
					INNER JOIN PRD.K_PALLET KP  
						ON KPS.ID_PALLET = KP.ID_PALLET
					INNER JOIN PRD.K_WORK_ORDER WO 
						ON WO.ID_WORK_ORDER = KP.ID_WORK_ORDER
				WHERE KPS.ID_PALLET = @PIN_ID_PALLET
					AND WO.ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT
					AND KPS.KY_PROCESS_PALLET = @PIN_KY_PROCESS_PALLET;

				SET @ID_SCALING = SCOPE_IDENTITY();

				PRINT 'ID_SCALING: ' + CAST(@ID_SCALING as nvarchar);

			   PRINT 'TERMINA';
			END		
			-------------------

		END ELSE BEGIN	   												
			UPDATE PRD.K_SCALING 
			SET DT_SEND = CASE WHEN @KY_STATUS = 'SEND' THEN  @DT_SYSTEM ELSE NULL END
				, DT_SCALING = CASE WHEN @KY_STATUS = 'HOLD_ON' THEN  @DT_SYSTEM ELSE DT_SCALING END
				, KY_STATUS = @KY_STATUS
				, DT_UPDATE = @DT_SYSTEM
				, KY_USER_APP_UPDATE = @KY_USER_APP_CREATION
				, NM_PROGRAM_UPDATE = @NM_PROGAM_CREATE
			WHERE ID_SCALING = @ID_SCALING
			
	 	END
	
		IF @PIN_TYPE_TRANSACTION = 'D'
		BEGIN
			
			SET @ID_SCALING = (
				SELECT TOP 1 ID_SCALING 
				FROM PRD.K_SCALING KS 
					INNER JOIN PRD.K_SCALING_PROCESS KPS ON KS.ID_SCALING_PROCESS = KPS.ID_SCALING_PROCESS
				WHERE KPS.ID_ISSUE = @PIN_ID_ISSUE AND KS.KY_STATUS = 'HOLD_ON'
				ORDER BY KS.NO_LEVEL
			)

			UPDATE PRD.K_SCALING
				SET DT_START_SCALING = GETDATE(),
					DT_UPDATE = @DT_SYSTEM,
					KY_USER_APP_UPDATE = @KY_USER_APP_CREATION,
					NM_PROGRAM_UPDATE = @NM_PROGAM_CREATE
			WHERE ID_SCALING = @ID_SCALING

		END	
	
	 	
		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		--SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, CAST(@ID_SCALING AS NVARCHAR), 'ID_SCALING')

		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	

	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()			
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
			
	END CATCH
END

