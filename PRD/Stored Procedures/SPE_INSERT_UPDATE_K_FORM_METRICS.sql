-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Javier Díaz Barrón
-- CRETAE date: 26/04/2017
-- Description: Insert Form Metrics and insert notifications if have errors
-- =============================================
CREATE PROCEDURE    [PRD].[SPE_INSERT_UPDATE_K_FORM_METRICS] 
		  @XML_RESULT XML = '' OUT    -- --0 TO ERROR AND 1 TO CORRECT
		, @PIN_ID_K_FORM_METRICS 		INT =NULL
		, @PIN_ID_K_FORM				INT
	    , @PIN_ID_METRICS				INT = NULL
		, @PIN_XML_METRICS_VALUE		XML
		, @PIN_KY_USER_APP			NVARCHAR(50)
		, @PIN_NM_PROGRAM			NVARCHAR(50)
	  	, @PIN_TYPE_TRANSACTION CHAR(1)  --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE	

		DECLARE @V_EXIST_TRAN BIT = 0			

			IF (@@TRANCOUNT = 0) BEGIN
				insert into D_XML_DEBUG (XML_DEBUG, DT_CREATE) values (
					(
						SELECT @@TRANCOUNT AS '@TRANCOUNT' 
						, 'YES' AS '@FG_BEGIN_TRANSACTION'
						, @PIN_ID_K_FORM AS '@PIN_ID_K_FORM'
						, XACT_STATE() AS '@XACT_STATE'
						, OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID) AS '@PROCID'
						FOR XML PATH('ERROR')
					)
					, GETDATE())
			END

    	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
			IF (@@TRANCOUNT = 0) BEGIN
				--IN CASE THAT THE TRANSACTION HAVE NOT BEEN STARTED
				BEGIN TRANSACTION 
				--IT SETS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
				SET @V_EXIST_TRAN = 1

			END ELSE BEGIN
				insert into D_XML_DEBUG (XML_DEBUG, DT_CREATE) values (
					(
						SELECT @@TRANCOUNT AS '@TRANCOUNT' 
						, 'NO' AS '@FG_BEGIN_TRANSACTION'
						, XACT_STATE() AS '@XACT_STATE'
						, OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID) AS '@PROCID'
						FOR XML PATH('ERROR')
					)
					, GETDATE())
			END
						
		DECLARE 
			 @ID_WORK_ORDER INT
			,@ID_PALLET INT
			,@NO_WORK_ORDER  INT
			,@NM_PRODUCTION_LINE NVARCHAR(300)			
			,@MESSAGE_NOTIFICATION NVARCHAR(1000)
			,@MESSAGE_RETURN NVARCHAR(1000)
			,@XML_RECIPIENTS_USERS XML 
			,@KY_POSITION NVARCHAR(50) = NULL			
			,@ID_BRANCH_PLANT INT
			,@DT_SYSTEM DATETIME = GETDATE()			
		CREATE TABLE #TB_METRICS_VALUE  (FIELD_TYPE NVARCHAR(MAX),ID_METRICS NVARCHAR(MAX), NOMINAL_VALUE NVARCHAR(MAX), FINISHED_VALUE NVARCHAR(MAX), UPPER_LIMIT NVARCHAR(MAX), LOWER_LIMIT NVARCHAR(MAX), HYSTERESIS NVARCHAR(MAX),FG_VALIDATE_METRICS BIT)
		CREATE TABLE #TB_K_FORM_METRICS (ID_METRICS INT ,SETTINGS XML)
		DECLARE @XML_NOTIFICATION_FORM XML = N'<NOTIFICATIONS> <RECIPIENTS>  </RECIPIENTS>   </NOTIFICATIONS>'
		CREATE TABLE #TB_NOTIFICATIONS (KY_PROCESS_TYPE NVARCHAR (10),XML_MESSAGE XML ,XML_FINAL XML)



		DECLARE 
			  @NM_FORM VARCHAR (7)
			, @DS_BODY VARCHAR (76)
			, @DS_TITLE VARCHAR (21)
			, @DS_SUBJECT VARCHAR (21)
			, @NM_URL VARCHAR (1)
			, @NM_URL_PARAMETERS VARCHAR (1)
			, @NO_WIDTH NVARCHAR (10)
			, @NO_HEIGHT NVARCHAR (10)
			, @FG_EMAIL VARCHAR (5)
			, @FG_TELEGRAM VARCHAR (5)
			, @FG_ALERT VARCHAR (5)
			, @FG_FORM VARCHAR (5)


			SELECT
			     @NM_FORM= NM_FORM
			   , @DS_BODY= DS_BODY
			   , @DS_TITLE= DS_TITLE
			   , @DS_SUBJECT= DS_SUBJECT
			   , @NM_URL= NM_URL
			   , @NM_URL_PARAMETERS= NM_URL_PARAMETERS
			   , @NO_WIDTH= NO_WIDTH
			   , @NO_HEIGHT= NO_HEIGHT
			   , @FG_EMAIL= FG_EMAIL
			   , @FG_TELEGRAM= FG_TELEGRAM
			   , @FG_ALERT= FG_ALERT
			   , @FG_FORM	= FG_FORM	
			FROM PRD.VW_C_PROCESS_NOTIFICATION 
			WHERE KY_PROCESS = 'FORM_ERROR'						
	--		DECLARE @V_FS_INSERTED_FILE TABLE (
	--			STREAM_ID UNIQUEIDENTIFIER
	--		)
	--	--** GET DATA OF WORK ORDERS
			SELECT 
				 @ID_WORK_ORDER = KF.ID_WORK_ORDER
				,@ID_PALLET = KF.ID_PALLET
		 		,@NO_WORK_ORDER =WO.NO_WORK_ORDER					 						 	
		 		,@NM_PRODUCTION_LINE = CASE WHEN PL.NM_PRODUCTION_LINE IS NULL THEN WO.NM_PRODUCTION_LINE ELSE PL.NM_PRODUCTION_LINE END
		 		,@ID_BRANCH_PLANT =KF.ID_BRANCH_PLANT
			 FROM PRD.K_FORM KF
				 LEFT JOIN PRD.K_WORK_ORDER WO 
					ON WO.ID_WORK_ORDER = KF.ID_WORK_ORDER
				 LEFT JOIN PRD.C_PRODUCTION_LINE PL 
					ON PL.ID_PRODUCTION_LINE =KF.ID_PRODUCTION_LINE
			 WHERE ID_K_FORM = @PIN_ID_K_FORM

		IF @PIN_TYPE_TRANSACTION = 'I' BEGIN

			INSERT INTO #TB_K_FORM_METRICS
			SELECT CAST(NODE.M.value('@ID_METRICS', 'nvarchar(max)') AS INT)  ID_METRICS
				,NODES.M.query('.') SETTINGS
			FROM @PIN_XML_METRICS_VALUE.nodes('METRICS/SETTINGS/FIELD_TYPES') NODE(M)					  
				,@PIN_XML_METRICS_VALUE.nodes('METRICS/SETTINGS') NODES(M)					  					  
			WHERE CAST(NODES.M.value('@ID_METRICS', 'nvarchar(max)') AS INT)=CAST(NODE.M.value('@ID_METRICS', 'nvarchar(max)') AS INT)
			
			UPDATE #TB_K_FORM_METRICS 
			SET SETTINGS.modify('delete (/SETTINGS/@ID_METRICS)[1]')
				
			UPDATE #TB_K_FORM_METRICS
			SET SETTINGS.modify('delete (/SETTINGS/FIELD_TYPES/@ID_METRICS)[1]')												
						
			INSERT INTO PRD.K_FORM_METRICS (
				ID_K_FORM
				, ID_METRICS
				, XML_METRICS_VALUE
				, DT_CREATION
				, KY_USER_APP_CREATION
				, NM_PROGAM_CREATE
			)																							
			SELECT
				 @PIN_ID_K_FORM
				, ID_METRICS 
				, SETTINGS
				, GETDATE()
				, @PIN_KY_USER_APP
				, @PIN_NM_PROGRAM
			FROM #TB_K_FORM_METRICS					
			
			----** UPDATE DT_CLOSED FORM			
			UPDATE PRD.K_FORM 
			SET DT_CLOSED = GETDATE()
				, KY_STATUS_FORM = 'CAPTURED' 
			WHERE ID_K_FORM = @PIN_ID_K_FORM	 					 					 				
			----** UPDATE READINGS

			IF @ID_PALLET IS NOT NULL BEGIN
				UPDATE PRD.K_READINGS 
				SET KY_STATUS = 'READ' 
					, ID_K_FORM = @PIN_ID_K_FORM 
				WHERE ID_PALLET = @ID_PALLET
			END

			IF @ID_WORK_ORDER IS NOT NULL AND @ID_PALLET IS NULL BEGIN
				UPDATE PRD.K_READINGS 
				SET KY_STATUS = 'READ'
					,ID_K_FORM = @PIN_ID_K_FORM 
				WHERE ID_WORK_ORDER = @ID_WORK_ORDER
			END

			INSERT INTO #TB_METRICS_VALUE
			SELECT msgs.msg.value('@FIELD_TYPE', 'nvarchar(max)') FIELD_TYPE					 	
				, msgs.msg.value('@ID_METRICS', 'nvarchar(max)') ID_METRICS					 	
				, msgs.msg.value('@NOMINAL_VALUE', 'nvarchar(max)') NOMINAL_VALUE
				, msgs.msg.value('@FINISHED_VALUE', 'nvarchar(max)') FINISHED_VALUE
				, msgs.msg.value('@UPPER_LIMIT', 'nvarchar(max)') UPPER_LIMIT
				, msgs.msg.value('@LOWER_LIMIT', 'nvarchar(max)') LOWER_LIMIT		 	
				, msgs.msg.value('@HYSTERESIS', 'nvarchar(max)') HYSTERESIS 
				, CFM.FG_VALIDATE_METRICS		 	
			FROM @PIN_XML_METRICS_VALUE.nodes('METRICS/SETTINGS/FIELD_TYPES') msgs(msg)	
				INNER JOIN PRD.C_FORM_METRICS CFM 
					ON CFM.ID_METRICS = CAST(msgs.msg.value('@ID_METRICS', 'nvarchar(max)') AS INT)
			  				 
			IF EXISTS (SELECT TOP 1 1 FROM #TB_METRICS_VALUE WHERE FG_VALIDATE_METRICS = 1) BEGIN  
				DECLARE @NO_ERRORS INT
				SELECT @NO_ERRORS = COUNT(1) FROM #TB_METRICS_VALUE MV WHERE LTRIM(NOMINAL_VALUE) != LTRIM(FINISHED_VALUE)
				
				IF EXISTS (SELECT TOP 1 1 FROM #TB_METRICS_VALUE WHERE FG_VALIDATE_METRICS = 1 AND FIELD_TYPE = 'NUMERICBOX') BEGIN

					DECLARE @TB_DECIMAL_VALUES TABLE (
						FINISHED_VALUE NUMERIC(13,2)
						, UPPER_LIMIT NUMERIC(13,2)
						, LOWER_LIMIT NUMERIC(13,2)
					)

					INSERT INTO @TB_DECIMAL_VALUES
					SELECT CAST(LTRIM(isnull(NULLIF(FINISHED_VALUE,''),'0')) AS NUMERIC(13,2)) FINISHED_VALUE,
						CAST(LTRIM(isnull(NULLIF(UPPER_LIMIT, ''),'0')) AS NUMERIC(13,2)) UPPER_LIMIT,
						CAST(LTRIM(isnull(NULLIF(LOWER_LIMIT, ''),'0')) AS NUMERIC(13,2)) LOWER_LIMIT
						FROM #TB_METRICS_VALUE MV WHERE FG_VALIDATE_METRICS =1 AND FIELD_TYPE = 'NUMERICBOX' 
					
					SELECT @NO_ERRORS=COUNT(1) FROM @TB_DECIMAL_VALUES WHERE FINISHED_VALUE > UPPER_LIMIT OR FINISHED_VALUE < LOWER_LIMIT
				END	

				IF @NO_ERRORS > 0 BEGIN				
					SELECT @MESSAGE_RETURN = DS_BODY FROM PRD.VW_C_PROCESS_NOTIFICATION WHERE KY_PROCESS ='FORM_ERROR_RETURN'						
				
					-- *** GET RECIPIENTS XML
					SELECT @XML_RECIPIENTS_USERS = (
						SELECT
							CU.KY_USER  AS "@TO"
							,'SEND'  AS "@STATUS"
							,'0' AS "@ATTEMPT_NUMBER"
							,'' AS "@ERROR"
						FROM ADM.C_POSITION CP
							INNER JOIN ADM.C_EMPLOYEE CE 
								ON CE.ID_POSITION = CP.ID_POSITION
							INNER JOIN ADM.C_USER CU 
								ON CU.ID_EMPLOYEE = CE.ID_EMPLOYEE
						WHERE CP.KY_POSITION = @KY_POSITION
						FOR XML PATH ('RECIPIENT')
					)
					
			   		INSERT INTO #TB_NOTIFICATIONS
					SELECT
						'EMAIL' KY_PROCESS_TYPE
						, CAST(CASE 
							WHEN @FG_EMAIL = '1' THEN (SELECT @MESSAGE_NOTIFICATION AS "@BODY",@DS_SUBJECT AS "@SUBJECT" FOR XML PATH ('MESSAGE'))					
						END AS XML) XML_MESSAGE
						, @XML_NOTIFICATION_FORM XML_FINAL UNION ALL
					SELECT
					   'TELEGRAM' KY_PROCESS_TYPE,CAST(CASE 
							WHEN @FG_TELEGRAM = '1' THEN  (SELECT @MESSAGE_NOTIFICATION AS "@BODY" FOR XML PATH ('MESSAGE'))
						END AS XML)	 ,@XML_NOTIFICATION_FORM UNION ALL
					SELECT
						'ALERT' KY_PROCESS_TYPE,CAST(CASE 
							WHEN @FG_ALERT = '1' THEN  (SELECT @NM_FORM  "@NAME", @MESSAGE_NOTIFICATION AS "@BODY",@DS_TITLE "@TITLE",@NO_WIDTH "@WIDTH", @NO_HEIGHT "@HEIGHT", 'WARNING' "@TYPE"  FOR XML PATH ('MESSAGE'))
						END AS XML)	,@XML_NOTIFICATION_FORM UNION ALL
					SELECT
						'FORM' KY_PROCESS_TYPE,CAST(CASE 
							WHEN @FG_FORM = '1' THEN  (SELECT @NM_FORM  "@NAME", @NM_URL "@URL", @NM_URL_PARAMETERS "@URL_PARAMETERS", @NO_WIDTH "@WIDTH", @NO_HEIGHT "@HEIGHT", 'WARNING' "@TYPE"  FOR XML PATH ('FORM'))
						END AS XML)	,@XML_NOTIFICATION_FORM
						
										
					INSERT INTO PRD.K_NOTIFICATION_PROCESS(KY_USER,KY_PROCESS_TYPE,KY_STATUS,XML_PROCESS_CONFIGURATION,NO_ATTEMPT_NUMBER,DS_ERROR,DT_NOTIFICATION,DT_SENDED,ID_BRANCH_PLANT,ID_NOTIFICATION_REFERENCE,KY_NOTIFICATION_ORIGIN,DT_CREATION,KY_USER_APP_CREATION,NM_PROGAM_CREATE)
						SELECT * FROM (
							SELECT 
								 '' KY_USER
								 ,KY_PROCESS_TYPE
								 ,'SEND' STATUS
								,CAST('<NOTIFICATION>'  +  CAST(XML_MESSAGE AS NVARCHAR(1000)) + '<RECIPIENTS>' + CAST( @XML_RECIPIENTS_USERS AS NVARCHAR(1000)) + '</RECIPIENTS>' + '</NOTIFICATION>' AS XML) XML_NOTIFICATION
								,0 NO_ERROR
								,'' DS_ERROR ,GETDATE() DT_NOTIFICATION,GETDATE() DT_SENDED,@ID_BRANCH_PLANT ID_BRANCH_PLANT,@PIN_ID_K_FORM ID_REFERENCE, 'FORM' KY_ORIGIN_NOTIFICATION,GETDATE() DT_CREATION,@PIN_KY_USER_APP KY_USER_APP,@PIN_NM_PROGRAM NM_PROGRAM
							FROM #TB_NOTIFICATIONS WHERE XML_MESSAGE IS NOT NULL			
						)AS A
					WHERE XML_NOTIFICATION IS NOT NULL
				END	
			END					  		    						
		END ELSE BEGIN
		
			UPDATE PRD.K_FORM_METRICS 
				SET @PIN_ID_K_FORM=CASE WHEN @PIN_ID_K_FORM IS NULL THEN ID_K_FORM ELSE @PIN_ID_K_FORM END
					, @PIN_ID_METRICS=CASE WHEN @PIN_ID_METRICS IS NULL THEN ID_METRICS ELSE @PIN_ID_METRICS END
					, @PIN_XML_METRICS_VALUE=CASE WHEN @PIN_XML_METRICS_VALUE IS NULL THEN XML_METRICS_VALUE ELSE @PIN_XML_METRICS_VALUE END					
					, DT_UPDATE = GETDATE()
					, KY_USER_APP_UPDATE=@PIN_KY_USER_APP
					, NM_PROGRAM_UPDATE=@PIN_NM_PROGRAM
			WHERE ID_K_FORM_METRICS=@PIN_ID_K_FORM_METRICS
			
	 	END
	--	-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, CASE WHEN @MESSAGE_RETURN IS NULL THEN 'Proceso exitoso' ELSE @MESSAGE_RETURN END, 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, CASE WHEN @MESSAGE_RETURN IS NULL THEN 'Successful Process' ELSE @MESSAGE_RETURN END, 'EN')			
	--	-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT			
	 
	END TRY
	BEGIN CATCH		
	--	--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  =ERROR_MESSAGE()						
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
			
	END CATCH
END

