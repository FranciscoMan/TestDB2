CREATE TABLE [ADM].[C_EMPLOYEE] (
    [ID_EMPLOYEE]          INT            IDENTITY (1, 1) NOT NULL,
    [KY_EMPLOYEE]          NVARCHAR (50)  NOT NULL,
    [NM_FIRST_NAME]        NVARCHAR (300) NOT NULL,
    [NM_LAST_NAME]         NVARCHAR (500) NOT NULL,
    [KY_EMAIL]             NVARCHAR (500) NULL,
    [ID_BRANCH_PLANT]      INT            NULL,
    [ID_POSITION]          INT            NOT NULL,
    [FG_ACTIVE]            BIT            CONSTRAINT [DF_C_EMPLOYEE_FG_ACTIVE] DEFAULT ((1)) NOT NULL,
    [XML_PHONE]            XML            NULL,
    [DT_CREATION]          DATETIME       NOT NULL,
    [DT_UPDATE]            DATETIME       NULL,
    [KY_USER_APP_CREATION] NVARCHAR (50)  NOT NULL,
    [KY_USER_APP_UPDATE]   NVARCHAR (50)  NULL,
    [NM_PROGAM_CREATE]     NVARCHAR (50)  NOT NULL,
    [NM_PROGRAM_UPDATE]    NVARCHAR (50)  NULL,
    CONSTRAINT [PK_C_EMPLOYEE] PRIMARY KEY CLUSTERED ([ID_EMPLOYEE] ASC),
    CONSTRAINT [FK_C_EMPLOYEE_C_POSITION] FOREIGN KEY ([ID_POSITION]) REFERENCES [ADM].[C_POSITION] ([ID_POSITION])
);


GO
CREATE TRIGGER [ADM].[TR_CUD_EMPLOYEE] ON  [ADM].[C_EMPLOYEE] AFTER INSERT,UPDATE,DELETE
AS 
BEGIN

DECLARE @XML_CATALOG AS XML,
		@XML_VALUES AS XML,
		@XML_REFERENCE AS XML,
		@KY_CATALOG AS NVARCHAR(100) = 'EMPLOYEE',
		@DS_MESSAGE AS NVARCHAR(100),
		@KY_ACTION NVARCHAR(10),
		@KY_ACTION_INSERT NVARCHAR(10) = 'INSERT',
		@KY_ACTION_UPDATE NVARCHAR(10) = 'UPDATE',
		@KY_ACTION_DELETE NVARCHAR(10) = 'DELETE',
		@NO_AFFECTED_RECORDS INT = 0,
		@KY_USER NVARCHAR(50),
		@NM_PROGRAM NVARCHAR(50),
		@DT_AFFECTED DATETIME
BEGIN TRY

	SET @KY_ACTION = (
		SELECT CASE 
			WHEN EXISTS(SELECT TOP 1 1 FROM inserted) AND EXISTS(SELECT TOP 1 1 FROM deleted) THEN @KY_ACTION_UPDATE --IF SO, THEN UPDATE
			WHEN EXISTS(SELECT TOP 1 1 FROM inserted) THEN @KY_ACTION_INSERT
			WHEN EXISTS(SELECT TOP 1 1 FROM deleted) THEN @KY_ACTION_DELETE
		END
	)

	------------------------------------------------ UPDATE
	IF @KY_ACTION = @KY_ACTION_UPDATE BEGIN


		SET @XML_VALUES = (
			SELECT 
				  I.ID_EMPLOYEE AS "@ID_EMPLOYEE" 
				, I.KY_EMPLOYEE AS "@KY_EMPLOYEE_NEW"
				, I.NM_FIRST_NAME AS "@NM_FIRST_NAME_NEW"
				, I.NM_LAST_NAME AS "@NM_LAST_NAME_NEW"
				, I.KY_EMAIL AS "@KY_EMAIL_NEW"
				, I.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_NEW"
				, I.ID_POSITION AS "@ID_POSITION_NEW"
				--, I.ID_DEPARTMENT AS "@ID_DEPARTMENT_NEW"
				, D.KY_EMPLOYEE AS "@KY_EMPLOYEE_OLD"
				, D.NM_FIRST_NAME AS "@NM_FIRST_NAME_OLD"
				, D.NM_LAST_NAME AS "@NM_LAST_NAME_OLD"
				, D.KY_EMAIL AS "@KY_EMAIL_OLD"
				, D.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_OLD"
				, D.ID_POSITION AS "@ID_POSITION_OLD"
				--, D.ID_DEPARTMENT AS "@ID_DEPARTMENT_OLD" 
				FROM inserted I
					INNER JOIN deleted D
						ON I.ID_EMPLOYEE = D.ID_EMPLOYEE
			FOR XML PATH ('UPDATED')
		)

		SELECT @NO_AFFECTED_RECORDS = COUNT(*) FROM inserted
		SELECT TOP 1 @DS_MESSAGE = 'The employee ' + NM_FIRST_NAME + ', with id ' + CONVERT( NVARCHAR(10),ID_EMPLOYEE) + ' has been updated correctly' 
			, @KY_USER = KY_USER_APP_UPDATE
			, @NM_PROGRAM = NM_PROGRAM_UPDATE
			, @DT_AFFECTED = DT_UPDATE
		FROM inserted

		IF @NO_AFFECTED_RECORDS > 1
			SET @DS_MESSAGE = CONVERT(NVARCHAR(10), @NO_AFFECTED_RECORDS) + ' employees has been updated correctly'

	END

	-------------------------------------------------- INSERT
	IF @KY_ACTION = @KY_ACTION_INSERT BEGIN
		SET @XML_VALUES = (
			SELECT 
				  I.ID_EMPLOYEE AS "@ID_EMPLOYEE" 
				, I.KY_EMPLOYEE AS "@KY_EMPLOYEE_NEW"
				, I.NM_FIRST_NAME AS "@NM_FIRST_NAME_NEW"
				, I.NM_LAST_NAME AS "@NM_LAST_NAME_NEW"
				, I.KY_EMAIL AS "@KY_EMAIL_NEW"
				, I.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_NEW"
				, I.ID_POSITION AS "@ID_POSITION_NEW"
				--, I.ID_DEPARTMENT AS "@ID_DEPARTMENT_NEW"
				FROM inserted i
			FOR XML PATH ('INSERTED')
		)
		
		SELECT @NO_AFFECTED_RECORDS = COUNT(*) FROM inserted
		SELECT TOP 1 @DS_MESSAGE = 'The employee ' + NM_FIRST_NAME + ', with id ' + CONVERT( NVARCHAR(10),ID_EMPLOYEE) + ' has been inserted correctly' 
			, @KY_USER = KY_USER_APP_CREATION
			, @NM_PROGRAM = NM_PROGAM_CREATE
			, @DT_AFFECTED = DT_CREATION
		FROM inserted

		IF @NO_AFFECTED_RECORDS > 1
			SET @DS_MESSAGE = CONVERT(NVARCHAR(10), @NO_AFFECTED_RECORDS) + ' employees has been inserted correctly'
	END

	------------------------------------------------ DELETE
	IF @KY_ACTION = @KY_ACTION_DELETE BEGIN
		SET @XML_VALUES = (
			SELECT 
				  D.ID_EMPLOYEE AS "@ID_EMPLOYEE" 
				, D.KY_EMPLOYEE AS "@KY_EMPLOYEE_OLD"
				, D.NM_FIRST_NAME AS "@NM_FIRST_NAME_OLD"
				, D.NM_LAST_NAME AS "@NM_LAST_NAME_OLD"
				, D.KY_EMAIL AS "@KY_EMAIL_OLD"
				, D.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_OLD"
				, D.ID_POSITION AS "@ID_POSITION_OLD"
				--, D.ID_DEPARTMENT AS "@ID_DEPARTMENT_OLD"
				FROM deleted D
			FOR XML PATH ('DELETED')
		)
		
		SELECT @NO_AFFECTED_RECORDS = COUNT(*) FROM deleted
		SELECT TOP 1 @DS_MESSAGE = 'The employee ' + NM_FIRST_NAME + ', with id ' + CONVERT( NVARCHAR(10),ID_EMPLOYEE) + ' has been deleted correctly' 
			, @KY_USER = KY_USER_APP_CREATION
			, @NM_PROGRAM = NM_PROGAM_CREATE
			, @DT_AFFECTED = GETDATE()
		FROM deleted

		IF @NO_AFFECTED_RECORDS > 1
			SET @DS_MESSAGE = CONVERT(NVARCHAR(10), @NO_AFFECTED_RECORDS) + ' employees has been deleted correctly'
	END

	SET @XML_CATALOG = (
		SELECT  
			@KY_CATALOG AS "@CATALOG" 
			, @XML_VALUES
		FOR XML PATH ('CATALOG')
	)
	
	SET @XML_REFERENCE = (
		SELECT  
			@XML_CATALOG
		FOR XML PATH ('REFERENCE')
	)


	INSERT INTO [PRD].[K_LOG]([DS_LOG],[XML_REFERENCE],DT_CREATION,KY_USER_APP_CREATION,NM_PROGAM_CREATE)
	SELECT @DS_MESSAGE, @XML_REFERENCE, @DT_AFFECTED, @KY_USER, @NM_PROGRAM;

END TRY
BEGIN CATCH  
	ROLLBACK;  
END CATCH; 
	
END