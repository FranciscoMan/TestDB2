CREATE TABLE [ADM].[C_USER] (
    [KY_USER]              NVARCHAR (50)  NOT NULL,
    [NM_USER]              NVARCHAR (300) NOT NULL,
    [KY_EMAIL]             NVARCHAR (500) NOT NULL,
    [NM_PASSWORD]          NVARCHAR (100) NOT NULL,
    [DT_CHANGE_PASSWORD]   DATETIME       NULL,
    [KY_CHANGE_PASSWORD]   NVARCHAR (100) NULL,
    [FG_CHANGE_PASSWORD]   BIT            CONSTRAINT [DF_C_USER_FG_CHANGE_PASSWORD] DEFAULT ((0)) NOT NULL,
    [ID_ROLE]              INT            NOT NULL,
    [ID_EMPLOYEE]          INT            NULL,
    [FG_ACTIVE]            BIT            CONSTRAINT [DF_C_USER_FG_ACTIVE] DEFAULT ((1)) NOT NULL,
    [ID_BRANCH_PLANT]      INT            NULL,
    [DT_INACTIVE]          DATETIME       NULL,
    [DT_CREATION]          DATETIME       NOT NULL,
    [DT_UPDATE]            DATETIME       NULL,
    [KY_USER_APP_CREATION] NVARCHAR (50)  NOT NULL,
    [KY_USER_APP_UPDATE]   NVARCHAR (50)  NULL,
    [NM_PROGAM_CREATE]     NVARCHAR (50)  NOT NULL,
    [NM_PROGRAM_UPDATE]    NVARCHAR (50)  NULL,
    CONSTRAINT [PK_C_USER] PRIMARY KEY CLUSTERED ([KY_USER] ASC),
    CONSTRAINT [FK_C_USER_C_BRANCH_PLANT] FOREIGN KEY ([ID_BRANCH_PLANT]) REFERENCES [ADM].[C_BRANCH_PLANT] ([ID_BRANCH_PLANT]),
    CONSTRAINT [FK_C_USER_C_EMPLOYEE] FOREIGN KEY ([ID_EMPLOYEE]) REFERENCES [ADM].[C_EMPLOYEE] ([ID_EMPLOYEE]),
    CONSTRAINT [FK_C_USER_C_ROLE] FOREIGN KEY ([ID_ROLE]) REFERENCES [ADM].[C_ROLE] ([ID_ROLE])
);


GO
CREATE TRIGGER  [ADM].[TR_CUD_USER] ON  [ADM].[C_USER] AFTER INSERT,UPDATE,DELETE
AS 
BEGIN

--DECLARE @XML_CATALOG AS XML,
--		@XML_VALUES AS XML,
--		@XML_REFERENCE AS XML,
--		@KY_CATALOG AS NVARCHAR(100) = 'USER',
--		@DS_MESSAGE AS NVARCHAR(100),
--		@KY_ACTION NVARCHAR(10),
--		@KY_ACTION_INSERT NVARCHAR(10) = 'INSERT',
--		@KY_ACTION_UPDATE NVARCHAR(10) = 'UPDATE',
--		@KY_ACTION_DELETE NVARCHAR(10) = 'DELETE',
--		@NO_AFFECTED_RECORDS INT = 0,
--		@KY_USER NVARCHAR(50),
--		@NM_PROGRAM NVARCHAR(50),
--		@DT_AFFECTED DATETIME
BEGIN TRY

--	SET @KY_ACTION = (
--		SELECT CASE 
--			WHEN EXISTS(SELECT TOP 1 1 FROM inserted) AND EXISTS(SELECT TOP 1 1 FROM deleted) THEN @KY_ACTION_UPDATE --IF SO, THEN UPDATE
--			WHEN EXISTS(SELECT TOP 1 1 FROM inserted) THEN @KY_ACTION_INSERT
--			WHEN EXISTS(SELECT TOP 1 1 FROM deleted) THEN @KY_ACTION_DELETE
--		END
--	)

--	------------------------------------------------ UPDATE
--	IF @KY_ACTION = @KY_ACTION_UPDATE BEGIN

--		SET @XML_VALUES = (
--			SELECT 
--				  I.KY_USER AS "@KY_USER" 
--				, I.NM_USER AS "@NM_USER_NEW"
--				, I.KY_EMAIL AS "@KY_EMAIL_NEW"
--				, I.NM_PASSWORD AS "@NM_PASSWORD_NEW"
--				, I.DT_CHANGE_PASSWORD AS "@DT_CHANGE_PASSWORD_NEW"
--				, I.KY_CHANGE_PASSWORD AS "@KY_CHANGE_PASSWORD_NEW"
--				, I.FG_CHANGE_PASSWORD AS "@FG_CHANGE_PASSWORD_NEW"
--				, I.ID_ROLE AS "@ID_ROLE_NEW"
--				, I.ID_EMPLOYEE AS "@ID_EMPLOYEE_NEW"
--				, I.FG_ACTIVE AS "@FG_ACTIVE_NEW"
--				, I.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_NEW"
--				, I.DT_INACTIVE AS "@DT_INACTIVE_NEW"
--				, D.NM_USER AS "@NM_USER_OLD"
--				, D.KY_EMAIL AS "@KY_EMAIL_OLD"
--				, D.NM_PASSWORD AS "@NM_PASSWORD_OLD"
--				, D.DT_CHANGE_PASSWORD AS "@DT_CHANGE_PASSWORD_OLD"
--				, D.KY_CHANGE_PASSWORD AS "@KY_CHANGE_PASSWORD_OLD"
--				, D.FG_CHANGE_PASSWORD AS "@FG_CHANGE_PASSWORD_OLD"
--				, D.ID_ROLE AS "@ID_ROLE_OLD"
--				, D.ID_EMPLOYEE AS "@ID_EMPLOYEE_OLD"
--				, D.FG_ACTIVE AS "@FG_ACTIVE_OLD"
--				, D.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_OLD"
--				, D.DT_INACTIVE AS "@DT_INACTIVE_OLD"
--				FROM inserted I
--					INNER JOIN deleted D
--						ON I.KY_USER = D.KY_USER
--			FOR XML PATH ('UPDATED')
--		)

--		SELECT @NO_AFFECTED_RECORDS = COUNT(*) FROM inserted
--		SELECT TOP 1 @DS_MESSAGE = 'The user ' + NM_USER + ', with key ' + KY_USER + ' has been updated correctly' 
--			, @KY_USER = KY_USER_APP_UPDATE
--			, @NM_PROGRAM = NM_PROGRAM_UPDATE
--			, @DT_AFFECTED = DT_UPDATE
--		FROM inserted

--		IF @NO_AFFECTED_RECORDS > 1
--			SET @DS_MESSAGE = CONVERT(NVARCHAR(10), @NO_AFFECTED_RECORDS) + ' users has been updated correctly'

--	END

--	-------------------------------------------------- INSERT
--	IF @KY_ACTION = @KY_ACTION_INSERT BEGIN
--		SET @XML_VALUES = (
--			SELECT 
--				  I.KY_USER AS "@KY_USER" 
--				, I.NM_USER AS "@NM_USER_NEW"
--				, I.KY_EMAIL AS "@KY_EMAIL_NEW"
--				, I.NM_PASSWORD AS "@NM_PASSWORD_NEW"
--				, I.DT_CHANGE_PASSWORD AS "@DT_CHANGE_PASSWORD_NEW"
--				, I.KY_CHANGE_PASSWORD AS "@KY_CHANGE_PASSWORD_NEW"
--				, I.FG_CHANGE_PASSWORD AS "@FG_CHANGE_PASSWORD_NEW"
--				, I.ID_ROLE AS "@ID_ROLE_NEW"
--				, I.ID_EMPLOYEE AS "@ID_EMPLOYEE_NEW"
--				, I.FG_ACTIVE AS "@FG_ACTIVE_NEW"
--				, I.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_NEW"
--				, I.DT_INACTIVE AS "@DT_INACTIVE_NEW"
--				FROM inserted i
--			FOR XML PATH ('INSERTED')
--		)
		
--		SELECT @NO_AFFECTED_RECORDS = COUNT(*) FROM inserted
--		SELECT TOP 1 @DS_MESSAGE = 'The user ' + NM_USER + ', with key ' + KY_USER + ' has been inserted correctly' 
--			, @KY_USER = KY_USER_APP_CREATION
--			, @NM_PROGRAM = NM_PROGAM_CREATE
--			, @DT_AFFECTED = DT_CREATION
--		FROM inserted

--		IF @NO_AFFECTED_RECORDS > 1
--			SET @DS_MESSAGE = CONVERT(NVARCHAR(10), @NO_AFFECTED_RECORDS) + ' users has been inserted correctly'
--	END

--	------------------------------------------------ DELETE
--	IF @KY_ACTION = @KY_ACTION_DELETE BEGIN
--		SET @XML_VALUES = (
--			SELECT 
--				  D.KY_USER AS "@KY_USER" 
--				, D.NM_USER AS "@NM_USER_OLD"
--				, D.KY_EMAIL AS "@KY_EMAIL_OLD"
--				, D.NM_PASSWORD AS "@NM_PASSWORD_OLD"
--				, D.DT_CHANGE_PASSWORD AS "@DT_CHANGE_PASSWORD_OLD"
--				, D.KY_CHANGE_PASSWORD AS "@KY_CHANGE_PASSWORD_OLD"
--				, D.FG_CHANGE_PASSWORD AS "@FG_CHANGE_PASSWORD_OLD"
--				, D.ID_ROLE AS "@ID_ROLE_OLD"
--				, D.ID_EMPLOYEE AS "@ID_EMPLOYEE_OLD"
--				, D.FG_ACTIVE AS "@FG_ACTIVE_OLD"
--				, D.ID_BRANCH_PLANT AS "@ID_BRANCH_PLANT_OLD"
--				, D.DT_INACTIVE AS "@DT_INACTIVE_OLD"
--				FROM deleted D
--			FOR XML PATH ('DELETED')
--		)
		
--		SELECT @NO_AFFECTED_RECORDS = COUNT(*) FROM deleted
--		SELECT TOP 1 @DS_MESSAGE = 'The user ' + NM_USER + ', with key ' + KY_USER + ' has been deleted correctly' 
--			, @KY_USER = KY_USER_APP_CREATION
--			, @NM_PROGRAM = NM_PROGAM_CREATE
--			, @DT_AFFECTED = GETDATE()
--		FROM deleted

--		IF @NO_AFFECTED_RECORDS > 1
--			SET @DS_MESSAGE = CONVERT(NVARCHAR(10), @NO_AFFECTED_RECORDS) + ' users has been deleted correctly'
--	END

--	SET @XML_CATALOG = (
--		SELECT  
--			@KY_CATALOG AS "@CATALOG" 
--			, @XML_VALUES
--		FOR XML PATH ('CATALOG')
--	)
	
--	SET @XML_REFERENCE = (
--		SELECT  
--			@XML_CATALOG
--		FOR XML PATH ('REFERENCE')
--	)


	--INSERT INTO [PRD].[K_LOG]([DS_LOG],[XML_REFERENCE],DT_CREATION,KY_USER_APP_CREATION,NM_PROGAM_CREATE)
	--SELECT @DS_MESSAGE, @XML_REFERENCE, @DT_AFFECTED, @KY_USER, @NM_PROGRAM;

	INSERT INTO [PRD].[K_LOG]([DS_LOG],[XML_REFERENCE],DT_CREATION,KY_USER_APP_CREATION,NM_PROGAM_CREATE)
	SELECT 'Password change', '', getdate(), 'JDIAZ', 'MANAGEMENT STUDIO';

END TRY
BEGIN CATCH  
	ROLLBACK;  
END CATCH; 
	
END