-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2018
-- Author: Julio Tavares
-- CREATE date: 22/06/2018
-- Description: get all the operators allowed for the shifts
-- =============================================
CREATE PROCEDURE    [ADM].[SPE_GET_ALLOWED_OPERATORS] 
		@PIN_ID_BRANCH_PLANT AS INT = NULL,
        @PIN_KY_USER AS nvarchar(50) = NULL,
        @PIN_ID_EMPLOYEE AS INT = NULL
AS   
DECLARE 
		@V_ID_BRANCH_PLANT INT,
		@V_ID_POSITION_OPERATOR INT,
		@XML_CONFIGURATION XML,
	    @XML_BRANCH_PLANT_SELECTED XML,
		@V_DATE DATETIME = GETDATE()

		SELECT @XML_CONFIGURATION = XML_CONFIGURATION 
	      FROM ADM.S_CONFIGURATION

		SELECT @XML_BRANCH_PLANT_SELECTED = msgs.msg.query('.')
		  FROM @XML_CONFIGURATION.nodes('CONFIGURATIONS/ESPECIFIC_CONFIGURATION/child::node()') msgs(msg)	
		 WHERE msgs.msg.value('@ID_BRANCH_PLANT', 'nvarchar(max)') = @PIN_ID_BRANCH_PLANT

		 SELECT @V_ID_POSITION_OPERATOR = msgs.msg.value('@ID_POSITION', 'nvarchar(max)')
		   FROM @XML_BRANCH_PLANT_SELECTED.nodes('BRANCH_PLANT/QUALITY_PROCESS/OPERATOR') msgs(msg)	

		;WITH TB_USERS_IN_WORK AS (
		SELECT KS.KY_USER
		FROM PRD.K_SHIFT KS 
		WHERE KS.FG_STATUS = 1 --AND 
		--CASE WHEN @V_DATE BETWEEN KS.DT_START_SHIFT AND KS.DT_END_SHIFT THEN CONVERT(BIT,0) ELSE CONVERT(BIT,1) END = 0
	)


	SELECT 
			CU.KY_USER,
			CU.NM_USER,
			CU.ID_ROLE,
			CR.NM_ROLE,
			CR.KY_ROLE,
			isnull(CU.ID_EMPLOYEE,0) ID_EMPLOYEE,
			CONCAT ( CE.NM_FIRST_NAME, ' ',CE.NM_LAST_NAME,' ' )AS NM_EMPLOYEE,
			CE.KY_EMPLOYEE,
			CASE CU.[FG_ACTIVE] WHEN 1 THEN 'Yes' ELSE 'No' END AS FG_ACTIVE,
			CU.[ID_BRANCH_PLANT],
			BP.KY_BRANCH_PLANT,
			ISNULL(BP.NM_BRANCH_PLANT,'All') AS NM_BRANCH_PLANT
     FROM ADM.C_USER CU
     JOIN ADM.C_EMPLOYEE CE ON CU.ID_EMPLOYEE = CE.ID_EMPLOYEE
     JOIN ADM.C_ROLE CR ON CR.ID_ROLE = CU.ID_ROLE
	 JOIN ADM.C_ROLE_FUNCTION CRF ON CR.ID_ROLE = CRF.ID_ROLE
     JOIN ADM.S_FUNCTION SF ON CRF.ID_FUNCTION = SF.ID_FUNCTION
LEFT JOIN ADM.C_BRANCH_PLANT BP ON BP.ID_BRANCH_PLANT = CU.ID_BRANCH_PLANT
--LEFT JOIN TB_USERS_IN_WORK UW ON CU.KY_USER = UW.KY_USER
	 WHERE SF.KY_FUNCTION = 'ADH'  ---- KEY FUNCTION TO ALLOW OPERATE MACHINE
	   AND CU.FG_ACTIVE = 1 
	   --AND UW.KY_USER IS NULL  
	   AND CU.ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT 
	   AND (@PIN_KY_USER IS NULL OR (@PIN_KY_USER IS NOT NULL AND CU.[KY_USER] = @PIN_KY_USER)) 
	   AND (@PIN_ID_EMPLOYEE IS NULL OR (@PIN_ID_EMPLOYEE IS NOT NULL AND CU.[ID_EMPLOYEE] = @PIN_ID_EMPLOYEE))
  ORDER BY CU.NM_USER

	--SELECT 
	--		CU.[KY_USER],
	--		CU.[NM_USER],
	--		CU.[ID_ROLE],
	--		CR.NM_ROLE,
	--		CR.KY_ROLE,
	--		isnull(CU.ID_EMPLOYEE,0) ID_EMPLOYEE,
	--		CONCAT ( CE.NM_FIRST_NAME, ' ',CE.NM_LAST_NAME,' ' )AS NM_EMPLOYEE,
	--		CE.KY_EMPLOYEE,
	--		CASE CU.[FG_ACTIVE] WHEN 1 THEN 'Yes' ELSE 'No' END AS FG_ACTIVE,
	--		CU.[ID_BRANCH_PLANT],
	--		BP.KY_BRANCH_PLANT,
	--		ISNULL(BP.NM_BRANCH_PLANT,'All') AS NM_BRANCH_PLANT
	--		FROM ADM.C_USER CU
 --LEFT OUTER JOIN ADM.C_ROLE CR ON CR.ID_ROLE = CU.ID_ROLE
 --LEFT OUTER JOIN ADM.C_EMPLOYEE CE ON CE.ID_EMPLOYEE = CU.ID_EMPLOYEE
 --LEFT OUTER JOIN ADM.C_BRANCH_PLANT BP ON BP.ID_BRANCH_PLANT = CU.ID_BRANCH_PLANT
 --LEFT OUTER JOIN TB_USERS_IN_WORK UW ON CU.KY_USER = UW.KY_USER
	--WHERE CU.[FG_ACTIVE] = 1 AND UW.KY_USER IS NULL AND 
	--	  CE.ID_POSITION = @V_ID_POSITION_OPERATOR AND 
	--	  CU.ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT AND 
	--	(@PIN_KY_USER IS NULL OR (@PIN_KY_USER IS NOT NULL AND CU.[KY_USER] = @PIN_KY_USER)) AND 
	--	(@PIN_ID_EMPLOYEE IS NULL OR (@PIN_ID_EMPLOYEE IS NOT NULL AND CU.[ID_EMPLOYEE] = @PIN_ID_EMPLOYEE))

