-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Julio Díaz
-- CRETAE date: 01/30/2019
-- Description: Inserts a record when a user is accessing to the system
-- =============================================
CREATE PROCEDURE    [ADM].[SPE_INSERT_USER_ACCESS_RECORD] 
    @XML_RESULT XML = '' OUT
	, @PIN_KY_USER NVARCHAR(50)
	, @PIN_IP_ADDRESS NVARCHAR(50)
	, @PIN_NM_PROGRAM NVARCHAR(50)

AS
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
		,@DT_SYSTEM DATETIME = GETDATE()

    	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	

		DECLARE @NM_USER NVARCHAR(300)
			, @ID_POSITION INT
			, @KY_POSITION NVARCHAR(50)
			, @NM_POSITION NVARCHAR(300)
			, @FG_IS_FOREMAN BIT
			, @ID_EMPLOYEE INT
			, @ID_BRANCH_PLANT INT

		SELECT @NM_USER = CU.NM_USER
			, @ID_EMPLOYEE = CU.ID_EMPLOYEE
			, @ID_BRANCH_PLANT = CU.ID_BRANCH_PLANT
		FROM ADM.C_USER CU
		WHERE CU.KY_USER = @PIN_KY_USER

		SELECT TOP 1 @ID_POSITION = CP.ID_POSITION
			, @KY_POSITION = CP.KY_POSITION
			, @NM_POSITION = CP.NM_POSITION
		FROM ADM.C_EMPLOYEE CE
			INNER JOIN ADM.C_POSITION CP
				ON CE.ID_POSITION = CP.ID_POSITION
				AND CE.ID_EMPLOYEE = @ID_EMPLOYEE

		SELECT TOP 1 @FG_IS_FOREMAN = CASE WHEN XML_CONFIGURATION.value('(/CONFIGURATIONS/ESPECIFIC_CONFIGURATION/BRANCH_PLANT[@ID_BRANCH_PLANT=sql:variable("@ID_BRANCH_PLANT")]/PRODUCTION_LINE_AUTHORIZERS/POSITION[@ID_POSITION=sql:variable("@ID_POSITION")]/@ID_POSITION)[1]', 'NVARCHAR(50)') IS NULL THEN 0 ELSE 1 END FROM ADM.S_CONFIGURATION

		INSERT INTO ADM.K_USER_ACCESS_LOG (
			KY_USER
			, NM_USER
			, ID_POSITION
			, KY_POSITION
			, NM_POSITION
			, DT_USER_ACCESS
			, KY_IP_ACCESS_FROM
			, FG_IS_FOREMAN
			, DT_CREATION
			, KY_USER_APP_CREATION
			, NM_PROGAM_CREATE
		)
		SELECT @PIN_KY_USER AS KY_USER
			, @NM_USER AS NM_USER
			, @ID_POSITION AS ID_POSITION
			, @KY_POSITION AS KY_POSITION
			, @NM_POSITION AS NM_POSITION
			, @DT_SYSTEM AS DT_USER_ACCESS
			, @PIN_IP_ADDRESS AS KY_IP_ACCESS_FROM
			, ISNULL(@FG_IS_FOREMAN, 0) AS FG_IS_FOREMAN
			, @DT_SYSTEM AS DT_CREATION
			, @PIN_KY_USER AS KY_USER_APP_CREATION
			, @PIN_NM_PROGRAM AS NM_PROGAM_CREATE

		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK

		SET @XML_RESULT = DBO.F_ERROR_MESSAGES(ERROR_NUMBER(),ERROR_MESSAGE())
		
			
	END CATCH
END

