-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Juan De Dios Pérez
-- CRETAE date: 1/03/2017
-- Description: Insert or update a new BRANCH PLANT
-- =============================================
-- 24/01/2018 JDR PIN_ID_TIME_ZONE and PIN_TZ_OFFSET parameters added
-- 08/06/2018 JCTC ADD ID_WIDTH, ID_LEGTH, ID_WEIGHT AND VALUES MAX AND MIN ADDED IN PARAMETERS
-- 15/06/2018 GVT ADD ID_CUT_TIME_METRIC, ID_TOTAL_CUT_WEIGHT_METRIC, ID_LBS_PER_HOUR AND ID_PARTS_EXT_METRIC  IN PARAMETERS
-- 09/27/2018 JDR PIN_ID_CARTON_ITEM_CATALOG and PIN_FG_QUALITY_INSPECTOR parameters were added
-- =============================================

CREATE PROCEDURE    [ADM].[SPE_INSERT_UPDATE_BRANCH_PLANT] 
	@XML_RESULT XML = '' OUT     -- --0 TO ERROR AND 1 TO CORRECT
	, @PIN_ID_BRANCH_PLANT AS int = NULL
	, @PIN_KY_BRANCH_PLANT AS nvarchar(50) = NULL
	, @PIN_NM_BRANCH_PLANT AS nvarchar(300) = NULL
	, @PIN_DS_BRANCH_PLANT AS nvarchar(500) = NULL
	, @PIN_ID_TIME_ZONE AS NVARCHAR(255) = NULL
	, @PIN_TZ_OFFSET AS INT = NULL
	, @PIN_ID_FILE AS nvarchar(255) = NULL
	, @P_FS_FILE VARBINARY(MAX) = NULL
	, @PIN_NM_FILE AS nvarchar(55) = NULL
	, @PIN_FG_QUALITY_INSPECTOR BIT

	, @PIN_ID_WIDTH_METRIC INT = NULL
	, @PIN_NO_WIDTH_MIN_VALUE FLOAT = NULL
	, @PIN_NO_WIDTH_MAX_VALUE FLOAT = NULL
	, @PIN_ID_LENGTH_METRIC INT = NULL
	, @PIN_NO_LENGTH_MIN_VALUE FLOAT = NULL
	, @PIN_NO_LENGTH_MAX_VALUE FLOAT = NULL
	, @PIN_ID_WEIGHT_METRIC INT = NULL
	, @PIN_NO_WEIGHT_MIN_VALUE FLOAT = NULL
 	, @PIN_NO_WEIGHT_MAX_VALUE FLOAT = NULL

	, @PIN_ID_THICKNESS_METRIC INT = NULL
	, @PIN_ID_GLOSS_METRIC INT = NULL
	, @PIN_ID_LIGHT_TRANSMISSION_METRIC INT = NULL
	, @PIN_ID_CUT_TIME_METRIC INT = NULL
	, @PIN_ID_TOTAL_CUT_WEIGHT_METRIC INT = NULL
	, @PIN_ID_LBS_PER_HOUR_METRIC INT = NULL
	, @PIN_ID_PARTS_EXT_METRIC INT = NULL
	, @PIN_ID_WEB_WIDTH_METRIC INT = NULL
	, @PIN_ID_DIE_PUMP_METRIC INT = NULL

	, @PIN_ID_CARTON_ITEM_CATALOG INT

	, @PIN_KY_USER_APP_CREATE AS nvarchar(50)
	, @PIN_KY_USER_APP_UPDATE AS nvarchar(50)
	, @PIN_NM_PROGRAM_CREATE AS nvarchar(50)
	, @PIN_NM_PROGRAM_UPDATE AS nvarchar(50)
	, @PIN_TYPE_TRANSACTION CHAR(1)             --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE

	BEGIN TRY
	
		DECLARE @V_EXIST_TRAN BIT = 0
		,@DT_SYSTEM DATETIME = GETDATE(),
		@V_ID_FILE NVARCHAR(250) = NULL,
		@V_KY_ROOT NVARCHAR(200) = null,
		@V_EXISTS_FILE NVARCHAR(250) = NULL,
		@V_ERROR NVARCHAR(300) = NULL,
		@PIN_ID_FILESTREAM UNIQUEIDENTIFIER,
		@PIN_ID_PATH_LOCATOR hierarchyid
		--,@V_TRANSACTION NVARCHAR(20) = 'MyTransaction'



			--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) BEGIN
				--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION 
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1

		END	

		DECLARE @V_FS_INSERTED_FILE TABLE (
			STREAM_ID UNIQUEIDENTIFIER
		)
		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION = 'I' BEGIN
			INSERT INTO ADM.C_BRANCH_PLANT (
				KY_BRANCH_PLANT
				, NM_BRANCH_PLANT
				, DS_BRANCH_PLANT
				, ID_FILE
				, ID_TIME_ZONE
				, TZ_OFFSET
				, FG_QUALITY_INSPECTOR

				, ID_WIDTH_METRIC
				, NO_WIDTH_MIN_VALUE
				, NO_WIDTH_MAX_VALUE
				, ID_LENGTH_METRIC
				, NO_LENGTH_MIN_VALUE
				, NO_LENGTH_MAX_VALUE
				, ID_WEIGHT_METRIC
				, NO_WEIGHT_MIN_VALUE
				, NO_WEIGHT_MAX_VALUE

				, ID_THICKNESS_METRIC
				, ID_GLOSS_METRIC
				, ID_LIGHT_TRANSMISSION_METRIC
				, ID_CUT_TIME_METRIC
				, ID_TOTAL_CUT_WEIGHT_METRIC
				, ID_LBS_PER_HOUR_METRIC
				, ID_PARTS_EXT_METRIC
				, ID_WEB_WIDTH_METRIC
				, ID_DIE_PUMP_METRIC

				, ID_CARTON_ITEM_CATALOG

				, DT_CREATION
				, KY_USER_APP_CREATION
				, NM_PROGAM_CREATE
			) VALUES (
				@PIN_KY_BRANCH_PLANT
				, @PIN_NM_BRANCH_PLANT
				, @PIN_DS_BRANCH_PLANT
				, @V_ID_FILE
				, @PIN_ID_TIME_ZONE
				, @PIN_TZ_OFFSET
				, @PIN_FG_QUALITY_INSPECTOR

				, @PIN_ID_WIDTH_METRIC 
				, @PIN_NO_WIDTH_MIN_VALUE 
				, @PIN_NO_WIDTH_MAX_VALUE 
				, @PIN_ID_LENGTH_METRIC 
				, @PIN_NO_LENGTH_MIN_VALUE
				, @PIN_NO_LENGTH_MAX_VALUE
				, @PIN_ID_WEIGHT_METRIC 
				, @PIN_NO_WEIGHT_MIN_VALUE
				, @PIN_NO_WEIGHT_MAX_VALUE

				, @PIN_ID_THICKNESS_METRIC
				, @PIN_ID_GLOSS_METRIC
				, @PIN_ID_LIGHT_TRANSMISSION_METRIC
				, @PIN_ID_CUT_TIME_METRIC
				, @PIN_ID_TOTAL_CUT_WEIGHT_METRIC
				, @PIN_ID_LBS_PER_HOUR_METRIC
				, @PIN_ID_PARTS_EXT_METRIC
				, @PIN_ID_WEB_WIDTH_METRIC
				, @PIN_ID_DIE_PUMP_METRIC

				, @PIN_ID_CARTON_ITEM_CATALOG

				, @DT_SYSTEM
				, @PIN_KY_USER_APP_CREATE
				, @PIN_NM_PROGRAM_CREATE
			)	
				
			SET @PIN_ID_BRANCH_PLANT = SCOPE_IDENTITY();
			SET @V_KY_ROOT = ('\Home\Configuration\Branch Plants\' + CONVERT(nvarchar(10),@PIN_ID_BRANCH_PLANT));

			IF @P_FS_FILE IS NOT NULL BEGIN
				EXECUTE ADM.SPE_CREATE_ROUTE
				@PIN_FS_MULTIMEDIA_FOLDER = @V_KY_ROOT,
				@PIN_ID_FILESTREAM = @PIN_ID_FILESTREAM OUTPUT


				SET @PIN_ID_PATH_LOCATOR =  dbo.GetNewPathLocator(GetPathLocator(FileTableRootPath()+@V_KY_ROOT))
				
				IF @PIN_ID_PATH_LOCATOR IS NOT NULL BEGIN
					INSERT INTO ADM.FS_FILE_SYSTEM(
						file_stream
						,name
						,path_locator
					)
					OUTPUT INSERTED.stream_id INTO @V_FS_INSERTED_FILE
					SELECT @P_FS_FILE  
						,@PIN_NM_FILE
						,@PIN_ID_PATH_LOCATOR

					SELECT @V_ID_FILE = STREAM_ID FROM @V_FS_INSERTED_FILE
					IF @V_ID_FILE IS NOT NULL BEGIN
						UPDATE 
						ADM.C_BRANCH_PLANT
						SET ID_FILE = @V_ID_FILE
						, DT_UPDATE = @DT_SYSTEM
						, KY_USER_APP_UPDATE =@PIN_KY_USER_APP_CREATE
						, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM_CREATE
						WHERE ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT ;	 
					END
				END
			END
		END ELSE BEGIN
				--
			IF @PIN_ID_FILE IS NOT NULL BEGIN
				IF @P_FS_FILE IS NOT NULL BEGIN
					UPDATE  ADM.FS_FILE_SYSTEM
					SET file_stream = @P_FS_FILE
						, name = @PIN_NM_FILE
					WHERE stream_id = @PIN_ID_FILE
				END ELSE BEGIN
					DELETE FROM ADM.FS_FILE_SYSTEM
					WHERE stream_id = @PIN_ID_FILE

					SET @PIN_ID_FILE = NULL;
				END
			END ELSE BEGIN
				IF @P_FS_FILE IS NOT NULL BEGIN
					SET @V_KY_ROOT = ('\Home\Configuration\Branch Plants\' + CONVERT(nvarchar(10),@PIN_ID_BRANCH_PLANT));
					EXECUTE ADM.SPE_CREATE_ROUTE
						@PIN_FS_MULTIMEDIA_FOLDER = @V_KY_ROOT,
						@PIN_ID_FILESTREAM = @PIN_ID_FILESTREAM OUTPUT
					SET @PIN_ID_PATH_LOCATOR =  dbo.GetNewPathLocator(GetPathLocator(FileTableRootPath()+@V_KY_ROOT))

					IF @PIN_ID_PATH_LOCATOR IS NOT NULL BEGIN
						INSERT INTO ADM.FS_FILE_SYSTEM (
							file_stream
							,name
							,path_locator
						)
						OUTPUT INSERTED.stream_id INTO @V_FS_INSERTED_FILE
						SELECT @P_FS_FILE  
							,@PIN_NM_FILE
							,@PIN_ID_PATH_LOCATOR

						SELECT @PIN_ID_FILE = STREAM_ID FROM @V_FS_INSERTED_FILE
					
						IF @V_ID_FILE IS NOT NULL BEGIN
							UPDATE ADM.C_BRANCH_PLANT
							SET ID_FILE = @V_ID_FILE,
								DT_UPDATE =@DT_SYSTEM
								, KY_USER_APP_UPDATE =@PIN_KY_USER_APP_UPDATE
								, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM_UPDATE
							WHERE ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT ;	 
						END
					END
				END
			END

			UPDATE ADM.C_BRANCH_PLANT SET
   					KY_BRANCH_PLANT = @PIN_KY_BRANCH_PLANT
				, NM_BRANCH_PLANT = @PIN_NM_BRANCH_PLANT
				, DS_BRANCH_PLANT =@PIN_DS_BRANCH_PLANT
				, ID_FILE =  @PIN_ID_FILE 
				, ID_TIME_ZONE = @PIN_ID_TIME_ZONE
				, TZ_OFFSET = @PIN_TZ_OFFSET
				, FG_QUALITY_INSPECTOR = @PIN_FG_QUALITY_INSPECTOR

				, ID_WIDTH_METRIC     = @PIN_ID_WIDTH_METRIC 
				, NO_WIDTH_MIN_VALUE  = @PIN_NO_WIDTH_MIN_VALUE 
				, NO_WIDTH_MAX_VALUE  = @PIN_NO_WIDTH_MAX_VALUE 
				, ID_LENGTH_METRIC	  = @PIN_ID_LENGTH_METRIC 
				, NO_LENGTH_MIN_VALUE = @PIN_NO_LENGTH_MIN_VALUE
				, NO_LENGTH_MAX_VALUE = @PIN_NO_LENGTH_MAX_VALUE
				, ID_WEIGHT_METRIC	  = @PIN_ID_WEIGHT_METRIC 
				, NO_WEIGHT_MIN_VALUE = @PIN_NO_WEIGHT_MIN_VALUE
				, NO_WEIGHT_MAX_VALUE = @PIN_NO_WEIGHT_MAX_VALUE

				, ID_THICKNESS_METRIC = @PIN_ID_THICKNESS_METRIC
				, ID_GLOSS_METRIC = @PIN_ID_GLOSS_METRIC
				, ID_LIGHT_TRANSMISSION_METRIC = @PIN_ID_LIGHT_TRANSMISSION_METRIC
				, ID_CUT_TIME_METRIC = @PIN_ID_CUT_TIME_METRIC
				, ID_TOTAL_CUT_WEIGHT_METRIC = @PIN_ID_TOTAL_CUT_WEIGHT_METRIC
				, ID_LBS_PER_HOUR_METRIC = @PIN_ID_LBS_PER_HOUR_METRIC
				, ID_PARTS_EXT_METRIC = @PIN_ID_PARTS_EXT_METRIC
				, ID_WEB_WIDTH_METRIC = @PIN_ID_WEB_WIDTH_METRIC
				, ID_DIE_PUMP_METRIC = @PIN_ID_DIE_PUMP_METRIC

				, ID_CARTON_ITEM_CATALOG = @PIN_ID_CARTON_ITEM_CATALOG

				, DT_UPDATE = @DT_SYSTEM
				, KY_USER_APP_UPDATE = @PIN_KY_USER_APP_UPDATE
				, NM_PROGRAM_UPDATE = @PIN_NM_PROGRAM_UPDATE	       
			WHERE ID_BRANCH_PLANT = @PIN_ID_BRANCH_PLANT								
		END
		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, CAST(@PIN_ID_BRANCH_PLANT AS NVARCHAR(20)), 'ID_BRANCH_PLANT')
			-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
	END CATCH
END

