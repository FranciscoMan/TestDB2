-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2017
-- Author: Juan De Dios Pérez
-- CRETAE date: 10/03/2017
-- Description: Insert or update a new user
-- =============================================
-- 02/08/2019 JDR Validations are added to avoid inserting users with spaces at the ends of the user
-- =============================================


CREATE PROCEDURE    [ADM].[SPE_INSERT_UPDATE_USER] 
    		@XML_RESULT XML = '' OUT ,    -- --0 TO ERROR AND 1 TO CORRECT
			@PIN_KY_USER AS nvarchar(50) = NULL,
			@PIN_NM_USER AS nvarchar(300) = NULL,
			@PIN_KY_EMAIL AS nvarchar(500) = NULL,
			@PIN_NM_PASSWORD AS nvarchar(100) = NULL,
			@PIN_DT_CHANGE_PASSWORD AS DATETIME = NULL,
			@PIN_KY_CHANGE_PASSWORD AS nvarchar(100) = NULL,
			@PIN_FG_CHANGE_PASSWORD AS BIT = NULL,
			@PIN_ID_ROLE AS INT = NULL,
			@PIN_ID_EMPLOYEE AS INT = NULL,
			@PIN_FG_ACTIVE AS bit = NULL,
			@PIN_ID_BRANCH_PLANT AS INT = NULL,
			@PIN_DT_INACTIVE AS DATETIME = NULL
		  , @PIN_KY_USER_APP_CREATE AS nvarchar(50)
		  , @PIN_KY_USER_APP_UPDATE AS nvarchar(50)
		  , @PIN_NM_PROGRAM_CREATE AS nvarchar(50)
		  , @PIN_NM_PROGRAM_UPDATE AS nvarchar(50)
		  , @PIN_TYPE_TRANSACTION CHAR(1)             --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CDT_SISTEMA DATETIME = GETDATE()

    	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	
		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION='I'
	    	BEGIN
			--WE INSERT THE REGISTER ON THE TABLE  ADM.C_USER
			INSERT INTO ADM.C_USER
					   ([KY_USER]
						, [NM_USER]
						, [KY_EMAIL]
						, [NM_PASSWORD]
						, [DT_CHANGE_PASSWORD]
						, [KY_CHANGE_PASSWORD]
						, [FG_CHANGE_PASSWORD]
						, [ID_ROLE]
						, [ID_EMPLOYEE]
						, [FG_ACTIVE]
						, [ID_BRANCH_PLANT]
						, [DT_INACTIVE]
						, [DT_CREATION]
						, [KY_USER_APP_CREATION]
						, [NM_PROGAM_CREATE]
					)
			VALUES
					     (  LTRIM(RTRIM(@PIN_KY_USER)),
							@PIN_NM_USER,
							@PIN_KY_EMAIL,
							@PIN_NM_PASSWORD,
							@PIN_DT_CHANGE_PASSWORD,
							@PIN_KY_CHANGE_PASSWORD,
							@PIN_FG_CHANGE_PASSWORD,
							@PIN_ID_ROLE,
							@PIN_ID_EMPLOYEE,
							@PIN_FG_ACTIVE,
							@PIN_ID_BRANCH_PLANT,
							CASE WHEN @PIN_FG_ACTIVE = 0 THEN @CDT_SISTEMA ELSE NULL END
						   ,@CDT_SISTEMA
						   ,@PIN_KY_USER_APP_CREATE
						  , @PIN_NM_PROGRAM_CREATE
					)			
		END ELSE BEGIN
			-- WE UPDATE THE REGISTER ON THE TABLE ADM.C_USER
			UPDATE ADM.C_USER SET
					      [KY_USER] = LTRIM(RTRIM(@PIN_KY_USER))
						, [NM_USER] =@PIN_NM_USER
						, [KY_EMAIL]=@PIN_KY_EMAIL
						, [NM_PASSWORD] = CASE WHEN @PIN_FG_CHANGE_PASSWORD = 1 THEN @PIN_NM_PASSWORD ELSE [NM_PASSWORD]END
						, [DT_CHANGE_PASSWORD]=@PIN_DT_CHANGE_PASSWORD
						, [KY_CHANGE_PASSWORD]=@PIN_KY_CHANGE_PASSWORD
						, [FG_CHANGE_PASSWORD]=@PIN_FG_CHANGE_PASSWORD
						, [ID_ROLE]=@PIN_ID_ROLE
						, [ID_EMPLOYEE]=@PIN_ID_EMPLOYEE
						, [FG_ACTIVE]=@PIN_FG_ACTIVE
						, [ID_BRANCH_PLANT]=@PIN_ID_BRANCH_PLANT
						, [DT_INACTIVE]=CASE WHEN @PIN_FG_ACTIVE = 0 THEN @CDT_SISTEMA ELSE DT_INACTIVE END
						, [DT_UPDATE] =@CDT_SISTEMA
						, [KY_USER_APP_UPDATE] = @PIN_KY_USER_APP_UPDATE
						, [NM_PROGRAM_UPDATE] = @PIN_NM_PROGRAM_UPDATE
			WHERE [KY_USER] = @PIN_KY_USER
									
		END
		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')
		
			
	END CATCH
END





