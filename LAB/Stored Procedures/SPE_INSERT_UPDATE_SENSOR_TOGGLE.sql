-- ================================================================
-- Proyecto: Plaskolite v2
-- Copyright (c) - Vitek - 2019
-- Author: Cynthia Aideé Alvarez.
-- CREATE date: 11/19/2019
-- Description: INSERT AND UPDATE FROM SENSOR_TOGGLE.
-- =================================================================
CREATE PROCEDURE   [LAB].[SPE_INSERT_UPDATE_SENSOR_TOGGLE]
		@XML_RESULT						XML			 = '' OUT,
	  	@ID_SENSOR		             AS INT          = NULL, -- DATA REQUIRED TO UPDATE FLAG_STATUS.
		@KY_USER                     AS NVARCHAR(50) = NULL, -- ADM.C_USER
		@DS_EXPLANATION              AS NVARCHAR(80) = NULL,
		@TYPE_OF_SETTING		     AS VARCHAR(40)  = NULL,
		@FG_ACTIVE                   AS BIT          = NULL
	AS 
		BEGIN
				-- WE DECLARE A VARIABLE TO MANAGE  THE TRANSACTION IF EXIST OR NOT, AN OTHER DECLARATIONS.
				DECLARE @V_EXIST_TRAN     AS BIT = 0
				BEGIN TRY
				-- VERIFY EXIST TRANSACTION.
				IF (@@TRANCOUNT = 0)
					BEGIN
					-- IN CASE THAT THE TRANSACTION DOESN'T INIT, WE INITIALIZE THE VARIABLE.
						BEGIN TRANSACTION 
							SET @V_EXIST_TRAN = 1
					END
				-- WE DECLARE AN AUXILIAR FLAG TO SEE IF THE SENSOR IS ACTUALLY ON OR OFF.
				DECLARE @DT_ACTIVE		  AS DATETIME 
				DECLARE @DT_NOT_ACTIVE    AS DATETIME 
				DECLARE @ID_SENSOR_TOGGLE AS INT
			    DECLARE @ROW			  AS INT
				DECLARE @IS_SENSOR_ACTIVE AS BIT

				SET @IS_SENSOR_ACTIVE  = (SELECT FG_STATUS FROM LAB.K_SENSORS
													WHERE ID_SENSOR = @ID_SENSOR)
				    -- WE MUST SEARCH IF EXIST A REGISTER IN THE TABLE ITSELF.
							  SELECT  TOP 1
								 @ID_SENSOR_TOGGLE = ID_SENSOR_TOGGLE,
								 @DT_ACTIVE 	   = DT_ACTIVATED,   
							     @DT_NOT_ACTIVE    = DT_DESACTIVATED 
						       FROM LAB.K_SENSOR_TOGGLE WHERE ID_SENSOR = @ID_SENSOR
							   ORDER BY ID_SENSOR_TOGGLE DESC

							--   SELECT @ID_SENSOR_TOGGLE ST, @DT_ACTIVE, @DT_NOT_ACTIVE

				    SET @ROW = (SELECT TOP 1 COUNT(*) FROM LAB.K_SENSOR_TOGGLE  WHERE ID_SENSOR = @ID_SENSOR)
					SELECT @ROW
					-- IF THE "ROW" IS 0 (DOESN'T EXIST), IT'S MOMENT TO INSERT A NEW ONE.
					IF(@ROW = 0)
						BEGIN 
						-- THIS IS THE FIRST TIME TO INSERT THE SENSOR TO WORK.
								INSERT INTO LAB.K_SENSOR_TOGGLE(
									ID_SENSOR,
									KY_USER_ACTIVATED,
									KY_USER_DESACTIVATED,
									DT_ACTIVATED, -- I SUPPOSE THE FIRST TIME IS IN "STANDBY" MODE AND IS NOT WORKING WITH THE SENSOR YET.
									DT_DESACTIVATED,
									DS_EXPLANATION_ACTIVATED,
									DS_EXPLANATION_DESACTIVATED,
									TYPE_OF_SETTING_ACTIVATE,
									FG_ACTIVE
								) VALUES(
									@ID_SENSOR,
									@KY_USER, -- PASS THE KEY USER! DON'T FORGET.
									NULL,
									GETDATE(), -- IN THIS CASE,  THE FIRST TIME IS WHEN THE SENSOR IS WORKING...
									NULL, 
									@DS_EXPLANATION,	 
									NULL,
									@TYPE_OF_SETTING,
									@FG_ACTIVE -- IT MUST BE 1 
								)
							-- UPDATE YOUR SENSOR FLAG TO 1 (ACTIVE)!
							UPDATE LAB.K_SENSORS SET 
									FG_STATUS = 1 WHERE ID_SENSOR = @ID_SENSOR
							END
					ELSE -- IS AN UPDATE.
						BEGIN
							-- IF ONE OF THE DATES IS NOT REGISTERED (IN THIS CASE, NOT ACTIVE)
							-- BUT YOU HAVE A REGISTER OF THE SENSOR YOU USE RIGHT NOW...
							 IF ((@DT_NOT_ACTIVE IS NULL) AND (@FG_ACTIVE = 0))
							 BEGIN
								--  EXPLAIN WHY THE SENSOR IS DESACTIVATED.
									UPDATE LAB.K_SENSOR_TOGGLE SET 
									KY_USER_DESACTIVATED          = @KY_USER, -- WHO DESACTIVATED?
									DT_DESACTIVATED               = GETDATE(),
									DS_EXPLANATION_DESACTIVATED   = @DS_EXPLANATION,
									FG_ACTIVE					  = @FG_ACTIVE,
									TYPE_OF_SETTING				  = @TYPE_OF_SETTING
									WHERE ID_SENSOR_TOGGLE 		  = @ID_SENSOR_TOGGLE
									--  CHANGE YOUR SENSOR'S FLAG_STATUS TO OFF.
									UPDATE LAB.K_SENSORS SET 
										FG_STATUS = 0 WHERE ID_SENSOR = @ID_SENSOR
							END
							ELSE
							--NOW, IF THE SENSOR INSERTED IS FULL (IN DATES), CREATE A NEW ONE AGAIN.
							BEGIN 
							IF ((@DT_NOT_ACTIVE IS NOT NULL) AND (@DT_ACTIVE IS NOT NULL) AND (@FG_ACTIVE = 1))
									BEGIN
										INSERT INTO LAB.K_SENSOR_TOGGLE(
											[ID_SENSOR],
											[KY_USER_ACTIVATED],
											[KY_USER_DESACTIVATED],
											[DT_ACTIVATED], 
											[DT_DESACTIVATED],
											[DS_EXPLANATION_ACTIVATED],
											[DS_EXPLANATION_DESACTIVATED],
											[TYPE_OF_SETTING_ACTIVATE],
											[FG_ACTIVE]
										) VALUES(
											@ID_SENSOR,
											@KY_USER, 
											NULL, 
											GETDATE(), 
											NULL, 
											@DS_EXPLANATION,	 
											NULL, 
											@TYPE_OF_SETTING,
											@FG_ACTIVE -- IT MUST BE 1 
										)
									-- UPDATE YOUR SENSOR FLAG TO 1 (ACTIVE)! AGAIN...
									UPDATE LAB.K_SENSORS SET 
										FG_STATUS = 1 WHERE ID_SENSOR = @ID_SENSOR
									END
							END
						END
			    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
				SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
				IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
					COMMIT	
				END TRY
					BEGIN CATCH		
					--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTION GET CANCELED
					IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
						ROLLBACK

					DECLARE @KY_ERROR INT				  = ERROR_NUMBER()
					DECLARE @ERROR_MESSAGE NVARCHAR(250)  = ERROR_MESSAGE()
	
					SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
					SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro')
					SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register')	
					END CATCH
		END
	
