-- =============================================
-- Proyecto: Plaskolite
-- Copyright (c) - Acrux - 2018
-- Author: Gabriel Vázquez
-- CRETAE date: 02/05/2018
-- Description: Insert or update a sample
-- =============================================
CREATE PROCEDURE    [LAB].[SPE_INSERT_UPDATE_SAMPLE] 
	@XML_RESULT XML = '' OUT
	, @PIN_ID_SAMPLE as int = null
	, @PIN_NO_SAMPLE as int = null
	, @PIN_DT_WIDTH as datetime = null
	, @PIN_ID_WIDTH_METRIC as int = null
	, @PIN_NO_WIDTH_VALUE as float = null
	, @PIN_DT_LENGTH as datetime = null
	, @PIN_ID_LENGTH_METRIC as int = null
	, @PIN_NO_LENGTH_VALUE as float = null
	, @PIN_DT_THICKNESS as datetime = null
	, @PIN_ID_THICKNESS_METRIC as int = null
	, @PIN_NO_THICKNESS_VALUE as float = null
	, @PIN_XML_THICKNESS_READINGS AS XML
	, @PIN_DT_LIGHT_TRANSMISSION as datetime = null
	, @PIN_ID_LIGHT_TRANSMISSION_METRIC as int = null
	, @PIN_NO_LIGHT_TRANSMISSION_VALUE as float = null
	, @PIN_DT_GLOSS as datetime = null
	, @PIN_ID_GLOSS_METRIC as int = null
	, @PIN_NO_GLOSS_VALUE as float = null
	, @PIN_DT_WEIGHT as datetime = null
	, @PIN_ID_WEIGHT_METRIC as int = null
	, @PIN_NO_WEIGHT_VALUE as float = null
	, @PIN_NO_PALLET as int = null
	, @PIN_NO_WORK_ORDER as int = null
	, @PIN_ID_FORM as int = null
	, @PIN_KY_SAMPLE_STATUS as nvarchar(50)
	, @PIN_KY_USER_APP_CREATE AS nvarchar(50)
	, @PIN_KY_USER_APP_UPDATE AS nvarchar(50)
	, @PIN_NM_PROGRAM_CREATE AS nvarchar(50)
	, @PIN_NM_PROGRAM_UPDATE AS nvarchar(50)
	, @PIN_TYPE_TRANSACTION CHAR(1)             --I=INSERT   U=UPDATE

AS 
BEGIN  
	----WE DECLARE THE STARTED VARIABLE THAT INDICATES IF WE WILL HAVE A TRANSACTION ON SPE
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = GETDATE()
	,@V_NO_PALLET INT = NULL
	,@V_NO_WORK_ORDER INT = NULL
	,@V_ID_FORM INT = NULL
	,@V_DT_THICKNESS DATETIME = NULL
	,@V_ID_THICKNESS_METRIC INT = NULL
	,@V_NO_THICKNESS_VALUE FLOAT = NULL

    	BEGIN TRY
		--WE VERIFY THAT EXISTS A WORKING TRANSACTION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--IN CASE THAT THE TRANSACTION DOESNT START
			BEGIN TRANSACTION
			--IT EDITS THE VARIABLE THAT INDICATES THAT THE TRANSACTION START IN THIS BLOCK TO CANCEL IN ANY MOMENT
			SET @V_EXIST_TRAN = 1
		END	
		--WE VERIFY IF THE SPE IS GOING TO EXECUTE A UPDATE OR INSERT
		IF @PIN_TYPE_TRANSACTION='I'
	    	BEGIN
			--WE INSERT THE REGISTER ON THE TABLE  ADM.C_EMPLOYEE

			SELECT TOP 1
					@V_DT_THICKNESS = KS.DT_THICKNESS,
					@V_ID_THICKNESS_METRIC = KS.ID_THICKNESS_METRIC,
					@V_NO_THICKNESS_VALUE = KS.NO_THICKNESS_VALUE
			FROM LAB.K_SAMPLE KS
			WHERE (@PIN_ID_FORM IS NULL OR (@PIN_ID_FORM IS NOT NULL AND KS.ID_FORM = @PIN_ID_FORM))
			  AND (@PIN_NO_WORK_ORDER IS NULL OR (@PIN_NO_WORK_ORDER IS NOT NULL AND KS.NO_WORK_ORDER = @PIN_NO_WORK_ORDER))
			  AND (@PIN_NO_PALLET IS NULL OR (@PIN_NO_PALLET IS NOT NULL AND KS.NO_PALLET = @PIN_NO_PALLET))

			  ----select @V_DT_THICKNESS, @V_ID_THICKNESS_METRIC, @V_NO_THICKNESS_VALUE


				INSERT INTO [LAB].[K_SAMPLE]
						   ([NO_SAMPLE]
						   ,[DT_WIDTH]
						   ,[ID_WIDTH_METRIC]
						   ,[NO_WIDTH_VALUE]
						   ,[DT_LENGTH]
						   ,[ID_LENGTH_METRIC]
						   ,[NO_LENGTH_VALUE]
						   ,[DT_THICKNESS]
						   ,[ID_THICKNESS_METRIC]
						   ,[NO_THICKNESS_VALUE]
						   ,[DT_LIGHT_TRANSMISSION]
						   ,[ID_LIGHT_TRANSMISSION_METRIC]
						   ,[NO_LIGHT_TRANSMISSION_VALUE]
						   ,[DT_GLOSS]
						   ,[ID_GLOSS_METRIC]
						   ,[NO_GLOSS_VALUE]
						   ,[DT_WEIGHT]
						   ,[ID_WEIGHT_METRIC]
						   ,[NO_WEIGHT_VALUE]
						   ,[NO_PALLET]
						   ,[NO_WORK_ORDER]
						   ,[ID_FORM]
						   --,[KY_SAMPLE_STATUS]
						   ,[DT_CREATION]
						   ,[KY_USER_APP_CREATION]
						   ,[NM_PROGRAM_CREATE])
					 VALUES
						   (@PIN_NO_SAMPLE
						   ,@PIN_DT_WIDTH
						   ,@PIN_ID_WIDTH_METRIC
						   ,@PIN_NO_WIDTH_VALUE
						   ,@PIN_DT_LENGTH
						   ,@PIN_ID_LENGTH_METRIC
						   ,@PIN_NO_LENGTH_VALUE
						   ,@PIN_DT_THICKNESS --,@V_DT_THICKNESS 
						   ,@PIN_ID_THICKNESS_METRIC -- ,@V_ID_THICKNESS_METRIC
						   ,@PIN_NO_THICKNESS_VALUE -- ,@V_NO_THICKNESS_VALUE
						   ,@PIN_DT_LIGHT_TRANSMISSION
						   ,@PIN_ID_LIGHT_TRANSMISSION_METRIC
						   ,@PIN_NO_LIGHT_TRANSMISSION_VALUE
						   ,@PIN_DT_GLOSS
						   ,@PIN_ID_GLOSS_METRIC
						   ,@PIN_NO_GLOSS_VALUE
						   ,@PIN_DT_WEIGHT
						   ,@PIN_ID_WEIGHT_METRIC
						   ,@PIN_NO_WEIGHT_VALUE
						   ,@PIN_NO_PALLET
						   ,@PIN_NO_WORK_ORDER
						   ,@PIN_ID_FORM
						   --,@PIN_KY_SAMPLE_STATUS
						   ,@CFE_SISTEMA
						   ,@PIN_KY_USER_APP_CREATE
						   ,@PIN_NM_PROGRAM_CREATE)

		END ELSE BEGIN
			-- WE UPDATE THE REGISTER ON THE TABLE ADM.C_EMPLOYEE

			UPDATE [LAB].[K_SAMPLE]
			   SET --[NO_SAMPLE] = @PIN_NO_SAMPLE
				   [DT_WIDTH] = CASE WHEN DT_WIDTH IS NULL THEN @PIN_DT_WIDTH ELSE DT_WIDTH END 
				  ,[ID_WIDTH_METRIC] = CASE WHEN [ID_WIDTH_METRIC] IS NULL THEN @PIN_ID_WIDTH_METRIC ELSE [ID_WIDTH_METRIC] END  
				  ,[NO_WIDTH_VALUE] = CASE WHEN [NO_WIDTH_VALUE] IS NULL THEN @PIN_NO_WIDTH_VALUE ELSE [NO_WIDTH_VALUE] END 
				  ,[DT_LENGTH] = CASE WHEN [DT_LENGTH] IS NULL THEN @PIN_DT_LENGTH ELSE [DT_LENGTH] END 
				  ,[ID_LENGTH_METRIC] = CASE WHEN [ID_LENGTH_METRIC] IS NULL THEN @PIN_ID_LENGTH_METRIC ELSE [ID_LENGTH_METRIC] END 
				  ,[NO_LENGTH_VALUE] = CASE WHEN [NO_LENGTH_VALUE] IS NULL THEN @PIN_NO_LENGTH_VALUE ELSE [NO_LENGTH_VALUE] END 
				  ,[DT_LIGHT_TRANSMISSION] = CASE WHEN [DT_LIGHT_TRANSMISSION] IS NULL THEN @PIN_DT_LIGHT_TRANSMISSION ELSE [DT_LIGHT_TRANSMISSION] END 
				  ,[ID_LIGHT_TRANSMISSION_METRIC] = CASE WHEN [ID_LIGHT_TRANSMISSION_METRIC] IS NULL THEN @PIN_ID_LIGHT_TRANSMISSION_METRIC ELSE [ID_LIGHT_TRANSMISSION_METRIC] END 
				  ,[NO_LIGHT_TRANSMISSION_VALUE] = CASE WHEN [NO_LIGHT_TRANSMISSION_VALUE] IS NULL THEN @PIN_NO_LIGHT_TRANSMISSION_VALUE ELSE [NO_LIGHT_TRANSMISSION_VALUE] END 
				  ,[DT_GLOSS] = CASE WHEN [DT_GLOSS] IS NULL THEN @PIN_DT_GLOSS ELSE [DT_GLOSS] END 
				  ,[ID_GLOSS_METRIC] = CASE WHEN [ID_GLOSS_METRIC] IS NULL THEN @PIN_ID_GLOSS_METRIC ELSE [ID_GLOSS_METRIC] END 
				  ,[NO_GLOSS_VALUE] = CASE WHEN [NO_GLOSS_VALUE] IS NULL THEN @PIN_NO_GLOSS_VALUE ELSE [NO_GLOSS_VALUE] END 
				  ,[DT_WEIGHT] = CASE WHEN [DT_WEIGHT] IS NULL THEN @PIN_DT_WEIGHT ELSE [DT_WEIGHT] END 
				  ,[ID_WEIGHT_METRIC] = CASE WHEN [ID_WEIGHT_METRIC] IS NULL THEN @PIN_ID_WEIGHT_METRIC  ELSE [ID_WEIGHT_METRIC] END 
				  ,[NO_WEIGHT_VALUE] = CASE WHEN [NO_WEIGHT_VALUE] IS NULL THEN @PIN_NO_WEIGHT_VALUE ELSE [NO_WEIGHT_VALUE] END 
				  --,[NO_PALLET] = @PIN_NO_PALLET
				  --,[NO_WORK_ORDER] = @PIN_NO_WORK_ORDER
				  --,[ID_FORM] = @PIN_ID_FORM
				  --,[KY_SAMPLE_STATUS] = @PIN_KY_SAMPLE_STATUS
				  ,[DT_UPDATE] = @CFE_SISTEMA
				  ,[KY_USER_APP_UPDATE] = @PIN_KY_USER_APP_UPDATE
				  ,[NM_PROGRAM_UPDATE] = @PIN_NM_PROGRAM_UPDATE
			 WHERE ID_SAMPLE = @PIN_ID_SAMPLE


			 ------READING THICKNESS UPDATES ALL SAMPLES OF THE PALETTE
			 SELECT @V_NO_PALLET = KS.NO_PALLET,
				    @V_NO_WORK_ORDER = KS.NO_WORK_ORDER,
				    @V_ID_FORM = KS.ID_FORM
			   FROM LAB.K_SAMPLE KS
			  WHERE KS.ID_SAMPLE = @PIN_ID_SAMPLE

			  UPDATE KS
				 SET [DT_THICKNESS] = CASE WHEN [DT_THICKNESS] IS NULL THEN ISNULL(@PIN_DT_THICKNESS,[DT_THICKNESS])  ELSE [DT_THICKNESS] END 
					,[ID_THICKNESS_METRIC] = CASE WHEN [ID_THICKNESS_METRIC] IS NULL THEN ISNULL(@PIN_ID_THICKNESS_METRIC,[ID_THICKNESS_METRIC]) ELSE [ID_THICKNESS_METRIC] END 
					,[NO_THICKNESS_VALUE] = CASE WHEN [NO_THICKNESS_VALUE] IS NULL THEN ISNULL(@PIN_NO_THICKNESS_VALUE,[NO_THICKNESS_VALUE]) ELSE [NO_THICKNESS_VALUE] END 

					,[DT_WEIGHT] = CASE WHEN [DT_WEIGHT] IS NULL THEN ISNULL(@PIN_DT_WEIGHT, [DT_WEIGHT]) ELSE [DT_WEIGHT] END 
				    ,[ID_WEIGHT_METRIC] = CASE WHEN [ID_WEIGHT_METRIC] IS NULL THEN ISNULL(@PIN_ID_WEIGHT_METRIC, [ID_WEIGHT_METRIC]) ELSE [ID_WEIGHT_METRIC] END 
				    ,[NO_WEIGHT_VALUE] = CASE WHEN [NO_WEIGHT_VALUE] IS NULL THEN ISNULL(@PIN_NO_WEIGHT_VALUE,[NO_WEIGHT_VALUE]) ELSE [NO_WEIGHT_VALUE] END 

			    FROM LAB.K_SAMPLE KS
			    WHERE (@V_NO_PALLET IS NULL OR (@V_NO_PALLET IS NOT NULL AND KS.NO_PALLET = @V_NO_PALLET))  
				  AND (@V_NO_WORK_ORDER IS NULL OR (@V_NO_WORK_ORDER IS NOT NULL AND KS.NO_WORK_ORDER = @V_NO_WORK_ORDER))
				  AND (@V_ID_FORM IS NULL OR (@V_ID_FORM IS NOT NULL AND KS.ID_FORM = @V_ID_FORM))



		END
		-- WE BACK A RETURN VARIABLE THAT INDICATES ALL WAS PERFORMED OKAY 
		SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Proceso exitoso', 'ES')
		SET @XML_RESULT = DBO.F_ERROR_INSERT_MESSAGES(@XML_RESULT, 'Successful Process', 'EN')
		-- IF THERE IS A TRANSACTION IN THIS BLOCK, IT WILL BE ERASED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--IF IT OCCURS A ERROR IN THIS BLOCK THE TRANSACTIO GET CANCELED
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			
		DECLARE @KY_ERROR INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MESSAGE NVARCHAR(250)  = 	 ERROR_MESSAGE()
	
	    SET @XML_RESULT = DBO.F_ERROR_CREATE_HEADER( @@ROWCOUNT, @KY_ERROR, 'ERROR')
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR,'Ocurrió un error al procesar el registro: ' + @ERROR_MESSAGE)
		SET @XML_RESULT = DBO.F_ERROR_MESSAGES( @KY_ERROR, 'There was an error processing the register: ' +@ERROR_MESSAGE)
		
			
	END CATCH
END

